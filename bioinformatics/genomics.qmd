```{r}
#| echo: false
conflicts_prefer(GenomicRanges::setdiff)
```

# `SummarizeExperiment`结构

![](images/SummarizedExperiment.webp){fig-align="center" width="80%"}

[SummarizedExperiment docs](https://bioconductor.org/packages/release/bioc/vignettes/SummarizedExperiment/inst/doc/SummarizedExperiment.html)

```{r}
library(SummarizedExperiment)
data(airway, package="airway")
se <- airway
se
```

## 计数矩阵

```{r}
assay(se,1)[1:6,]
assays(se)$counts[1:6,]
```

## 基因元数据

```{r}
rowData(se)
```

## 样本元数据

```{r}
colData(se)

se[,se$dex=="trt"]
colData(se[,se$dex=="trt"])
```

## 元数据

```{r}
metadata(se)
```

## 建立SummarizedExperiment

```{r}
# 计数矩阵
nrows <- 200
ncols <- 6
counts <- matrix(runif(nrows * ncols, 1, 1e4), nrows)

# 基因元数据
rowData <- GRanges(seqnames = rep(c("chr1", "chr2"), c(50, 150)),
                   ranges = IRanges(floor(runif(200, 1e5, 1e6)), width=100),
                    strand=sample(c("+", "-"), 200, TRUE),
                    feature_id=sprintf("ID%03d", 1:200))
rowData
# 样本元数据
colData <- DataFrame(Treatment=rep(c("ChIP", "Input"), 3),
                     row.names=LETTERS[1:6])
# 元数据
metadata <- "这是关于如何一个创建SE的说明对象" 

se <- SummarizedExperiment(assays=list(counts=counts),
                           rowRanges=rowData, 
                           colData=colData,
                           metadata=metadata)
se
```

# `Biostrings`包

`DNAstringSet`、`RNAStringSet`、`AAStringSet`、`BStringSet`

`class:ShortReadQ`：`DNAstringSet`、`BStringSet`

```{r}
# BiocManager::install("Biostrings") 
library(Biostrings) 
dna_strings <- DNAStringSet(c("ATCG", "GCAT", "ATCGAT", "GCTA")) 
dna_strings

rna_strings <- RNAStringSet(c("AUCG", "GCAU", "AUCGAU", "GCUA"))
rna_strings

protein_strings <- AAStringSet(c("MATH", "GCAU", "MATHMATH", "CUMA"))
protein_strings

# 二进制字符串存储 如seq_id、quality
binary_strings <- BStringSet(c("ERCC010101", "CRCC110011", "101010", "111000"))
binary_strings
```

# 基因富集分析

```{r}
tropical=c("darkorange","dodgerblue","hotpink","limegreen","yellow")
palette(tropical)
par(pch=16)
```

```{r}
library(goseq)
library(DESeq2)
head(supportedGenomes())
head(supportedGeneIDs())
data("genes")
sum(is.na(genes))
pwf <- nullp(genes,"hg19","ensGene")

###
GO.wall <- goseq(pwf,"hg19","ensGene")
head(GO.wall)

###
GO.MF <- goseq(pwf,"hg19","ensGene",test.cats = c("GO:MF"))
head(GO.MF)
```

# eQTL(expression quantitative trait loci)

```{r snpdata}
library(MatrixEQTL)
path <- find.package("MatrixEQTL") 
### 复制data到当前工作目录
expr <- read.table("data/GE.txt",sep = "\t",header = T,row.names = 1)
expr

snp <- read.table("data/SNP.txt",sep = "\t",header = T,row.names = 1)
snp

covar <- read.table("data/Covariates.txt",sep = "\t",header = T,row.names = 1)
covar
```

```{r}
e1 <- as.numeric(expr[1,])
s1 <- as.numeric(snp[1,])
e1
s1
lm1 <- lm(e1~s1)
library(broom)
tidy(lm1)
plot(e1 ~ jitter(s1),col=s1+1,xaxt="n",xlab="Genetype",ylab="Expression",pch=16)
axis(1,at=c(0,2,labels=c("AA","Aa","aa")))
lines(lm1$fitted.values~s1,type="b",pch=15,col="darkgrey")
```

```{r}
### 设置参数
pOutputThreshold <- 1e-2
errorCovariance <- numeric()
useModel <- modelLINEAR

### SNP
snp <- SlicedData$new()
snp$fileDelimiter <- "\t"
snp$fileOmitCharacters <- "NA"
snp$fileSkipRows <- 1              # labels
snp$fileSkipColumns <- 1
snp$fileSliceSize <- 2000         # nrows
snp$LoadFile("data/SNP.txt")
snp

### gene
gene <- SlicedData$new()
gene$fileDelimiter <- "\t"
gene$fileOmitCharacters <- "NA"
gene$fileSkipRows <- 1              # labels
gene$fileSkipColumns <- 1
gene$fileSliceSize <- 2000         # nrows
gene$LoadFile("data/GE.txt")
gene

###
covar <- SlicedData$new()
```

```{r eQTL}
eqtl <- Matrix_eQTL_engine(
  snps = snp,
  gene = gene,
  cvrt = covar,
  output_file_name = NULL,
  pvOutputThreshold = pOutputThreshold,
  useModel = useModel,
  errorCovariance = errorCovariance,
  verbose = T,
  pvalue.hist = T,
  min.pv.by.genesnp = F,
  noFDRsaveMemory = F
)
```

```{r}
eqtl$all
eqtl$all$eqtls
plot(eqtl)
```
