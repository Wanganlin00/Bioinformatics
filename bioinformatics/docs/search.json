[
  {
    "objectID": "import.html",
    "href": "import.html",
    "title": "\n2  获取scRNA-seq表达值矩阵\n",
    "section": "",
    "text": "2.1 单细胞测序实验设计",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>获取scRNA-seq表达值矩阵</span>"
    ]
  },
  {
    "objectID": "import.html#单细胞测序实验设计",
    "href": "import.html#单细胞测序实验设计",
    "title": "\n2  获取scRNA-seq表达值矩阵\n",
    "section": "",
    "text": "2.1.1 scRNA-Seq experimental protocols：\n\n液滴，droplet-based protocols，事实标准，高通量，低成本，如10X Genomics、inDrop和Drop-seq；/\n\n平板，plate-based protocols，捕获其他表型信息（如形态学），\n\nUMI平板，plate-based protocols with UMIs，减轻了PCR扩增噪声的影响，如CEL-seq（2）和MARS-seq；\nreads平板，plate-based protocols with reads，提供全转录覆盖（如剪接、外显子组突变），主要是Smart-seq2；\n\n\n其他方案，如sciRNA-seq。\n\n2.1.2 捕获细胞数目和测序深度最佳权衡",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>获取scRNA-seq表达值矩阵</span>"
    ]
  },
  {
    "objectID": "import.html#测序数据计数矩阵",
    "href": "import.html#测序数据计数矩阵",
    "title": "\n2  获取scRNA-seq表达值矩阵\n",
    "section": "\n2.2 测序数据→计数矩阵",
    "text": "2.2 测序数据→计数矩阵\nCellranger https://www.nature.com/articles/ncomms14049\nalevin 伪对比方法.genomebiology\nspike-in transcripts 应将 spike-in sequences作为参考基因组的一部分",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>获取scRNA-seq表达值矩阵</span>"
    ]
  },
  {
    "objectID": "import.html#导入计数矩阵",
    "href": "import.html#导入计数矩阵",
    "title": "\n2  获取scRNA-seq表达值矩阵\n",
    "section": "\n2.3 导入计数矩阵",
    "text": "2.3 导入计数矩阵\n\n2.3.1 从表格格式\n\n2.3.1.1 csv\n下载胰腺scRNA-seq数据集：GSE85241_cellsystems_dataset_4donors_updated.csv.gz(HTTP)\n\nCodemat &lt;- read_delim(\"data/OSCA/GSE85241_cellsystems_dataset_4donors_updated.csv\")\n\nmat &lt;- as.matrix(mat)\ndim(mat)\n#&gt; [1] 19140  3072\n\n\n使用 scuttle 包中的函数以稀疏格式(sparse format)读取，仅存储非零值，避免在低测序的scRNA-seq实验中将内存花费在大多数零上\n\nCodesparse.mat &lt;-\n  scuttle::readSparseCounts(\"data/OSCA/GSE85241_cellsystems_dataset_4donors_updated.csv\")\ndim(sparse.mat)\n#&gt; [1] 19140  3072\n\n\n\nCodeobject.size(sparse.mat)\n#&gt; 150978872 bytes\nobject.size(mat)\n#&gt; 471886952 bytes\n\n\n\n2.3.1.2 excel\n下载：GSE61533_HTSEQ_count_results.xls.gz(HTTP)\n\nCodeall.counts &lt;- readxl::read_excel(\"data/OSCA/GSE61533_HTSEQ_count_results.xls\")\ngene.names &lt;- all.counts$ID\nall.counts &lt;- as.matrix(all.counts[,-1])\nrownames(all.counts) &lt;- gene.names\ndim(all.counts)\n#&gt; [1] 38498    96\n\n\n\n2.3.2 10X Genomics /Cell Ranger\n对于 10X Genomics 数据，Cell Ranger 软件套件将生成一个包含计数和特征/条形码注释的输出目录。\n\nCodesce &lt;- DropletUtils::read10xCounts(\"data/OSCA/pbmc4k_filtered_gene_bc_matrices/filtered_gene_bc_matrices/GRCh38\")\nsce\n#&gt; class: SingleCellExperiment \n#&gt; dim: 33694 4340 \n#&gt; metadata(1): Samples\n#&gt; assays(1): counts\n#&gt; rownames(33694): ENSG00000243485 ENSG00000237613 ... ENSG00000277475\n#&gt;   ENSG00000268674\n#&gt; rowData names(2): ID Symbol\n#&gt; colnames: NULL\n#&gt; colData names(2): Sample Barcode\n#&gt; reducedDimNames(0):\n#&gt; mainExpName: NULL\n#&gt; altExpNames(0):\n\n\n通过将多个目录路径传递给read10xCounts()来读取多个计数矩阵。如果所有数据集都具有相同的基因注释，则该函数将能够将它们组合到单个对象中。下载：Gene / cell matrix (filtered)\n\nCodedirA &lt;- \"data/OSCA/pbmc4k_filtered_gene_bc_matrices/filtered_gene_bc_matrices/GRCh38\"\ndirB &lt;- \"data/OSCA/filtered_gene_bc_matrices - 副本/GRCh38\" #复制 \nsce &lt;- read10xCounts(c(dirA, dirB))\nsce\n#&gt; class: SingleCellExperiment \n#&gt; dim: 33694 8680 \n#&gt; metadata(1): Samples\n#&gt; assays(1): counts\n#&gt; rownames(33694): ENSG00000243485 ENSG00000237613 ... ENSG00000277475\n#&gt;   ENSG00000268674\n#&gt; rowData names(2): ID Symbol\n#&gt; colnames: NULL\n#&gt; colData names(2): Sample Barcode\n#&gt; reducedDimNames(0):\n#&gt; mainExpName: NULL\n#&gt; altExpNames(0):\n\n\n\n2.3.3 HDF5 格式\n一系列scRNA-seq存储格式基于分层数据格式第5版（HDF5）,无需将所有数据读入 R 即可进行基于bioconductor的分析,这使得在计算机内存有限的情况下分析非常大的数据集。 这些格式能够在同一文件中存储表达值以及相关的基因和细胞注释。例如：Gene / cell matrix HDF5 (raw)\n一种是 H5AD 格式。\n\nCodedemo &lt;- system.file(\"extdata\", \"krumsiek11.h5ad\", package = \"zellkonverter\")\nsce &lt;- zellkonverter::readH5AD(demo)\nsce\n#&gt; class: SingleCellExperiment \n#&gt; dim: 11 640 \n#&gt; metadata(2): highlights iroot\n#&gt; assays(1): X\n#&gt; rownames(11): Gata2 Gata1 ... EgrNab Gfi1\n#&gt; rowData names(0):\n#&gt; colnames(640): 0 1 ... 158-3 159-3\n#&gt; colData names(1): cell_type\n#&gt; reducedDimNames(0):\n#&gt; mainExpName: NULL\n#&gt; altExpNames(0):\n\n\n另一种是 Loom 格式\n\nCodedemo &lt;- system.file(\"extdata\", \"L1_DRG_20_example.loom\", package = \"LoomExperiment\")\nscle &lt;- LoomExperiment::import(demo, type=\"SingleCellLoomExperiment\")\nscle\n#&gt; class: SingleCellLoomExperiment \n#&gt; dim: 20 20 \n#&gt; metadata(4): CreatedWith LOOM_SPEC_VERSION LoomExperiment-class\n#&gt;   MatrixName\n#&gt; assays(1): matrix\n#&gt; rownames: NULL\n#&gt; rowData names(7): Accession Gene ... X_Total X_Valid\n#&gt; colnames: NULL\n#&gt; colData names(103): Age AnalysisPool ... cDNA_Lib_Ok ngperul_cDNA\n#&gt; reducedDimNames(0):\n#&gt; mainExpName: NULL\n#&gt; altExpNames(0):\n#&gt; rowGraphs(0): NULL\n#&gt; colGraphs(2): KNN MKNN",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>获取scRNA-seq表达值矩阵</span>"
    ]
  },
  {
    "objectID": "SCE.html",
    "href": "SCE.html",
    "title": "\n3  SingleCellExperiment\n",
    "section": "",
    "text": "3.1 数据结构/类\nSingleCellExperiments结构如 Figure 3.1 所示。\n该数据结构实际上是从父类 SummarizedExperiment 继承。\nCodelibrary(SingleCellExperiment)",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>`SingleCellExperiment`</span>"
    ]
  },
  {
    "objectID": "SCE.html#数据结构类",
    "href": "SCE.html#数据结构类",
    "title": "\n3  SingleCellExperiment\n",
    "section": "",
    "text": "Figure 3.1: `SingleCellExperiment `的结构概述：assays的每一行对应于 rowData（粉色阴影）的一行，而assays的每一列对应于 colData 和 reducedDims（黄色阴影）的一行",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>`SingleCellExperiment`</span>"
    ]
  },
  {
    "objectID": "SCE.html#表达矩阵rawtransformed-counts",
    "href": "SCE.html#表达矩阵rawtransformed-counts",
    "title": "\n3  SingleCellExperiment\n",
    "section": "\n3.2 表达矩阵（raw/transformed counts）",
    "text": "3.2 表达矩阵（raw/transformed counts）\n要构造一个SingleCellExperiment对象，我们只需要导入assays ( Figure 3.1 ,蓝色框 )，其中行对应于特征（基因），列对应于样本（细胞）。下载：counts_Calero_20160113.tsv。\n\n3.2.1 assays\n\n\nCodedf &lt;- read_tsv(\"data/OSCA/counts_Calero_20160113.tsv\")\n\n# 只考虑内源性基因\ndf&lt;- df[str_detect(df$GeneID,\"^ENSMUSG\"),]  #正则表达式，内源性RNA\n\n# 分离基因长度\ngene_length &lt;- df$Length\n\ndf &lt;- df |&gt; column_to_rownames(var = \"GeneID\") # 行标识符\n\n# 计数矩阵\nmat&lt;- as.matrix(df[,-1]) \ndim(mat)\n#&gt; [1] 46603    96\n\n\n\n\n\n\n\n\nERCC = External RNA Controls Consortium ERCC就是一个专门为了定制一套spike-in RNA而成立的组织。\n\n\n\n\n3.2.2 添加assays\n\n然后使用函数 SingleCellExperiment() 以命名列表的形式提供数据，其中列表的每个对象都是一个矩阵。\n\nCodesce &lt;- SingleCellExperiment(assays = list(counts = mat))\nsce\n#&gt; class: SingleCellExperiment \n#&gt; dim: 46603 96 \n#&gt; metadata(0):\n#&gt; assays(1): counts\n#&gt; rownames(46603): ENSMUSG00000102693 ENSMUSG00000064842 ...\n#&gt;   ENSMUSG00000096730 ENSMUSG00000095742\n#&gt; rowData names(0):\n#&gt; colnames(96): SLX-9555.N701_S502.C89V9ANXX.s_1.r_1\n#&gt;   SLX-9555.N701_S503.C89V9ANXX.s_1.r_1 ...\n#&gt;   SLX-9555.N712_S508.C89V9ANXX.s_1.r_1\n#&gt;   SLX-9555.N712_S517.C89V9ANXX.s_1.r_1\n#&gt; colData names(0):\n#&gt; reducedDimNames(0):\n#&gt; mainExpName: NULL\n#&gt; altExpNames(0):\n\n\n\n3.2.2.1 自动添加assays\n\n\nCodesce &lt;- scuttle::logNormCounts(sce) #对数变换归一化表达矩阵\nsce    #  assays 多了一个  \"logcounts\"\n#&gt; class: SingleCellExperiment \n#&gt; dim: 46603 96 \n#&gt; metadata(0):\n#&gt; assays(2): counts logcounts\n#&gt; rownames(46603): ENSMUSG00000102693 ENSMUSG00000064842 ...\n#&gt;   ENSMUSG00000096730 ENSMUSG00000095742\n#&gt; rowData names(0):\n#&gt; colnames(96): SLX-9555.N701_S502.C89V9ANXX.s_1.r_1\n#&gt;   SLX-9555.N701_S503.C89V9ANXX.s_1.r_1 ...\n#&gt;   SLX-9555.N712_S508.C89V9ANXX.s_1.r_1\n#&gt;   SLX-9555.N712_S517.C89V9ANXX.s_1.r_1\n#&gt; colData names(1): sizeFactor\n#&gt; reducedDimNames(0):\n#&gt; mainExpName: NULL\n#&gt; altExpNames(0):\n\ndim(logcounts(sce))\n#&gt; [1] 46603    96\n\n\n\n3.2.2.2 自定义添加assays\n\n\nCodecounts_100 &lt;- counts(sce) + 100\nassay(sce, \"counts_100\") &lt;- counts_100 \nassays(sce) \n#&gt; List of length 3\n#&gt; names(3): counts logcounts counts_100\n\n\n\n3.2.2.3 访问和切片\n\nCode#访问计数矩阵\nassayNames(sce)\n#&gt; [1] \"counts\"     \"logcounts\"  \"counts_100\"\nmat2 &lt;- assay(sce, \"counts\")  #通用\nmat3 &lt;- counts(sce)           #特殊名称 counts  \nlog_mat &lt;- logcounts(sce)\nassayNames(sce)\n#&gt; [1] \"counts\"     \"logcounts\"  \"counts_100\"\nnames(assays(sce))\n#&gt; [1] \"counts\"     \"logcounts\"  \"counts_100\"\n# 切片\nassays(sce) &lt;- assays(sce)[1]\nassayNames(sce)\n#&gt; [1] \"counts\"",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>`SingleCellExperiment`</span>"
    ]
  },
  {
    "objectID": "SCE.html#cell-metadatacoldata",
    "href": "SCE.html#cell-metadatacoldata",
    "title": "\n3  SingleCellExperiment\n",
    "section": "\n3.3 cell metadata（colData）",
    "text": "3.3 cell metadata（colData）\n为了进一步构造对象SingleCellExperiment，需要添加列元数据colData注释细胞或样本，该对象DataFrame中的行对应于细胞，列对应于样本元数据字段，例如原产地批次batch of origin、处理条件treatment condition等（ Figure 3.1 ,橙色框）。下载：E-MTAB-5522.sdrf.txt（第2页）\n\n3.3.1 colData\n\n\nCodecoldata &lt;- read_tsv(\"data/OSCA/E-MTAB-5522.sdrf.txt\")\n\n# 仅保留在计数矩阵 mat中的细胞  第44列==\"counts_Calero_20160113.tsv\"\ncoldata &lt;-\n  coldata[coldata$`Derived Array Data File` == \"counts_Calero_20160113.tsv\", ]\n\n# 仅保留部分列和设置行标识符\ncoldata &lt;- DataFrame(\n  genotype=coldata$`Characteristics[genotype]`,\n  phenotype=coldata$`Characteristics[phenotype]`,\n  spike_in=coldata$`Factor Value[spike-in addition]`,\n  row.names = coldata$`Source Name`\n)\ncoldata\n#&gt; DataFrame with 96 rows and 3 columns\n#&gt;                                                    genotype\n#&gt;                                                 &lt;character&gt;\n#&gt; SLX-9555.N701_S502.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; SLX-9555.N701_S503.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; SLX-9555.N701_S504.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; SLX-9555.N701_S505.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; SLX-9555.N701_S506.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; ...                                                     ...\n#&gt; SLX-9555.N712_S505.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; SLX-9555.N712_S506.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; SLX-9555.N712_S507.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; SLX-9555.N712_S508.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; SLX-9555.N712_S517.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt;                                                   phenotype    spike_in\n#&gt;                                                 &lt;character&gt; &lt;character&gt;\n#&gt; SLX-9555.N701_S502.C89V9ANXX.s_1.r_1    wild type phenotype   ERCC+SIRV\n#&gt; SLX-9555.N701_S503.C89V9ANXX.s_1.r_1    wild type phenotype   ERCC+SIRV\n#&gt; SLX-9555.N701_S504.C89V9ANXX.s_1.r_1    wild type phenotype   ERCC+SIRV\n#&gt; SLX-9555.N701_S505.C89V9ANXX.s_1.r_1 induced CBFB-MYH11 o..   ERCC+SIRV\n#&gt; SLX-9555.N701_S506.C89V9ANXX.s_1.r_1 induced CBFB-MYH11 o..   ERCC+SIRV\n#&gt; ...                                                     ...         ...\n#&gt; SLX-9555.N712_S505.C89V9ANXX.s_1.r_1 induced CBFB-MYH11 o..    Premixed\n#&gt; SLX-9555.N712_S506.C89V9ANXX.s_1.r_1 induced CBFB-MYH11 o..    Premixed\n#&gt; SLX-9555.N712_S507.C89V9ANXX.s_1.r_1 induced CBFB-MYH11 o..    Premixed\n#&gt; SLX-9555.N712_S508.C89V9ANXX.s_1.r_1 induced CBFB-MYH11 o..    Premixed\n#&gt; SLX-9555.N712_S517.C89V9ANXX.s_1.r_1    wild type phenotype    Premixed\n\n\n添加之前确保colData的行名与计数矩阵的列名相同\n\nCodestopifnot(identical(rownames(coldata), colnames(mat)))\n\n\n\n3.3.2 添加colData\n\n\n3.3.2.1 从头开始\n\nCodesce0 &lt;- SingleCellExperiment(assays = list(counts=mat), colData=coldata)\nsce0\ncolData(sce0)\n\n\n\n3.3.2.2 向现有对象添加\n\nCodesce\n#&gt; class: SingleCellExperiment \n#&gt; dim: 46603 96 \n#&gt; metadata(0):\n#&gt; assays(1): counts\n#&gt; rownames(46603): ENSMUSG00000102693 ENSMUSG00000064842 ...\n#&gt;   ENSMUSG00000096730 ENSMUSG00000095742\n#&gt; rowData names(0):\n#&gt; colnames(96): SLX-9555.N701_S502.C89V9ANXX.s_1.r_1\n#&gt;   SLX-9555.N701_S503.C89V9ANXX.s_1.r_1 ...\n#&gt;   SLX-9555.N712_S508.C89V9ANXX.s_1.r_1\n#&gt;   SLX-9555.N712_S517.C89V9ANXX.s_1.r_1\n#&gt; colData names(1): sizeFactor\n#&gt; reducedDimNames(0):\n#&gt; mainExpName: NULL\n#&gt; altExpNames(0):\ncolData(sce) &lt;- coldata\nsce\n#&gt; class: SingleCellExperiment \n#&gt; dim: 46603 96 \n#&gt; metadata(0):\n#&gt; assays(1): counts\n#&gt; rownames(46603): ENSMUSG00000102693 ENSMUSG00000064842 ...\n#&gt;   ENSMUSG00000096730 ENSMUSG00000095742\n#&gt; rowData names(0):\n#&gt; colnames(96): SLX-9555.N701_S502.C89V9ANXX.s_1.r_1\n#&gt;   SLX-9555.N701_S503.C89V9ANXX.s_1.r_1 ...\n#&gt;   SLX-9555.N712_S508.C89V9ANXX.s_1.r_1\n#&gt;   SLX-9555.N712_S517.C89V9ANXX.s_1.r_1\n#&gt; colData names(3): genotype phenotype spike_in\n#&gt; reducedDimNames(0):\n#&gt; mainExpName: NULL\n#&gt; altExpNames(0):\n\n\n或者 分块添加\n\nCodesce1 &lt;- SingleCellExperiment(list(counts=mat))\nsce1$phenotype &lt;- coldata$phenotype\ncolData(sce1)\n#&gt; DataFrame with 96 rows and 1 column\n#&gt;                                                   phenotype\n#&gt;                                                 &lt;character&gt;\n#&gt; SLX-9555.N701_S502.C89V9ANXX.s_1.r_1    wild type phenotype\n#&gt; SLX-9555.N701_S503.C89V9ANXX.s_1.r_1    wild type phenotype\n#&gt; SLX-9555.N701_S504.C89V9ANXX.s_1.r_1    wild type phenotype\n#&gt; SLX-9555.N701_S505.C89V9ANXX.s_1.r_1 induced CBFB-MYH11 o..\n#&gt; SLX-9555.N701_S506.C89V9ANXX.s_1.r_1 induced CBFB-MYH11 o..\n#&gt; ...                                                     ...\n#&gt; SLX-9555.N712_S505.C89V9ANXX.s_1.r_1 induced CBFB-MYH11 o..\n#&gt; SLX-9555.N712_S506.C89V9ANXX.s_1.r_1 induced CBFB-MYH11 o..\n#&gt; SLX-9555.N712_S507.C89V9ANXX.s_1.r_1 induced CBFB-MYH11 o..\n#&gt; SLX-9555.N712_S508.C89V9ANXX.s_1.r_1 induced CBFB-MYH11 o..\n#&gt; SLX-9555.N712_S517.C89V9ANXX.s_1.r_1    wild type phenotype\n\n\n\n3.3.3 函数自动添加\n某些函数在colData中返回额外样本元数据字段，自动添加列元数据。\n\nCodesce &lt;- scuttle::addPerCellQC(sce)  #quality control metrics质量控制指标\ncolData(sce)\n#&gt; DataFrame with 96 rows and 6 columns\n#&gt;                                                    genotype\n#&gt;                                                 &lt;character&gt;\n#&gt; SLX-9555.N701_S502.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; SLX-9555.N701_S503.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; SLX-9555.N701_S504.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; SLX-9555.N701_S505.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; SLX-9555.N701_S506.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; ...                                                     ...\n#&gt; SLX-9555.N712_S505.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; SLX-9555.N712_S506.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; SLX-9555.N712_S507.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; SLX-9555.N712_S508.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; SLX-9555.N712_S517.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt;                                                   phenotype    spike_in\n#&gt;                                                 &lt;character&gt; &lt;character&gt;\n#&gt; SLX-9555.N701_S502.C89V9ANXX.s_1.r_1    wild type phenotype   ERCC+SIRV\n#&gt; SLX-9555.N701_S503.C89V9ANXX.s_1.r_1    wild type phenotype   ERCC+SIRV\n#&gt; SLX-9555.N701_S504.C89V9ANXX.s_1.r_1    wild type phenotype   ERCC+SIRV\n#&gt; SLX-9555.N701_S505.C89V9ANXX.s_1.r_1 induced CBFB-MYH11 o..   ERCC+SIRV\n#&gt; SLX-9555.N701_S506.C89V9ANXX.s_1.r_1 induced CBFB-MYH11 o..   ERCC+SIRV\n#&gt; ...                                                     ...         ...\n#&gt; SLX-9555.N712_S505.C89V9ANXX.s_1.r_1 induced CBFB-MYH11 o..    Premixed\n#&gt; SLX-9555.N712_S506.C89V9ANXX.s_1.r_1 induced CBFB-MYH11 o..    Premixed\n#&gt; SLX-9555.N712_S507.C89V9ANXX.s_1.r_1 induced CBFB-MYH11 o..    Premixed\n#&gt; SLX-9555.N712_S508.C89V9ANXX.s_1.r_1 induced CBFB-MYH11 o..    Premixed\n#&gt; SLX-9555.N712_S517.C89V9ANXX.s_1.r_1    wild type phenotype    Premixed\n#&gt;                                            sum  detected     total\n#&gt;                                      &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt;\n#&gt; SLX-9555.N701_S502.C89V9ANXX.s_1.r_1    854171      7617    854171\n#&gt; SLX-9555.N701_S503.C89V9ANXX.s_1.r_1   1044243      7520   1044243\n#&gt; SLX-9555.N701_S504.C89V9ANXX.s_1.r_1   1152450      8305   1152450\n#&gt; SLX-9555.N701_S505.C89V9ANXX.s_1.r_1   1193876      8142   1193876\n#&gt; SLX-9555.N701_S506.C89V9ANXX.s_1.r_1   1521472      7153   1521472\n#&gt; ...                                        ...       ...       ...\n#&gt; SLX-9555.N712_S505.C89V9ANXX.s_1.r_1    203221      5608    203221\n#&gt; SLX-9555.N712_S506.C89V9ANXX.s_1.r_1   1059853      6948   1059853\n#&gt; SLX-9555.N712_S507.C89V9ANXX.s_1.r_1   1672343      6879   1672343\n#&gt; SLX-9555.N712_S508.C89V9ANXX.s_1.r_1   1939537      7213   1939537\n#&gt; SLX-9555.N712_S517.C89V9ANXX.s_1.r_1   1436899      8469   1436899\nsce\n#&gt; class: SingleCellExperiment \n#&gt; dim: 46603 96 \n#&gt; metadata(0):\n#&gt; assays(1): counts\n#&gt; rownames(46603): ENSMUSG00000102693 ENSMUSG00000064842 ...\n#&gt;   ENSMUSG00000096730 ENSMUSG00000095742\n#&gt; rowData names(0):\n#&gt; colnames(96): SLX-9555.N701_S502.C89V9ANXX.s_1.r_1\n#&gt;   SLX-9555.N701_S503.C89V9ANXX.s_1.r_1 ...\n#&gt;   SLX-9555.N712_S508.C89V9ANXX.s_1.r_1\n#&gt;   SLX-9555.N712_S517.C89V9ANXX.s_1.r_1\n#&gt; colData names(6): genotype phenotype ... detected total\n#&gt; reducedDimNames(0):\n#&gt; mainExpName: NULL\n#&gt; altExpNames(0):",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>`SingleCellExperiment`</span>"
    ]
  },
  {
    "objectID": "SCE.html#featuregene-metadata-rowdata",
    "href": "SCE.html#featuregene-metadata-rowdata",
    "title": "\n3  SingleCellExperiment\n",
    "section": "\n3.4 feature/gene metadata ( rowData)",
    "text": "3.4 feature/gene metadata ( rowData)\n添加行元数据rawData注释基因，DataFrame中每行对应一个基因，每列对应一个基因元数据字段，例如转录本长度、基因符号等注释。（ Figure 3.1 ,绿色框）\n\n3.4.0.1 rowData\n\n\nCoderowData(sce)\n#&gt; DataFrame with 46603 rows and 0 columns\nrowData(sce)$Length &lt;- gene_length\nrowData(sce)\n#&gt; DataFrame with 46603 rows and 1 column\n#&gt;                       Length\n#&gt;                    &lt;numeric&gt;\n#&gt; ENSMUSG00000102693      1070\n#&gt; ENSMUSG00000064842       110\n#&gt; ENSMUSG00000051951      6094\n#&gt; ENSMUSG00000102851       480\n#&gt; ENSMUSG00000103377      2819\n#&gt; ...                      ...\n#&gt; ENSMUSG00000094431       100\n#&gt; ENSMUSG00000094621       121\n#&gt; ENSMUSG00000098647        99\n#&gt; ENSMUSG00000096730      3077\n#&gt; ENSMUSG00000095742       243\n\n\n某些函数在rowData中返回额外基因元数据字段，自动添加行元数据。\n\nCodesce &lt;- scuttle::addPerFeatureQC(sce)\nrowData(sce)\n#&gt; DataFrame with 46603 rows and 3 columns\n#&gt;                       Length      mean  detected\n#&gt;                    &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt;\n#&gt; ENSMUSG00000102693      1070 0.0000000   0.00000\n#&gt; ENSMUSG00000064842       110 0.0000000   0.00000\n#&gt; ENSMUSG00000051951      6094 0.0000000   0.00000\n#&gt; ENSMUSG00000102851       480 0.0000000   0.00000\n#&gt; ENSMUSG00000103377      2819 0.0208333   1.04167\n#&gt; ...                      ...       ...       ...\n#&gt; ENSMUSG00000094431       100         0         0\n#&gt; ENSMUSG00000094621       121         0         0\n#&gt; ENSMUSG00000098647        99         0         0\n#&gt; ENSMUSG00000096730      3077         0         0\n#&gt; ENSMUSG00000095742       243         0         0\n\n\n\n3.4.0.2 rowRanges\n\nrowRanges：以GRangesList或 GRanges的形式保存基因组坐标，描述了特征（基因、基因组区域）的染色体、起始坐标和结束坐标。\n\nCodeSummarizedExperiment::rowRanges(sce)  #empty\n#&gt; GRangesList object of length 46603:\n#&gt; $ENSMUSG00000102693\n#&gt; GRanges object with 0 ranges and 0 metadata columns:\n#&gt;    seqnames    ranges strand\n#&gt;       &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt;\n#&gt;   -------\n#&gt;   seqinfo: no sequences\n#&gt; \n#&gt; $ENSMUSG00000064842\n#&gt; GRanges object with 0 ranges and 0 metadata columns:\n#&gt;    seqnames    ranges strand\n#&gt;       &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt;\n#&gt;   -------\n#&gt;   seqinfo: no sequences\n#&gt; \n#&gt; $ENSMUSG00000051951\n#&gt; GRanges object with 0 ranges and 0 metadata columns:\n#&gt;    seqnames    ranges strand\n#&gt;       &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt;\n#&gt;   -------\n#&gt;   seqinfo: no sequences\n#&gt; \n#&gt; ...\n#&gt; &lt;46600 more elements&gt;\n\n\n填充 rowRanges的方式取决于在比对和定量过程中使用的生物体种类和注释文件。 常用的是Ensembl 标识符，因此我们可以使用rtracklayer从包含 Ensembl 注释的 GTF 文件中载入GRanges。下载：Mus_musculus.GRCm38.82.gtf.gz\n\nCodegene_data &lt;- rtracklayer::import(\"data/OSCA/Mus_musculus.GRCm38.82.gtf.gz\")\nhead(gene_data)\n#&gt; GRanges object with 6 ranges and 26 metadata columns:\n#&gt;       seqnames          ranges strand |   source       type     score     phase\n#&gt;          &lt;Rle&gt;       &lt;IRanges&gt;  &lt;Rle&gt; | &lt;factor&gt;   &lt;factor&gt; &lt;numeric&gt; &lt;integer&gt;\n#&gt;   [1]        1 3073253-3074322      + |  havana  gene              NA      &lt;NA&gt;\n#&gt;   [2]        1 3073253-3074322      + |  havana  transcript        NA      &lt;NA&gt;\n#&gt;   [3]        1 3073253-3074322      + |  havana  exon              NA      &lt;NA&gt;\n#&gt;   [4]        1 3102016-3102125      + |  ensembl gene              NA      &lt;NA&gt;\n#&gt;   [5]        1 3102016-3102125      + |  ensembl transcript        NA      &lt;NA&gt;\n#&gt;   [6]        1 3102016-3102125      + |  ensembl exon              NA      &lt;NA&gt;\n#&gt;                  gene_id gene_version     gene_name gene_source gene_biotype\n#&gt;              &lt;character&gt;  &lt;character&gt;   &lt;character&gt; &lt;character&gt;  &lt;character&gt;\n#&gt;   [1] ENSMUSG00000102693            1 4933401J01Rik      havana          TEC\n#&gt;   [2] ENSMUSG00000102693            1 4933401J01Rik      havana          TEC\n#&gt;   [3] ENSMUSG00000102693            1 4933401J01Rik      havana          TEC\n#&gt;   [4] ENSMUSG00000064842            1       Gm26206     ensembl        snRNA\n#&gt;   [5] ENSMUSG00000064842            1       Gm26206     ensembl        snRNA\n#&gt;   [6] ENSMUSG00000064842            1       Gm26206     ensembl        snRNA\n#&gt;              havana_gene havana_gene_version      transcript_id\n#&gt;              &lt;character&gt;         &lt;character&gt;        &lt;character&gt;\n#&gt;   [1] OTTMUSG00000049935                   1               &lt;NA&gt;\n#&gt;   [2] OTTMUSG00000049935                   1 ENSMUST00000193812\n#&gt;   [3] OTTMUSG00000049935                   1 ENSMUST00000193812\n#&gt;   [4]               &lt;NA&gt;                &lt;NA&gt;               &lt;NA&gt;\n#&gt;   [5]               &lt;NA&gt;                &lt;NA&gt; ENSMUST00000082908\n#&gt;   [6]               &lt;NA&gt;                &lt;NA&gt; ENSMUST00000082908\n#&gt;       transcript_version   transcript_name transcript_source transcript_biotype\n#&gt;              &lt;character&gt;       &lt;character&gt;       &lt;character&gt;        &lt;character&gt;\n#&gt;   [1]               &lt;NA&gt;              &lt;NA&gt;              &lt;NA&gt;               &lt;NA&gt;\n#&gt;   [2]                  1 4933401J01Rik-001            havana                TEC\n#&gt;   [3]                  1 4933401J01Rik-001            havana                TEC\n#&gt;   [4]               &lt;NA&gt;              &lt;NA&gt;              &lt;NA&gt;               &lt;NA&gt;\n#&gt;   [5]                  1       Gm26206-201           ensembl              snRNA\n#&gt;   [6]                  1       Gm26206-201           ensembl              snRNA\n#&gt;        havana_transcript havana_transcript_version         tag\n#&gt;              &lt;character&gt;               &lt;character&gt; &lt;character&gt;\n#&gt;   [1]               &lt;NA&gt;                      &lt;NA&gt;        &lt;NA&gt;\n#&gt;   [2] OTTMUST00000127109                         1       basic\n#&gt;   [3] OTTMUST00000127109                         1       basic\n#&gt;   [4]               &lt;NA&gt;                      &lt;NA&gt;        &lt;NA&gt;\n#&gt;   [5]               &lt;NA&gt;                      &lt;NA&gt;       basic\n#&gt;   [6]               &lt;NA&gt;                      &lt;NA&gt;       basic\n#&gt;       transcript_support_level exon_number            exon_id exon_version\n#&gt;                    &lt;character&gt; &lt;character&gt;        &lt;character&gt;  &lt;character&gt;\n#&gt;   [1]                     &lt;NA&gt;        &lt;NA&gt;               &lt;NA&gt;         &lt;NA&gt;\n#&gt;   [2]                       NA        &lt;NA&gt;               &lt;NA&gt;         &lt;NA&gt;\n#&gt;   [3]                       NA           1 ENSMUSE00001343744            1\n#&gt;   [4]                     &lt;NA&gt;        &lt;NA&gt;               &lt;NA&gt;         &lt;NA&gt;\n#&gt;   [5]                       NA        &lt;NA&gt;               &lt;NA&gt;         &lt;NA&gt;\n#&gt;   [6]                       NA           1 ENSMUSE00000522066            1\n#&gt;           ccds_id  protein_id protein_version\n#&gt;       &lt;character&gt; &lt;character&gt;     &lt;character&gt;\n#&gt;   [1]        &lt;NA&gt;        &lt;NA&gt;            &lt;NA&gt;\n#&gt;   [2]        &lt;NA&gt;        &lt;NA&gt;            &lt;NA&gt;\n#&gt;   [3]        &lt;NA&gt;        &lt;NA&gt;            &lt;NA&gt;\n#&gt;   [4]        &lt;NA&gt;        &lt;NA&gt;            &lt;NA&gt;\n#&gt;   [5]        &lt;NA&gt;        &lt;NA&gt;            &lt;NA&gt;\n#&gt;   [6]        &lt;NA&gt;        &lt;NA&gt;            &lt;NA&gt;\n#&gt;   -------\n#&gt;   seqinfo: 45 sequences from an unspecified genome; no seqlengths\n\n# 整理数据\ngene_data &lt;- gene_data[gene_data$type==\"gene\"]\nnames(gene_data) &lt;- gene_data$gene_id\n\n#DataFrame：mcols(gene_data) \nis.gene.related &lt;- str_detect(colnames(mcols(gene_data)),\"gene_\") #  6 TRUE\nmcols(gene_data) &lt;- mcols(gene_data)[,is.gene.related]\nmcols(gene_data)  # 46603 × 6\n#&gt; DataFrame with 46603 rows and 6 columns\n#&gt;                               gene_id gene_version      gene_name\n#&gt;                           &lt;character&gt;  &lt;character&gt;    &lt;character&gt;\n#&gt; ENSMUSG00000102693 ENSMUSG00000102693            1  4933401J01Rik\n#&gt; ENSMUSG00000064842 ENSMUSG00000064842            1        Gm26206\n#&gt; ENSMUSG00000051951 ENSMUSG00000051951            5           Xkr4\n#&gt; ENSMUSG00000102851 ENSMUSG00000102851            1        Gm18956\n#&gt; ENSMUSG00000103377 ENSMUSG00000103377            1        Gm37180\n#&gt; ...                               ...          ...            ...\n#&gt; ENSMUSG00000094431 ENSMUSG00000094431            1 CAAA01205117.1\n#&gt; ENSMUSG00000094621 ENSMUSG00000094621            1 CAAA01098150.1\n#&gt; ENSMUSG00000098647 ENSMUSG00000098647            1 CAAA01064564.1\n#&gt; ENSMUSG00000096730 ENSMUSG00000096730            6       Vmn2r122\n#&gt; ENSMUSG00000095742 ENSMUSG00000095742            1 CAAA01147332.1\n#&gt;                       gene_source         gene_biotype havana_gene_version\n#&gt;                       &lt;character&gt;          &lt;character&gt;         &lt;character&gt;\n#&gt; ENSMUSG00000102693         havana                  TEC                   1\n#&gt; ENSMUSG00000064842        ensembl                snRNA                  NA\n#&gt; ENSMUSG00000051951 ensembl_havana       protein_coding                   2\n#&gt; ENSMUSG00000102851         havana processed_pseudogene                   1\n#&gt; ENSMUSG00000103377         havana                  TEC                   1\n#&gt; ...                           ...                  ...                 ...\n#&gt; ENSMUSG00000094431        ensembl                miRNA                  NA\n#&gt; ENSMUSG00000094621        ensembl                miRNA                  NA\n#&gt; ENSMUSG00000098647        ensembl                miRNA                  NA\n#&gt; ENSMUSG00000096730        ensembl       protein_coding                  NA\n#&gt; ENSMUSG00000095742        ensembl       protein_coding                  NA\n\n#rownames(sce) 46603行 观测基因\nSummarizedExperiment::rowRanges(sce) &lt;- gene_data[rownames(sce)]\nSummarizedExperiment::rowRanges(sce)[1:6,]\n#&gt; GRanges object with 6 ranges and 6 metadata columns:\n#&gt;                      seqnames          ranges strand |            gene_id\n#&gt;                         &lt;Rle&gt;       &lt;IRanges&gt;  &lt;Rle&gt; |        &lt;character&gt;\n#&gt;   ENSMUSG00000102693        1 3073253-3074322      + | ENSMUSG00000102693\n#&gt;   ENSMUSG00000064842        1 3102016-3102125      + | ENSMUSG00000064842\n#&gt;   ENSMUSG00000051951        1 3205901-3671498      - | ENSMUSG00000051951\n#&gt;   ENSMUSG00000102851        1 3252757-3253236      + | ENSMUSG00000102851\n#&gt;   ENSMUSG00000103377        1 3365731-3368549      - | ENSMUSG00000103377\n#&gt;   ENSMUSG00000104017        1 3375556-3377788      - | ENSMUSG00000104017\n#&gt;                      gene_version     gene_name    gene_source\n#&gt;                       &lt;character&gt;   &lt;character&gt;    &lt;character&gt;\n#&gt;   ENSMUSG00000102693            1 4933401J01Rik         havana\n#&gt;   ENSMUSG00000064842            1       Gm26206        ensembl\n#&gt;   ENSMUSG00000051951            5          Xkr4 ensembl_havana\n#&gt;   ENSMUSG00000102851            1       Gm18956         havana\n#&gt;   ENSMUSG00000103377            1       Gm37180         havana\n#&gt;   ENSMUSG00000104017            1       Gm37363         havana\n#&gt;                              gene_biotype havana_gene_version\n#&gt;                               &lt;character&gt;         &lt;character&gt;\n#&gt;   ENSMUSG00000102693                  TEC                   1\n#&gt;   ENSMUSG00000064842                snRNA                &lt;NA&gt;\n#&gt;   ENSMUSG00000051951       protein_coding                   2\n#&gt;   ENSMUSG00000102851 processed_pseudogene                   1\n#&gt;   ENSMUSG00000103377                  TEC                   1\n#&gt;   ENSMUSG00000104017                  TEC                   1\n#&gt;   -------\n#&gt;   seqinfo: 45 sequences from an unspecified genome; no seqlengths\n\nsce\n#&gt; class: SingleCellExperiment \n#&gt; dim: 46603 96 \n#&gt; metadata(0):\n#&gt; assays(1): counts\n#&gt; rownames(46603): ENSMUSG00000102693 ENSMUSG00000064842 ...\n#&gt;   ENSMUSG00000096730 ENSMUSG00000095742\n#&gt; rowData names(6): gene_id gene_version ... gene_biotype\n#&gt;   havana_gene_version\n#&gt; colnames(96): SLX-9555.N701_S502.C89V9ANXX.s_1.r_1\n#&gt;   SLX-9555.N701_S503.C89V9ANXX.s_1.r_1 ...\n#&gt;   SLX-9555.N712_S508.C89V9ANXX.s_1.r_1\n#&gt;   SLX-9555.N712_S517.C89V9ANXX.s_1.r_1\n#&gt; colData names(6): genotype phenotype ... detected total\n#&gt; reducedDimNames(0):\n#&gt; mainExpName: NULL\n#&gt; altExpNames(0):\n\n\n\n3.4.1 其他元数据\n其他注释可以以命名列表存储在metadata 中。 例如，实验元数据，高度可变基因（highly variable genes）。。。，缺点是与表达矩阵的行或列的操作不同步。\n\nCodeDEG_up &lt;- c(\"gene_x\", \"gene_y\")\nmetadata(sce) &lt;- list(HVGs = DEG_up)\nmetadata(sce)\n#&gt; $HVGs\n#&gt; [1] \"gene_x\" \"gene_y\"\nDEG_down &lt;- c(\"gene_a\", \"gene_b\")\nmetadata(sce)$DEG_down &lt;- DEG_down\nmetadata(sce)\n#&gt; $HVGs\n#&gt; [1] \"gene_x\" \"gene_y\"\n#&gt; \n#&gt; $DEG_down\n#&gt; [1] \"gene_a\" \"gene_b\"\nsce\n#&gt; class: SingleCellExperiment \n#&gt; dim: 46603 96 \n#&gt; metadata(2): HVGs DEG_down\n#&gt; assays(1): counts\n#&gt; rownames(46603): ENSMUSG00000102693 ENSMUSG00000064842 ...\n#&gt;   ENSMUSG00000096730 ENSMUSG00000095742\n#&gt; rowData names(6): gene_id gene_version ... gene_biotype\n#&gt;   havana_gene_version\n#&gt; colnames(96): SLX-9555.N701_S502.C89V9ANXX.s_1.r_1\n#&gt;   SLX-9555.N701_S503.C89V9ANXX.s_1.r_1 ...\n#&gt;   SLX-9555.N712_S508.C89V9ANXX.s_1.r_1\n#&gt;   SLX-9555.N712_S517.C89V9ANXX.s_1.r_1\n#&gt; colData names(6): genotype phenotype ... detected total\n#&gt; reducedDimNames(0):\n#&gt; mainExpName: NULL\n#&gt; altExpNames(0):",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>`SingleCellExperiment`</span>"
    ]
  },
  {
    "objectID": "SCE.html#子集和组合",
    "href": "SCE.html#子集和组合",
    "title": "\n3  SingleCellExperiment\n",
    "section": "\n3.5 子集和组合",
    "text": "3.5 子集和组合\n\n3.5.1 子集\n\nCodefirst.10 &lt;- sce[,1:10]\nncol(counts(first.10)) #  计数矩阵仅有 10 列\n#&gt; [1] 10\ncolData(first.10) # only 10 rows.\n#&gt; DataFrame with 10 rows and 6 columns\n#&gt;                                                    genotype\n#&gt;                                                 &lt;character&gt;\n#&gt; SLX-9555.N701_S502.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; SLX-9555.N701_S503.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; SLX-9555.N701_S504.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; SLX-9555.N701_S505.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; SLX-9555.N701_S506.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; SLX-9555.N701_S507.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; SLX-9555.N701_S508.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; SLX-9555.N701_S517.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; SLX-9555.N702_S502.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; SLX-9555.N702_S503.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt;                                                   phenotype    spike_in\n#&gt;                                                 &lt;character&gt; &lt;character&gt;\n#&gt; SLX-9555.N701_S502.C89V9ANXX.s_1.r_1    wild type phenotype   ERCC+SIRV\n#&gt; SLX-9555.N701_S503.C89V9ANXX.s_1.r_1    wild type phenotype   ERCC+SIRV\n#&gt; SLX-9555.N701_S504.C89V9ANXX.s_1.r_1    wild type phenotype   ERCC+SIRV\n#&gt; SLX-9555.N701_S505.C89V9ANXX.s_1.r_1 induced CBFB-MYH11 o..   ERCC+SIRV\n#&gt; SLX-9555.N701_S506.C89V9ANXX.s_1.r_1 induced CBFB-MYH11 o..   ERCC+SIRV\n#&gt; SLX-9555.N701_S507.C89V9ANXX.s_1.r_1 induced CBFB-MYH11 o..   ERCC+SIRV\n#&gt; SLX-9555.N701_S508.C89V9ANXX.s_1.r_1 induced CBFB-MYH11 o..   ERCC+SIRV\n#&gt; SLX-9555.N701_S517.C89V9ANXX.s_1.r_1    wild type phenotype   ERCC+SIRV\n#&gt; SLX-9555.N702_S502.C89V9ANXX.s_1.r_1    wild type phenotype   ERCC+SIRV\n#&gt; SLX-9555.N702_S503.C89V9ANXX.s_1.r_1    wild type phenotype   ERCC+SIRV\n#&gt;                                            sum  detected     total\n#&gt;                                      &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt;\n#&gt; SLX-9555.N701_S502.C89V9ANXX.s_1.r_1    854171      7617    854171\n#&gt; SLX-9555.N701_S503.C89V9ANXX.s_1.r_1   1044243      7520   1044243\n#&gt; SLX-9555.N701_S504.C89V9ANXX.s_1.r_1   1152450      8305   1152450\n#&gt; SLX-9555.N701_S505.C89V9ANXX.s_1.r_1   1193876      8142   1193876\n#&gt; SLX-9555.N701_S506.C89V9ANXX.s_1.r_1   1521472      7153   1521472\n#&gt; SLX-9555.N701_S507.C89V9ANXX.s_1.r_1    866705      6828    866705\n#&gt; SLX-9555.N701_S508.C89V9ANXX.s_1.r_1    608581      6966    608581\n#&gt; SLX-9555.N701_S517.C89V9ANXX.s_1.r_1   1113526      8634   1113526\n#&gt; SLX-9555.N702_S502.C89V9ANXX.s_1.r_1   1308250      8364   1308250\n#&gt; SLX-9555.N702_S503.C89V9ANXX.s_1.r_1    778605      8665    778605\n\n\n只想要野生型细胞\n\nCodewt.only &lt;- sce[, sce$phenotype == \"wild type phenotype\"]\nncol(counts(wt.only))\n#&gt; [1] 48\ncolData(wt.only)\n#&gt; DataFrame with 48 rows and 6 columns\n#&gt;                                                    genotype           phenotype\n#&gt;                                                 &lt;character&gt;         &lt;character&gt;\n#&gt; SLX-9555.N701_S502.C89V9ANXX.s_1.r_1 Doxycycline-inducibl.. wild type phenotype\n#&gt; SLX-9555.N701_S503.C89V9ANXX.s_1.r_1 Doxycycline-inducibl.. wild type phenotype\n#&gt; SLX-9555.N701_S504.C89V9ANXX.s_1.r_1 Doxycycline-inducibl.. wild type phenotype\n#&gt; SLX-9555.N701_S517.C89V9ANXX.s_1.r_1 Doxycycline-inducibl.. wild type phenotype\n#&gt; SLX-9555.N702_S502.C89V9ANXX.s_1.r_1 Doxycycline-inducibl.. wild type phenotype\n#&gt; ...                                                     ...                 ...\n#&gt; SLX-9555.N711_S517.C89V9ANXX.s_1.r_1 Doxycycline-inducibl.. wild type phenotype\n#&gt; SLX-9555.N712_S502.C89V9ANXX.s_1.r_1 Doxycycline-inducibl.. wild type phenotype\n#&gt; SLX-9555.N712_S503.C89V9ANXX.s_1.r_1 Doxycycline-inducibl.. wild type phenotype\n#&gt; SLX-9555.N712_S504.C89V9ANXX.s_1.r_1 Doxycycline-inducibl.. wild type phenotype\n#&gt; SLX-9555.N712_S517.C89V9ANXX.s_1.r_1 Doxycycline-inducibl.. wild type phenotype\n#&gt;                                         spike_in       sum  detected     total\n#&gt;                                      &lt;character&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt;\n#&gt; SLX-9555.N701_S502.C89V9ANXX.s_1.r_1   ERCC+SIRV    854171      7617    854171\n#&gt; SLX-9555.N701_S503.C89V9ANXX.s_1.r_1   ERCC+SIRV   1044243      7520   1044243\n#&gt; SLX-9555.N701_S504.C89V9ANXX.s_1.r_1   ERCC+SIRV   1152450      8305   1152450\n#&gt; SLX-9555.N701_S517.C89V9ANXX.s_1.r_1   ERCC+SIRV   1113526      8634   1113526\n#&gt; SLX-9555.N702_S502.C89V9ANXX.s_1.r_1   ERCC+SIRV   1308250      8364   1308250\n#&gt; ...                                          ...       ...       ...       ...\n#&gt; SLX-9555.N711_S517.C89V9ANXX.s_1.r_1    Premixed   1317671      8581   1317671\n#&gt; SLX-9555.N712_S502.C89V9ANXX.s_1.r_1    Premixed   1736189      9687   1736189\n#&gt; SLX-9555.N712_S503.C89V9ANXX.s_1.r_1    Premixed   1521132      8983   1521132\n#&gt; SLX-9555.N712_S504.C89V9ANXX.s_1.r_1    Premixed   1759166      8480   1759166\n#&gt; SLX-9555.N712_S517.C89V9ANXX.s_1.r_1    Premixed   1436899      8469   1436899\n\n\n只想保留蛋白质编码基因\n\nCodecoding.only &lt;- sce[rowData(sce)$gene_biotype == \"protein_coding\",]\nnrow(counts(coding.only))\n#&gt; [1] 22013\nrowData(coding.only)\n#&gt; DataFrame with 22013 rows and 6 columns\n#&gt;                               gene_id gene_version      gene_name\n#&gt;                           &lt;character&gt;  &lt;character&gt;    &lt;character&gt;\n#&gt; ENSMUSG00000051951 ENSMUSG00000051951            5           Xkr4\n#&gt; ENSMUSG00000025900 ENSMUSG00000025900            9            Rp1\n#&gt; ENSMUSG00000025902 ENSMUSG00000025902           12          Sox17\n#&gt; ENSMUSG00000033845 ENSMUSG00000033845           12         Mrpl15\n#&gt; ENSMUSG00000025903 ENSMUSG00000025903           13         Lypla1\n#&gt; ...                               ...          ...            ...\n#&gt; ENSMUSG00000079808 ENSMUSG00000079808            3     AC168977.1\n#&gt; ENSMUSG00000095041 ENSMUSG00000095041            6           PISD\n#&gt; ENSMUSG00000063897 ENSMUSG00000063897            3          DHRSX\n#&gt; ENSMUSG00000096730 ENSMUSG00000096730            6       Vmn2r122\n#&gt; ENSMUSG00000095742 ENSMUSG00000095742            1 CAAA01147332.1\n#&gt;                       gene_source   gene_biotype havana_gene_version\n#&gt;                       &lt;character&gt;    &lt;character&gt;         &lt;character&gt;\n#&gt; ENSMUSG00000051951 ensembl_havana protein_coding                   2\n#&gt; ENSMUSG00000025900 ensembl_havana protein_coding                   2\n#&gt; ENSMUSG00000025902 ensembl_havana protein_coding                   6\n#&gt; ENSMUSG00000033845 ensembl_havana protein_coding                   3\n#&gt; ENSMUSG00000025903 ensembl_havana protein_coding                   3\n#&gt; ...                           ...            ...                 ...\n#&gt; ENSMUSG00000079808        ensembl protein_coding                  NA\n#&gt; ENSMUSG00000095041        ensembl protein_coding                  NA\n#&gt; ENSMUSG00000063897        ensembl protein_coding                  NA\n#&gt; ENSMUSG00000096730        ensembl protein_coding                  NA\n#&gt; ENSMUSG00000095742        ensembl protein_coding                  NA\n\n\n\n3.5.2 组合\n按列组合，假设所有涉及的对象都具有相同的行注释值和兼容的列注释字段\n\nCodesce2 &lt;- cbind(sce, sce)\nncol(counts(sce2)) # twice as many columns\n#&gt; [1] 192\ncolData(sce2) # twice as many rows\n#&gt; DataFrame with 192 rows and 6 columns\n#&gt;                                                    genotype\n#&gt;                                                 &lt;character&gt;\n#&gt; SLX-9555.N701_S502.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; SLX-9555.N701_S503.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; SLX-9555.N701_S504.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; SLX-9555.N701_S505.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; SLX-9555.N701_S506.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; ...                                                     ...\n#&gt; SLX-9555.N712_S505.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; SLX-9555.N712_S506.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; SLX-9555.N712_S507.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; SLX-9555.N712_S508.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt; SLX-9555.N712_S517.C89V9ANXX.s_1.r_1 Doxycycline-inducibl..\n#&gt;                                                   phenotype    spike_in\n#&gt;                                                 &lt;character&gt; &lt;character&gt;\n#&gt; SLX-9555.N701_S502.C89V9ANXX.s_1.r_1    wild type phenotype   ERCC+SIRV\n#&gt; SLX-9555.N701_S503.C89V9ANXX.s_1.r_1    wild type phenotype   ERCC+SIRV\n#&gt; SLX-9555.N701_S504.C89V9ANXX.s_1.r_1    wild type phenotype   ERCC+SIRV\n#&gt; SLX-9555.N701_S505.C89V9ANXX.s_1.r_1 induced CBFB-MYH11 o..   ERCC+SIRV\n#&gt; SLX-9555.N701_S506.C89V9ANXX.s_1.r_1 induced CBFB-MYH11 o..   ERCC+SIRV\n#&gt; ...                                                     ...         ...\n#&gt; SLX-9555.N712_S505.C89V9ANXX.s_1.r_1 induced CBFB-MYH11 o..    Premixed\n#&gt; SLX-9555.N712_S506.C89V9ANXX.s_1.r_1 induced CBFB-MYH11 o..    Premixed\n#&gt; SLX-9555.N712_S507.C89V9ANXX.s_1.r_1 induced CBFB-MYH11 o..    Premixed\n#&gt; SLX-9555.N712_S508.C89V9ANXX.s_1.r_1 induced CBFB-MYH11 o..    Premixed\n#&gt; SLX-9555.N712_S517.C89V9ANXX.s_1.r_1    wild type phenotype    Premixed\n#&gt;                                            sum  detected     total\n#&gt;                                      &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt;\n#&gt; SLX-9555.N701_S502.C89V9ANXX.s_1.r_1    854171      7617    854171\n#&gt; SLX-9555.N701_S503.C89V9ANXX.s_1.r_1   1044243      7520   1044243\n#&gt; SLX-9555.N701_S504.C89V9ANXX.s_1.r_1   1152450      8305   1152450\n#&gt; SLX-9555.N701_S505.C89V9ANXX.s_1.r_1   1193876      8142   1193876\n#&gt; SLX-9555.N701_S506.C89V9ANXX.s_1.r_1   1521472      7153   1521472\n#&gt; ...                                        ...       ...       ...\n#&gt; SLX-9555.N712_S505.C89V9ANXX.s_1.r_1    203221      5608    203221\n#&gt; SLX-9555.N712_S506.C89V9ANXX.s_1.r_1   1059853      6948   1059853\n#&gt; SLX-9555.N712_S507.C89V9ANXX.s_1.r_1   1672343      6879   1672343\n#&gt; SLX-9555.N712_S508.C89V9ANXX.s_1.r_1   1939537      7213   1939537\n#&gt; SLX-9555.N712_S517.C89V9ANXX.s_1.r_1   1436899      8469   1436899\n\n\n按行组合，假设所有对象都具有相同的列注释值和兼容的行注释字段。\n\nCodesce2 &lt;- rbind(sce, sce)\nnrow(counts(sce2)) # twice as many rows\n#&gt; [1] 93206\nrowData(sce2) # twice as many rows\n#&gt; DataFrame with 93206 rows and 6 columns\n#&gt;                               gene_id gene_version      gene_name\n#&gt;                           &lt;character&gt;  &lt;character&gt;    &lt;character&gt;\n#&gt; ENSMUSG00000102693 ENSMUSG00000102693            1  4933401J01Rik\n#&gt; ENSMUSG00000064842 ENSMUSG00000064842            1        Gm26206\n#&gt; ENSMUSG00000051951 ENSMUSG00000051951            5           Xkr4\n#&gt; ENSMUSG00000102851 ENSMUSG00000102851            1        Gm18956\n#&gt; ENSMUSG00000103377 ENSMUSG00000103377            1        Gm37180\n#&gt; ...                               ...          ...            ...\n#&gt; ENSMUSG00000094431 ENSMUSG00000094431            1 CAAA01205117.1\n#&gt; ENSMUSG00000094621 ENSMUSG00000094621            1 CAAA01098150.1\n#&gt; ENSMUSG00000098647 ENSMUSG00000098647            1 CAAA01064564.1\n#&gt; ENSMUSG00000096730 ENSMUSG00000096730            6       Vmn2r122\n#&gt; ENSMUSG00000095742 ENSMUSG00000095742            1 CAAA01147332.1\n#&gt;                       gene_source         gene_biotype havana_gene_version\n#&gt;                       &lt;character&gt;          &lt;character&gt;         &lt;character&gt;\n#&gt; ENSMUSG00000102693         havana                  TEC                   1\n#&gt; ENSMUSG00000064842        ensembl                snRNA                  NA\n#&gt; ENSMUSG00000051951 ensembl_havana       protein_coding                   2\n#&gt; ENSMUSG00000102851         havana processed_pseudogene                   1\n#&gt; ENSMUSG00000103377         havana                  TEC                   1\n#&gt; ...                           ...                  ...                 ...\n#&gt; ENSMUSG00000094431        ensembl                miRNA                  NA\n#&gt; ENSMUSG00000094621        ensembl                miRNA                  NA\n#&gt; ENSMUSG00000098647        ensembl                miRNA                  NA\n#&gt; ENSMUSG00000096730        ensembl       protein_coding                  NA\n#&gt; ENSMUSG00000095742        ensembl       protein_coding                  NA",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>`SingleCellExperiment`</span>"
    ]
  },
  {
    "objectID": "SCE.html#单细胞特定字段",
    "href": "SCE.html#单细胞特定字段",
    "title": "\n3  SingleCellExperiment\n",
    "section": "\n3.6 单细胞特定字段",
    "text": "3.6 单细胞特定字段\n\n3.6.1 降维 reducedDims\n\n降维结果保存在一个列表中，列表的每一个对象是一个代表计数矩阵的低维的数值矩阵，其中行表示计数矩阵的列（如细胞），列表示维度。\n\nPCAsce\n#&gt; class: SingleCellExperiment \n#&gt; dim: 46603 96 \n#&gt; metadata(2): HVGs DEG_down\n#&gt; assays(1): counts\n#&gt; rownames(46603): ENSMUSG00000102693 ENSMUSG00000064842 ...\n#&gt;   ENSMUSG00000096730 ENSMUSG00000095742\n#&gt; rowData names(6): gene_id gene_version ... gene_biotype\n#&gt;   havana_gene_version\n#&gt; colnames(96): SLX-9555.N701_S502.C89V9ANXX.s_1.r_1\n#&gt;   SLX-9555.N701_S503.C89V9ANXX.s_1.r_1 ...\n#&gt;   SLX-9555.N712_S508.C89V9ANXX.s_1.r_1\n#&gt;   SLX-9555.N712_S517.C89V9ANXX.s_1.r_1\n#&gt; colData names(6): genotype phenotype ... detected total\n#&gt; reducedDimNames(0):\n#&gt; mainExpName: NULL\n#&gt; altExpNames(0):\nsce &lt;- scater::logNormCounts(sce)\nsce &lt;- scater::runPCA(sce)\ndim(reducedDim(sce, \"PCA\"))\n#&gt; [1] 96 50\n\n\n\ntSNEsce &lt;- scater::runTSNE(sce, perplexity = 0.1)\n#&gt; Perplexity should be lower than K!\nhead(reducedDim(sce, \"TSNE\"))\n#&gt;                                          TSNE1      TSNE2\n#&gt; SLX-9555.N701_S502.C89V9ANXX.s_1.r_1 -932.3841 -136.26222\n#&gt; SLX-9555.N701_S503.C89V9ANXX.s_1.r_1 -543.5379  690.08041\n#&gt; SLX-9555.N701_S504.C89V9ANXX.s_1.r_1 -118.8962  989.18921\n#&gt; SLX-9555.N701_S505.C89V9ANXX.s_1.r_1 -679.8581 -774.04309\n#&gt; SLX-9555.N701_S506.C89V9ANXX.s_1.r_1  858.3446  210.04045\n#&gt; SLX-9555.N701_S507.C89V9ANXX.s_1.r_1 -133.1463   83.80375\n\n\n\nUMAPsce &lt;- scater::runUMAP(sce)\nhead(reducedDim(sce,\"UMAP\"))\n#&gt;                                          UMAP1     UMAP2\n#&gt; SLX-9555.N701_S502.C89V9ANXX.s_1.r_1 -4.740502 -5.386435\n#&gt; SLX-9555.N701_S503.C89V9ANXX.s_1.r_1 -4.107798 -4.540542\n#&gt; SLX-9555.N701_S504.C89V9ANXX.s_1.r_1 -4.586629 -5.628796\n#&gt; SLX-9555.N701_S505.C89V9ANXX.s_1.r_1 -6.384442 -6.567561\n#&gt; SLX-9555.N701_S506.C89V9ANXX.s_1.r_1  6.567070  5.834611\n#&gt; SLX-9555.N701_S507.C89V9ANXX.s_1.r_1  6.791132  5.568196\n\n\n\n手动添加UMAPu &lt;- uwot::umap(t(logcounts(sce)), n_neighbors = 2)\nreducedDim(sce, \"UMAP_uwot\") &lt;- u\nreducedDims(sce) # Now stored in the object.\n#&gt; List of length 4\n#&gt; names(4): PCA TSNE UMAP UMAP_uwot\nhead(reducedDim(sce, \"UMAP_uwot\"))\n#&gt;                                           [,1]      [,2]\n#&gt; SLX-9555.N701_S502.C89V9ANXX.s_1.r_1 -3.858696 2.4951975\n#&gt; SLX-9555.N701_S503.C89V9ANXX.s_1.r_1 -5.547174 0.2280994\n#&gt; SLX-9555.N701_S504.C89V9ANXX.s_1.r_1 -3.759782 1.5284664\n#&gt; SLX-9555.N701_S505.C89V9ANXX.s_1.r_1 -1.252192 2.2222883\n#&gt; SLX-9555.N701_S506.C89V9ANXX.s_1.r_1  7.115971 4.2236466\n#&gt; SLX-9555.N701_S507.C89V9ANXX.s_1.r_1  4.732690 4.3182101\n\n\n\nreduceDims()reducedDims(sce) \n#&gt; List of length 4\n#&gt; names(4): PCA TSNE UMAP UMAP_uwot\n\n\n\n3.6.2 替代试验 Alternative Experiments\nSingleCellExperiment提供了”替代实验”的概念，其是一组不同特征但同一组样本/细胞的数据。经典应用是存储加标转录（spike-in transcripts）的每细胞计数，能够保留这些数据以供下游使用，但要将其与保存的内源性基因计数分离，因为此类替代特征通常需要单独处理。\n\nCodespike.df &lt;- df[str_detect(df$GeneID,\"^ERCC-\"),] #正则表达式，spike-in RNA\nspike.df &lt;- spike.df |&gt; column_to_rownames(\"GeneID\")\n#&gt; Error in `column_to_rownames()`:\n#&gt; ! Can't find column `GeneID` in `.data`.\nspike_length &lt;- spike.df$Length\nspike.mat&lt;- as.matrix(spike.df[,-1]) \nspike.mat[1:2,1:2]\n#&gt; Error in spike.mat[1:2, 1:2]: subscript out of bounds\n\n\n首先创建一个单独的对象SummarizedExperiment\n\nCodespike_se &lt;- SummarizedExperiment(list(counts=spike.mat))\nspike_se\n#&gt; class: SummarizedExperiment \n#&gt; dim: 0 96 \n#&gt; metadata(0):\n#&gt; assays(1): counts\n#&gt; rownames: NULL\n#&gt; rowData names(0):\n#&gt; colnames(96): SLX-9555.N701_S502.C89V9ANXX.s_1.r_1\n#&gt;   SLX-9555.N701_S503.C89V9ANXX.s_1.r_1 ...\n#&gt;   SLX-9555.N712_S508.C89V9ANXX.s_1.r_1\n#&gt;   SLX-9555.N712_S517.C89V9ANXX.s_1.r_1\n#&gt; colData names(0):\n\n\n\nCodealtExp(sce, \"spike\") &lt;- spike_se\n\naltExps(sce) \n#&gt; List of length 1\n#&gt; names(1): spike\n\n\n替代实验概念确保单细胞数据集的所有相关方面都可以保存在单个对象中，并且确保我们的加标数据与内源性基因的数据同步。\n\nCodesub &lt;- sce[,1:2] # retain only two samples.\naltExp(sub, \"spike\")\n#&gt; class: SummarizedExperiment \n#&gt; dim: 0 2 \n#&gt; metadata(0):\n#&gt; assays(1): counts\n#&gt; rownames: NULL\n#&gt; rowData names(0):\n#&gt; colnames(2): SLX-9555.N701_S502.C89V9ANXX.s_1.r_1\n#&gt;   SLX-9555.N701_S503.C89V9ANXX.s_1.r_1\n#&gt; colData names(0):\n\n\n任何SummarizedExperiment对象都可以存储为alternative Experiment, 包括另一个 SingleCellExperiment。\n\n3.6.3 缩放因子sizeFactors\n\n\nCode# 反卷积deconvolution-based size factors\nsce &lt;- scran::computeSumFactors(sce) \nsummary(sizeFactors(sce))\n#&gt;    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#&gt;  0.1513  0.7417  0.9478  1.0000  1.1239  3.5583\n\n\n手动添加\n\nCode# library size-derived factors\nsizeFactors(sce) &lt;- scater::librarySizeFactors(sce) \nsummary(sizeFactors(sce))\n#&gt;    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#&gt;  0.1703  0.7657  0.9513  1.0000  1.1064  3.6050\n\n\n\n3.6.4 列标签\n该函数允许我们获取或设置每个细胞标签的向量或因子，通常对应于由无监督聚类分析的分组 或从分类算法预测细胞类型身份。\n\nCodecolLabels(sce) &lt;- scran::clusterCells(sce, use.dimred=\"PCA\")\ntable(colLabels(sce))\n#&gt; \n#&gt;  1  2 \n#&gt; 47 49",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>`SingleCellExperiment`</span>"
    ]
  },
  {
    "objectID": "workflow.html",
    "href": "workflow.html",
    "title": "\n5  工作流\n",
    "section": "",
    "text": "5.1 快速开始（简单）\nCodesce &lt;- scRNAseq::MacoskoRetinaData()\nsce\n#&gt; class: SingleCellExperiment \n#&gt; dim: 24658 49300 \n#&gt; metadata(0):\n#&gt; assays(1): counts\n#&gt; rownames(24658): KITL TMTC3 ... 1110059M19RIK GM20861\n#&gt; rowData names(0):\n#&gt; colnames(49300): r1_GGCCGCAGTCCG r1_CTTGTGCGGGAA ... p1_TAACGCGCTCCT\n#&gt;   p1_ATTCTTGTTCTT\n#&gt; colData names(2): cell.id cluster\n#&gt; reducedDimNames(0):\n#&gt; mainExpName: NULL\n#&gt; altExpNames(0):\nCodecounts &lt;- assay(sce, \"counts\")\ncolData(sce)\n#&gt; DataFrame with 49300 rows and 2 columns\n#&gt;                         cell.id   cluster\n#&gt;                     &lt;character&gt; &lt;integer&gt;\n#&gt; r1_GGCCGCAGTCCG r1_GGCCGCAGTCCG         2\n#&gt; r1_CTTGTGCGGGAA r1_CTTGTGCGGGAA         2\n#&gt; r1_GCGCAACTGCTC r1_GCGCAACTGCTC         2\n#&gt; r1_GATTGGGAGGCA r1_GATTGGGAGGCA         2\n#&gt; r1_CCTCCTAGTTGG r1_CCTCCTAGTTGG        NA\n#&gt; ...                         ...       ...\n#&gt; p1_TCAAAAGCCGGG p1_TCAAAAGCCGGG        24\n#&gt; p1_ATTAAGTTCCAA p1_ATTAAGTTCCAA        34\n#&gt; p1_CTGTCTGAGACC p1_CTGTCTGAGACC         2\n#&gt; p1_TAACGCGCTCCT p1_TAACGCGCTCCT        24\n#&gt; p1_ATTCTTGTTCTT p1_ATTCTTGTTCTT        24\n\n# Quality control (using mitochondrial genes)\nis.mito &lt;- str_detect(rownames(sce),\"^MT-\")  # 线粒体基因\nsum(is.mito) # 31个\n#&gt; [1] 31\n\nlibrary(scater)\nlibrary(scuttle)\n#?perCellQCMetrics\nscuttle::perCellQCMetrics(sce)\n#&gt; DataFrame with 49300 rows and 3 columns\n#&gt;                       sum  detected     total\n#&gt;                 &lt;numeric&gt; &lt;integer&gt; &lt;numeric&gt;\n#&gt; r1_GGCCGCAGTCCG     37487      7243     37487\n#&gt; r1_CTTGTGCGGGAA     32047      6933     32047\n#&gt; r1_GCGCAACTGCTC     28148      6397     28148\n#&gt; r1_GATTGGGAGGCA     20367      5740     20367\n#&gt; r1_CCTCCTAGTTGG     19560      5779     19560\n#&gt; ...                   ...       ...       ...\n#&gt; p1_TCAAAAGCCGGG       817       537       817\n#&gt; p1_ATTAAGTTCCAA       817       574       817\n#&gt; p1_CTGTCTGAGACC       817       637       817\n#&gt; p1_TAACGCGCTCCT       816       488       816\n#&gt; p1_ATTCTTGTTCTT       816       484       816\n\nqcstats &lt;- perCellQCMetrics(sce, subsets=list(Mito=is.mito))\nqcstats\n#&gt; DataFrame with 49300 rows and 6 columns\n#&gt;                       sum  detected subsets_Mito_sum subsets_Mito_detected\n#&gt;                 &lt;numeric&gt; &lt;integer&gt;        &lt;numeric&gt;             &lt;integer&gt;\n#&gt; r1_GGCCGCAGTCCG     37487      7243              427                    14\n#&gt; r1_CTTGTGCGGGAA     32047      6933              503                    15\n#&gt; r1_GCGCAACTGCTC     28148      6397              460                    13\n#&gt; r1_GATTGGGAGGCA     20367      5740              326                    11\n#&gt; r1_CCTCCTAGTTGG     19560      5779              264                     9\n#&gt; ...                   ...       ...              ...                   ...\n#&gt; p1_TCAAAAGCCGGG       817       537               13                     4\n#&gt; p1_ATTAAGTTCCAA       817       574               10                     5\n#&gt; p1_CTGTCTGAGACC       817       637               24                     7\n#&gt; p1_TAACGCGCTCCT       816       488               27                     5\n#&gt; p1_ATTCTTGTTCTT       816       484               16                     4\n#&gt;                 subsets_Mito_percent     total\n#&gt;                            &lt;numeric&gt; &lt;numeric&gt;\n#&gt; r1_GGCCGCAGTCCG              1.13906     37487\n#&gt; r1_CTTGTGCGGGAA              1.56957     32047\n#&gt; r1_GCGCAACTGCTC              1.63422     28148\n#&gt; r1_GATTGGGAGGCA              1.60063     20367\n#&gt; r1_CCTCCTAGTTGG              1.34969     19560\n#&gt; ...                              ...       ...\n#&gt; p1_TCAAAAGCCGGG              1.59119       817\n#&gt; p1_ATTAAGTTCCAA              1.22399       817\n#&gt; p1_CTGTCTGAGACC              2.93758       817\n#&gt; p1_TAACGCGCTCCT              3.30882       816\n#&gt; p1_ATTCTTGTTCTT              1.96078       816\n\n#?quickPerCellQC\nscuttle::quickPerCellQC(sce) |&gt; colData()\n#&gt; DataFrame with 49287 rows and 8 columns\n#&gt;                         cell.id   cluster       sum  detected     total\n#&gt;                     &lt;character&gt; &lt;integer&gt; &lt;numeric&gt; &lt;integer&gt; &lt;numeric&gt;\n#&gt; r1_GGCCGCAGTCCG r1_GGCCGCAGTCCG         2     37487      7243     37487\n#&gt; r1_CTTGTGCGGGAA r1_CTTGTGCGGGAA         2     32047      6933     32047\n#&gt; r1_GCGCAACTGCTC r1_GCGCAACTGCTC         2     28148      6397     28148\n#&gt; r1_GATTGGGAGGCA r1_GATTGGGAGGCA         2     20367      5740     20367\n#&gt; r1_CCTCCTAGTTGG r1_CCTCCTAGTTGG        NA     19560      5779     19560\n#&gt; ...                         ...       ...       ...       ...       ...\n#&gt; p1_TCAAAAGCCGGG p1_TCAAAAGCCGGG        24       817       537       817\n#&gt; p1_ATTAAGTTCCAA p1_ATTAAGTTCCAA        34       817       574       817\n#&gt; p1_CTGTCTGAGACC p1_CTGTCTGAGACC         2       817       637       817\n#&gt; p1_TAACGCGCTCCT p1_TAACGCGCTCCT        24       816       488       816\n#&gt; p1_ATTCTTGTTCTT p1_ATTCTTGTTCTT        24       816       484       816\n#&gt;                     low_lib_size   low_n_features   discard\n#&gt;                 &lt;outlier.filter&gt; &lt;outlier.filter&gt; &lt;logical&gt;\n#&gt; r1_GGCCGCAGTCCG            FALSE            FALSE     FALSE\n#&gt; r1_CTTGTGCGGGAA            FALSE            FALSE     FALSE\n#&gt; r1_GCGCAACTGCTC            FALSE            FALSE     FALSE\n#&gt; r1_GATTGGGAGGCA            FALSE            FALSE     FALSE\n#&gt; r1_CCTCCTAGTTGG            FALSE            FALSE     FALSE\n#&gt; ...                          ...              ...       ...\n#&gt; p1_TCAAAAGCCGGG            FALSE            FALSE     FALSE\n#&gt; p1_ATTAAGTTCCAA            FALSE            FALSE     FALSE\n#&gt; p1_CTGTCTGAGACC            FALSE            FALSE     FALSE\n#&gt; p1_TAACGCGCTCCT            FALSE            FALSE     FALSE\n#&gt; p1_ATTCTTGTTCTT            FALSE            FALSE     FALSE\n\nquickPerCellQC(qcstats)\n#&gt; DataFrame with 49300 rows and 3 columns\n#&gt;           low_lib_size   low_n_features   discard\n#&gt;       &lt;outlier.filter&gt; &lt;outlier.filter&gt; &lt;logical&gt;\n#&gt; 1                FALSE            FALSE     FALSE\n#&gt; 2                FALSE            FALSE     FALSE\n#&gt; 3                FALSE            FALSE     FALSE\n#&gt; 4                FALSE            FALSE     FALSE\n#&gt; 5                FALSE            FALSE     FALSE\n#&gt; ...                ...              ...       ...\n#&gt; 49296            FALSE            FALSE     FALSE\n#&gt; 49297            FALSE            FALSE     FALSE\n#&gt; 49298            FALSE            FALSE     FALSE\n#&gt; 49299            FALSE            FALSE     FALSE\n#&gt; 49300            FALSE            FALSE     FALSE\nfiltered &lt;- quickPerCellQC(qcstats, percent_subsets=\"subsets_Mito_percent\")\nfiltered\n#&gt; DataFrame with 49300 rows and 4 columns\n#&gt;           low_lib_size   low_n_features high_subsets_Mito_percent   discard\n#&gt;       &lt;outlier.filter&gt; &lt;outlier.filter&gt;          &lt;outlier.filter&gt; &lt;logical&gt;\n#&gt; 1                FALSE            FALSE                     FALSE     FALSE\n#&gt; 2                FALSE            FALSE                     FALSE     FALSE\n#&gt; 3                FALSE            FALSE                     FALSE     FALSE\n#&gt; 4                FALSE            FALSE                     FALSE     FALSE\n#&gt; 5                FALSE            FALSE                     FALSE     FALSE\n#&gt; ...                ...              ...                       ...       ...\n#&gt; 49296            FALSE            FALSE                     FALSE     FALSE\n#&gt; 49297            FALSE            FALSE                     FALSE     FALSE\n#&gt; 49298            FALSE            FALSE                     FALSE     FALSE\n#&gt; 49299            FALSE            FALSE                     FALSE     FALSE\n#&gt; 49300            FALSE            FALSE                     FALSE     FALSE\nsce &lt;- sce[, !filtered$discard] \nsce\n#&gt; class: SingleCellExperiment \n#&gt; dim: 24658 45877 \n#&gt; metadata(0):\n#&gt; assays(1): counts\n#&gt; rownames(24658): KITL TMTC3 ... 1110059M19RIK GM20861\n#&gt; rowData names(0):\n#&gt; colnames(45877): r1_GGCCGCAGTCCG r1_CTTGTGCGGGAA ... p1_TAACGCGCTCCT\n#&gt;   p1_ATTCTTGTTCTT\n#&gt; colData names(2): cell.id cluster\n#&gt; reducedDimNames(0):\n#&gt; mainExpName: NULL\n#&gt; altExpNames(0):\nCode# Normalization\nsce &lt;- logNormCounts(sce)\nassays(sce)\n#&gt; List of length 2\n#&gt; names(2): counts logcounts\nCode# Feature selection\nlibrary(scran)\n\ndec &lt;- scran::modelGeneVar(sce) # ?modelGeneVar  对每个基因的对数表达谱的方差进行建模，根据拟合的均值-方差趋势将其分解为技术差异和生物学差异。\ndec\n#&gt; DataFrame with 24658 rows and 6 columns\n#&gt;                      mean       total        tech          bio   p.value\n#&gt;                 &lt;numeric&gt;   &lt;numeric&gt;   &lt;numeric&gt;    &lt;numeric&gt; &lt;numeric&gt;\n#&gt; KITL           0.00884872 0.011881960 0.011546899  3.35060e-04 0.4118020\n#&gt; TMTC3          0.05143737 0.075214907 0.066708042  8.50687e-03 0.1636316\n#&gt; CEP290         0.57977970 0.841422026 0.689765311  1.51657e-01 0.0456074\n#&gt; 4930430F08RIK  0.05284121 0.069214001 0.068514734  6.99267e-04 0.4687536\n#&gt; 1700017N19RIK  0.00047060 0.000537273 0.000614846 -7.75727e-05 0.8337798\n#&gt; ...                   ...         ...         ...          ...       ...\n#&gt; VSIG1         7.47516e-06 2.56352e-06 9.76708e-06 -7.20357e-06         1\n#&gt; GM16390       0.00000e+00 0.00000e+00 0.00000e+00  0.00000e+00       NaN\n#&gt; GM25207       3.60098e-06 5.94891e-07 4.70506e-06 -4.11017e-06         1\n#&gt; 1110059M19RIK 0.00000e+00 0.00000e+00 0.00000e+00  0.00000e+00       NaN\n#&gt; GM20861       0.00000e+00 0.00000e+00 0.00000e+00  0.00000e+00       NaN\n#&gt;                     FDR\n#&gt;               &lt;numeric&gt;\n#&gt; KITL           1.000000\n#&gt; TMTC3          1.000000\n#&gt; CEP290         0.791672\n#&gt; 4930430F08RIK  1.000000\n#&gt; 1700017N19RIK  1.000000\n#&gt; ...                 ...\n#&gt; VSIG1                 1\n#&gt; GM16390             NaN\n#&gt; GM25207               1\n#&gt; 1110059M19RIK       NaN\n#&gt; GM20861             NaN\nhvg &lt;- getTopHVGs(dec, prop=0.1) # ?getTopHVGs 根据 modelGeneVar() 或相关函数的方差建模统计数据，定义一组高度可变的基因。\nlength(hvg)\n#&gt; [1] 914\nCode# PCA\nlibrary(scater)\nset.seed(1234)\nsce &lt;- runPCA(sce, ncomponents=25, subset_row=hvg)\ndim(reducedDim(sce,\"PCA\"))\n#&gt; [1] 45877    25\n\n# Clustering col_labels\nlibrary(bluster)\n\ncolLabels(sce) &lt;- scran::clusterCells(sce, use.dimred='PCA',\n                               BLUSPARAM=NNGraphParam(cluster.fun=\"louvain\"))\ntable(colLabels(sce))\n#&gt; \n#&gt;    1    2    3    4    5    6    7    8    9   10   11   12   13 \n#&gt; 3510 2543  182 4154 1887 2620  193 5997  497 2900 6243 5529 9622\nCode# Visualization\nsce &lt;- runUMAP(sce, dimred = 'PCA')\nplotUMAP(sce, colour_by=\"label\")\n\n\n\n\n\n\nFigure 5.2: 视网膜数据集的UMAP 图，其中每个点都是一个细胞，并由分配的聚类标识着色。\nCode# Marker detection\nmarkers &lt;- findMarkers(sce, test.type=\"wilcox\", direction=\"up\", lfc=1)# ?findMarkers 通过检测细胞组配对之间的差异表达，找到细胞组（如聚类）的候选标记基因。",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>工作流</span>"
    ]
  },
  {
    "objectID": "workflow.html#快速开始多批次",
    "href": "workflow.html#快速开始多批次",
    "title": "\n5  工作流\n",
    "section": "\n5.2 快速开始（多批次）",
    "text": "5.2 快速开始（多批次）\n\nCodesce1 &lt;- scRNAseq::SegerstolpePancreasData()\n\n# Quality control (using ERCCs).\nqcstats1 &lt;- perCellQCMetrics(sce1)\nfiltered1 &lt;- quickPerCellQC(qcstats1, percent_subsets=\"altexps_ERCC_percent\")\nsce1 &lt;- sce1[, !filtered1$discard]\n\n# Normalization.\nsce1 &lt;- logNormCounts(sce1)\n\n# Feature selection, blocking on the individual of origin.\ndec1 &lt;- modelGeneVar(sce1, block=sce1$individual)\nhvg1 &lt;- getTopHVGs(dec1, prop=0.1)\n\n# Batch correction.\nlibrary(batchelor)\nset.seed(1234)\nsce1 &lt;- correctExperiments(sce1, batch=sce1$individual, \n    subset.row=hvg1, correct.all=TRUE)\n\n# Clustering.\ncolLabels(sce1) &lt;- clusterCells(sce1, use.dimred='corrected')\ntable(colLabels(sce1))\n#&gt; \n#&gt;   1   2   3   4   5   6   7   8   9  10  11  12 \n#&gt; 462  61 138 104 283  70 968 216  36 116  10  22\n\n\nCodesce1 &lt;- runUMAP(sce1, dimred = 'corrected')\nplotUMAP(sce1, colour_by=\"label\")\nplotUMAP(sce1, colour_by=\"individual\")\n\n\n\n\n\n\n\n\n\n(a) 根据聚类标记\n\n\n\n\n\n\n\n\n\n(b) 根据起源个体\n\n\n\n\n\n\nFigure 5.3: 胰腺数据集的 UMAP 图，其中每个点都是一个细胞，并由分配的聚类标识（左）或起源个体（右）着色。\n\n\n\nCode# Marker detection, blocking on the individual of origin.\nmarkers1 &lt;- findMarkers(sce1, test.type=\"wilcox\", direction=\"up\", lfc=1)",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>工作流</span>"
    ]
  },
  {
    "objectID": "QC.html",
    "href": "QC.html",
    "title": "\n6  质量控制\n",
    "section": "",
    "text": "6.1 QC metrics\n函数perCellQCMetrics()可以计算以上 QC 指标，其中sum列包含每个细胞文库大小的总计数，detected列包含检测到的基因数。 subsets_Mito_percent列包含映射到线粒体基因组的读取比例，altexps_ERCC_percent列包含映射到 ERCC 转录本的读取比例。\nCodelocation &lt;- SummarizedExperiment::rowRanges(sce.416b)\nlocation\n#&gt; GRangesList object of length 46604:\n#&gt; $ENSMUSG00000102693\n#&gt; GRanges object with 1 range and 0 metadata columns:\n#&gt;       seqnames          ranges strand\n#&gt;          &lt;Rle&gt;       &lt;IRanges&gt;  &lt;Rle&gt;\n#&gt;   [1]        1 3073253-3074322      +\n#&gt;   -------\n#&gt;   seqinfo: 118 sequences (1 circular) from GRCm38 genome\n#&gt; \n#&gt; $ENSMUSG00000064842\n#&gt; GRanges object with 1 range and 0 metadata columns:\n#&gt;       seqnames          ranges strand\n#&gt;          &lt;Rle&gt;       &lt;IRanges&gt;  &lt;Rle&gt;\n#&gt;   [1]        1 3102016-3102125      +\n#&gt;   -------\n#&gt;   seqinfo: 118 sequences (1 circular) from GRCm38 genome\n#&gt; \n#&gt; $ENSMUSG00000051951\n#&gt; GRanges object with 1 range and 0 metadata columns:\n#&gt;       seqnames          ranges strand\n#&gt;          &lt;Rle&gt;       &lt;IRanges&gt;  &lt;Rle&gt;\n#&gt;   [1]        1 3205901-3671498      -\n#&gt;   -------\n#&gt;   seqinfo: 118 sequences (1 circular) from GRCm38 genome\n#&gt; \n#&gt; ...\n#&gt; &lt;46601 more elements&gt;\nis.mito &lt;- any(seqnames(location)==\"MT\")\n\nlibrary(scuttle)\ndf &lt;- perCellQCMetrics(sce.416b, subsets=list(Mito=is.mito))\ncolnames(df)\n#&gt;  [1] \"sum\"                   \"detected\"              \"subsets_Mito_sum\"     \n#&gt;  [4] \"subsets_Mito_detected\" \"subsets_Mito_percent\"  \"altexps_ERCC_sum\"     \n#&gt;  [7] \"altexps_ERCC_detected\" \"altexps_ERCC_percent\"  \"altexps_SIRV_sum\"     \n#&gt; [10] \"altexps_SIRV_detected\" \"altexps_SIRV_percent\"  \"total\"\nsummary(df$sum)\n#&gt;    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#&gt;   27084  856350 1111252 1165865 1328301 4398883\nsummary(df$subsets_Mito_percent)\n#&gt;    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#&gt;   4.593   7.294   8.139   8.146   9.035  15.617\nsummary(df$altexps_ERCC_percent)\n#&gt;    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#&gt;   2.242   4.291   6.031   6.412   8.126  19.429\n或者 addPerCellQC()计算每个细胞的 QC 统计数据并将其附加到SingleCellExperiment的colData ，将所有相关信息保留在单个对象SingleCellExperiment中以供以后操作。\nCodesce.416b &lt;- addPerCellQCMetrics(sce.416b, subsets=list(Mito=is.mito))\ndim(colData(sce.416b))\n#&gt; [1] 192  21\ncolnames(colData(sce.416b))\n#&gt;  [1] \"Source Name\"              \"cell line\"               \n#&gt;  [3] \"cell type\"                \"single cell well quality\"\n#&gt;  [5] \"genotype\"                 \"phenotype\"               \n#&gt;  [7] \"strain\"                   \"spike-in addition\"       \n#&gt;  [9] \"block\"                    \"sum\"                     \n#&gt; [11] \"detected\"                 \"subsets_Mito_sum\"        \n#&gt; [13] \"subsets_Mito_detected\"    \"subsets_Mito_percent\"    \n#&gt; [15] \"altexps_ERCC_sum\"         \"altexps_ERCC_detected\"   \n#&gt; [17] \"altexps_ERCC_percent\"     \"altexps_SIRV_sum\"        \n#&gt; [19] \"altexps_SIRV_detected\"    \"altexps_SIRV_percent\"    \n#&gt; [21] \"total\"\nsce.416b\n#&gt; class: SingleCellExperiment \n#&gt; dim: 46604 192 \n#&gt; metadata(0):\n#&gt; assays(1): counts\n#&gt; rownames(46604): ENSMUSG00000102693 ENSMUSG00000064842 ...\n#&gt;   ENSMUSG00000095742 CBFB-MYH11-mcherry\n#&gt; rowData names(1): Length\n#&gt; colnames(192): SLX-9555.N701_S502.C89V9ANXX.s_1.r_1\n#&gt;   SLX-9555.N701_S503.C89V9ANXX.s_1.r_1 ...\n#&gt;   SLX-11312.N712_S508.H5H5YBBXX.s_8.r_1\n#&gt;   SLX-11312.N712_S517.H5H5YBBXX.s_8.r_1\n#&gt; colData names(21): Source Name cell line ... altexps_SIRV_percent total\n#&gt; reducedDimNames(0):\n#&gt; mainExpName: endogenous\n#&gt; altExpNames(2): ERCC SIRV",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>质量控制</span>"
    ]
  },
  {
    "objectID": "QC.html#qc-metrics",
    "href": "QC.html#qc-metrics",
    "title": "\n6  质量控制\n",
    "section": "",
    "text": "The library size is defined as the total sum of counts across all relevant features for each cell. Cells with small library sizes are of low quality. 文库大小定义为每个细胞所有基因的计数总和。库小表示细胞低质量。\nThe number of expressed features in each cell is defined as the number of endogenous genes with non-zero counts for that cell. Any cell with very few expressed genes is likely to be of poor quality. 每个细胞中表达的特征数被定义为该细胞具有非零计数的内源性基因的数量。低表达特征数表示细胞低质量。\nThe proportion of reads mapped to spike-in transcripts is calculated relative to the total count across all features (including spike-ins) for each cell.High proportions are indicative of poor-quality cells。 相对于每个细胞所有特征（包括spike-in）的总计数，计算映射到spike-in transcripts中的读数比例。高比例表示细胞质量差\nIn the absence of spike-in transcripts, the proportion of reads mapped to genes in the mitochondrial genome can be used. High proportions are indicative of poor-quality cells。在没有spike-in transcripts的情况下，可以使用映射到线粒体基因组中的读数比例。高比例表示细胞质量差。",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>质量控制</span>"
    ]
  },
  {
    "objectID": "QC.html#识别低质量细胞",
    "href": "QC.html#识别低质量细胞",
    "title": "\n6  质量控制\n",
    "section": "\n6.2 识别低质量细胞",
    "text": "6.2 识别低质量细胞\n\n6.2.1 固定阈值\n识别低质量细胞的最简单方法是对 QC 指标应用固定阈值。 例如，如果细胞的文库大小低于 100,000 次读取;表达少于5,000个基因;spike-in比例超过10%;或线粒体比例高于10%，我们可能会认为它们的质量较低。\n\nCodeqc.lib &lt;- df$sum &lt; 1e5\nqc.nexprs &lt;- df$detected &lt; 5e3\nqc.spike &lt;- df$altexps_ERCC_percent &gt; 10\nqc.mito &lt;- df$subsets_Mito_percent &gt; 10\ndiscard &lt;- qc.lib | qc.nexprs | qc.spike | qc.mito\n\n# 汇总\ntibble(LibSize=sum(qc.lib), NExprs=sum(qc.nexprs),\n    SpikeProp=sum(qc.spike), MitoProp=sum(qc.mito), Total=sum(discard))\n\n\n\n\nLibSize\nNExprs\nSpikeProp\nMitoProp\nTotal\n\n\n3\n0\n19\n14\n33\n\n\n\n\n\n\n6.2.2 自适应阈值\n假设大部分数据集由高质量的细胞组成，然后，我们根据所有细胞中每个指标的绝对中位差（median absolute deviation ，MAD）来识别各种QC指标的异常值细胞。默认情况下，如果一个值距离中位数超过3个MAD，可以将其视为异常值。即此类过滤器将保留 99% 遵循正态分布的非异常值。\n\nCode#?perCellQCFilters\nreasons &lt;- perCellQCFilters(df, \n                            sub.fields=c(\"subsets_Mito_percent\",\n                                         \"altexps_ERCC_percent\"))\ncolSums(as.matrix(reasons)) # apply(as.matrix(reasons),2,sum)\n#&gt;              low_lib_size            low_n_features high_subsets_Mito_percent \n#&gt;                         4                         0                         2 \n#&gt; high_altexps_ERCC_percent                   discard \n#&gt;                         1                         6\nsummary(reasons$discard)\n#&gt;    Mode   FALSE    TRUE \n#&gt; logical     186       6\n\n# 提取自适应阈值\nattr(reasons$low_lib_size, \"thresholds\")\n#&gt;    lower   higher \n#&gt; 434082.9      Inf\nattr(reasons$low_n_features, \"thresholds\")\n#&gt;    lower   higher \n#&gt; 5231.468      Inf\n\n\n\n6.2.3 outlyingness\n根据每个细胞的 QC 指标识别高维空间中的异常值高outlyingness低质量, 在一定程度上降低了可解释性\n\nCodestats &lt;- cbind(log10(df$sum), log10(df$detected),\n    df$subsets_Mito_percent, df$altexps_ERCC_percent)\n\nlibrary(robustbase)\noutlying &lt;- adjOutlyingness(stats, only.outlyingness = TRUE)\nmulti.outlier &lt;- isOutlier(outlying, type = \"higher\")\nsummary(multi.outlier)\n#&gt;    Mode   FALSE    TRUE \n#&gt; logical     179      13",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>质量控制</span>"
    ]
  },
  {
    "objectID": "QC.html#诊断图",
    "href": "QC.html#诊断图",
    "title": "\n6  质量控制\n",
    "section": "\n6.3 诊断图",
    "text": "6.3 诊断图\n观察QC指标的分布（ Figure 6.1 ）以识别低质量细胞是一种很好的做法。 在最理想的情况下，我们会看到正态分布，这些分布可以证明异常值检测中使用的 3 MAD 阈值是合理的。\n在非正态分布中的很大一部分细胞表明QC指标可能与某些生物状态相关，可能导致过滤过程中不同细胞类型的损失；或者与细胞亚群的文库制备不一致。\n\nCodecolData(sce.416b) &lt;- cbind(colData(sce.416b), df)\nsce.416b$block &lt;- factor(sce.416b$block)\n\nsce.416b$phenotype &lt;- ifelse(grepl(\"induced\", sce.416b$phenotype),\n    \"induced\", \"wild type\")\nsce.416b$discard &lt;- reasons$discard\n\nlibrary(scater)\ngridExtra::grid.arrange(\n    plotColData(sce.416b, x=\"block\", y=\"sum\", colour_by=\"discard\",\n        other_fields=\"phenotype\") + facet_wrap(~phenotype) + \n        scale_y_log10() + ggtitle(\"Total count\"),\n    plotColData(sce.416b, x=\"block\", y=\"detected\", colour_by=\"discard\", \n        other_fields=\"phenotype\") + facet_wrap(~phenotype) + \n        scale_y_log10() + ggtitle(\"Detected features\"),\n    plotColData(sce.416b, x=\"block\", y=\"subsets_Mito_percent\", \n        colour_by=\"discard\", other_fields=\"phenotype\") + \n        facet_wrap(~phenotype) + ggtitle(\"Mito percent\"),\n    plotColData(sce.416b, x=\"block\", y=\"altexps_ERCC_percent\", \n        colour_by=\"discard\", other_fields=\"phenotype\") + \n        facet_wrap(~phenotype) + ggtitle(\"ERCC percent\"),\n    ncol=1\n)\n\n\n\n\n\n\nFigure 6.1: 数据集中每个批次和表型的 QC 指标分布。每个点代表一个细胞，并分别根据其是否被丢弃而着色。\n\n\n\n\n另一种有用的诊断图涉及线粒体计数与其他 QC 指标的比例。 目的是确认没有细胞同时具有大量总计数和大量线粒体计数，以确保不会无意中去除恰好具有高度代谢活性的高质量细胞（例如肝细胞）。\n\nloading ZeiselBrainDatasce.zeisel &lt;- scRNAseq::ZeiselBrainData()\nsce.zeisel\n#&gt; class: SingleCellExperiment \n#&gt; dim: 20006 3005 \n#&gt; metadata(0):\n#&gt; assays(1): counts\n#&gt; rownames(20006): Tspan12 Tshz1 ... mt-Rnr1 mt-Nd4l\n#&gt; rowData names(1): featureType\n#&gt; colnames(3005): 1772071015_C02 1772071017_G12 ... 1772066098_A12\n#&gt;   1772058148_F03\n#&gt; colData names(10): tissue group # ... level1class level2class\n#&gt; reducedDimNames(0):\n#&gt; mainExpName: endogenous\n#&gt; altExpNames(2): ERCC repeat\n\nlibrary(scater)\nsce.zeisel &lt;- aggregateAcrossFeatures(sce.zeisel, \n    id=sub(\"_loc[0-9]+$\", \"\", rownames(sce.zeisel)))\n\n#--- gene-annotation ---#\nlibrary(org.Mm.eg.db)\nrowData(sce.zeisel)$Ensembl &lt;- mapIds(org.Mm.eg.db, \n    keys=rownames(sce.zeisel), keytype=\"SYMBOL\", column=\"ENSEMBL\")\n\n\n\nCodesce.zeisel &lt;- addPerCellQC(\n  sce.zeisel,subsets=list(Mt=rowData(sce.zeisel)$featureType==\"mito\"))\n\nqc &lt;- quickPerCellQC(colData(sce.zeisel), \n    sub.fields=c(\"altexps_ERCC_percent\", \"subsets_Mt_percent\"))\nsce.zeisel$discard &lt;- qc$discard\n\nplotColData(sce.zeisel, x=\"sum\", y=\"subsets_Mt_percent\", colour_by=\"discard\")\n\n\n{#fig-mito_pct/sum width=672}\n\n\n\n\n\nCodeplotColData(sce.zeisel, x=\"altexps_ERCC_percent\", y=\"subsets_Mt_percent\",\n    colour_by=\"discard\")\n\n\n{#fig-mito_pct/ERCC width=672}",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>质量控制</span>"
    ]
  },
  {
    "objectID": "QC.html#细胞过滤",
    "href": "QC.html#细胞过滤",
    "title": "\n6  质量控制\n",
    "section": "\n6.4 细胞过滤",
    "text": "6.4 细胞过滤\n对于常规分析，删除是最直接的方法，避免保留低质量细胞的弊端。\n\nCodefiltered &lt;- sce.416b[,!reasons$discard]\n\n\n标记低质量的细胞，并将它们保留在下游分析中，但是保留会降低方差建模的准确性，例如，需要使用更多的 PC 来抵消早期 PC 是由低质量细胞和其他细胞之间的差异引起的事实。\n\nCodemarked &lt;- sce.416b\nmarked$discard &lt;- reasons$discard",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>质量控制</span>"
    ]
  },
  {
    "objectID": "normalization.html",
    "href": "normalization.html",
    "title": "\n7  标准化\n",
    "section": "",
    "text": "7.1 scaling normalization\n标准化（normalization）旨在消除这些差异，使它们不会干扰细胞之间表达谱的比较。 这确保了在细胞群体中观察到的任何异质性或差异表达都是由生物学差异而非技术差异造成的。 其中缩放标准化（scaling normalization）是最简单和最常用的一类标准化策略。这涉及将每个细胞的总计数除以细胞特定的比例因子，通常称为”缩放因子(size factor)“。\n假设：任何细胞特异性偏差（如捕获或扩增效率）都会通过缩放该细胞的预期平均计数来平等地影响所有基因。 每个细胞的缩放因子表示该细胞中相对偏差的估计值，因此将其计数除以缩放因子应消除该偏差。由此产生的”标准化表达式值”可用于下游分析，如聚类和降维。\nCode#--- loading ---#\nsce.zeisel &lt;- scRNAseq::ZeiselBrainData()\n\nlibrary(scater)\nsce.zeisel &lt;- aggregateAcrossFeatures(sce.zeisel, \n    id=sub(\"_loc[0-9]+$\", \"\", rownames(sce.zeisel)))\n\n#--- gene-annotation ---#\nlibrary(org.Mm.eg.db)\nrowData(sce.zeisel)$Ensembl &lt;- mapIds(org.Mm.eg.db, \n    keys=rownames(sce.zeisel), keytype=\"SYMBOL\", column=\"ENSEMBL\")\n\n#--- quality-control ---#\nstats &lt;- perCellQCMetrics(sce.zeisel, subsets=list(\n    Mt=rowData(sce.zeisel)$featureType==\"mito\"))\nqc &lt;- quickPerCellQC(stats, percent_subsets=c(\"altexps_ERCC_percent\", \n    \"subsets_Mt_percent\"))\nsce.zeisel &lt;- sce.zeisel[,!qc$discard]\nCodesce.zeisel \n#&gt; class: SingleCellExperiment \n#&gt; dim: 19839 2816 \n#&gt; metadata(0):\n#&gt; assays(1): counts\n#&gt; rownames(19839): 0610005C13Rik 0610007N19Rik ... Zzef1 Zzz3\n#&gt; rowData names(2): featureType Ensembl\n#&gt; colnames(2816): 1772071015_C02 1772071017_G12 ... 1772063068_D01\n#&gt;   1772066098_A12\n#&gt; colData names(10): tissue group # ... level1class level2class\n#&gt; reducedDimNames(0):\n#&gt; mainExpName: endogenous\n#&gt; altExpNames(2): ERCC repeat",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>标准化</span>"
    ]
  },
  {
    "objectID": "normalization.html#scaling-normalization",
    "href": "normalization.html#scaling-normalization",
    "title": "\n7  标准化\n",
    "section": "",
    "text": "7.1.1 文库大小标准化\n文库大小标准化是执行缩放标准化的最简单策略。我们将文库大小定义为每个细胞所有基因的计数总和，假设其期望值与任何细胞特异性偏差成比例。然后，每个细胞的”文库缩放因子”与其文库大小成正比，其中定义了比例常数，使得所有细胞的平均缩放因子等于 1。 此定义可确保标准化表达式值与原始计数的比例相同，这对解释很有用，尤其是在处理转换后的数据时。\n\nCodelib.sf.zeisel &lt;- scuttle::librarySizeFactors(sce.zeisel)\nsummary(lib.sf.zeisel)\n#&gt;    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#&gt;  0.1757  0.5680  0.8680  1.0000  1.2783  4.0839\n\n\n在ZeiselBrainData中，细胞文库缩放因子在细胞之间相差多达 10 倍 Figure 7.1 。这是scRNA-seq数据覆盖率变异的典型特征。\n\nCodehist(log10(lib.sf.zeisel), xlab=\"Log10[Size factor]\", col='grey80')\n\n\n\n\n\n\nFigure 7.1: Zeisel 大脑数据集中从文库大小得出的缩放因子分布\n\n\n\n\n\n7.1.2 反卷积标准化 Normalization by deconvolution\n当样本之间存在任何不平衡的差异表达（DE）时，就会出现成分偏差。消除成分偏差可以使用 DESeq2 包中的函数estimateSizeFactorsFromMatrix()或 edgeR 包中的函数calcNormFactors()执行标准化。\n假设：细胞之间大多数基因并非差异表达，假设两个细胞之间大多数非 DE 基因的计数大小的任何系统性差异代表被用于计算去除系统性差异的适当缩放因子的偏差。\n然而，由于低计数和零计数占主导地位，单细胞数据对于这些批量标准化方法来说可能是个问题。Pool-based size factors are then “deconvolved” into cell-based factors for normalization of each cell’s expression profile.基于 pool 的缩放因子”反卷积”为基于细胞的缩放因子，以标准化每个细胞的表达谱。\n首先使用预聚类步骤quickCluster()，其中每个聚类中的细胞单独标准化，缩放因子重新缩放以在聚类之间具有可比性。\n\nCodelibrary(scran)\nset.seed(100)\nclust.zeisel &lt;- quickCluster(sce.zeisel) \ntable(clust.zeisel)\n#&gt; clust.zeisel\n#&gt;   1   2   3   4   5   6   7   8   9  10  11  12  13  14 \n#&gt; 170 254 441 178 393 148 219 240 189 123 112 103 135 111\n\n\n然后使用 scran 中的函数calculateSumFactors()执行反卷积缩放。\n\nCodedeconv.sf.zeisel &lt;- calculateSumFactors(sce.zeisel, cluster=clust.zeisel)\nsummary(deconv.sf.zeisel)\n#&gt;    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#&gt;  0.1186  0.4860  0.8314  1.0000  1.3209  4.5090\n\n\n可以看到 Figure 7.2 反卷积缩放因子表现出与文库缩放因子细胞特定类型的偏差。 这与细胞类型之间的强差异表达所引入的成分偏差的存在是一致的。 使用反卷积缩放因子可以调整这些偏差，以提高下游分析的标准化精度。\n\nCodetibble(x=lib.sf.zeisel, y=deconv.sf.zeisel) |&gt; \n  ggplot(aes(x,y))+\n  scale_x_log10()+\n  scale_y_log10()+\n  geom_point(color=as.integer(factor(sce.zeisel$level1class)))+\n  geom_abline(slope = 1,intercept = 0,color=\"red\",linewidth=1.2)+\n  xlab(\"Library size factor\")+\n  ylab(\"Deconvolution size factor\")\n\n\n\n\n\n\nFigure 7.2: 在ZeiselBrainData中，每个细胞的反卷积缩放因子与文库缩放因子进行比较。红线对应于两个缩放因子之间的同一性。\n\n\n\n\n\n7.1.3 Normalization by spike-ins\nRNA-seq常用的spike-in有 External RNA Controls Consortium mix (ERCCs)，spike-in RNA variants (SIRVs)和sequencing spike-ins (Sequins) 。\nSpike-in normalization基于向每个细胞中添加相同数量的spike-in RNA 的假设。Spike-in transcripts覆盖率的系统性差异只能归因于细胞特异性偏差，如捕获效率或测序深度。 为了消除这些偏差，我们通过缩放”spike-in size factors “均衡细胞之间的 spike-in 覆盖率。\n与之前的方法相比，Spike-in normalization 不需要对系统的生物学特性进行假设（即，缺乏许多DE基因）。 相反，它假设spike-in transcripts （i） 以恒定水平添加到每个细胞中，（ii） 以与内源性基因相同的相对方式对偏差做出反应。\n实际上，如果对单个细胞的总RNA含量的差异感兴趣，并且必须在下游分析中保留，则应使用 spike-in normalization 。 对于给定的细胞，其内源性RNA总量的增加不会增加其spike-in size factor。 这确保了总RNA含量对整个群体表达的影响不会在缩放时被消除。 相比之下，上述其他标准化方法简单地将总RNA含量的任何变化解释为偏倚的一部分并将其消除。\n\nCodelibrary(ensembldb)\nsce.richard &lt;- scRNAseq::RichardTCellData()\nsce.richard &lt;- sce.richard[,sce.richard$`single cell quality`==\"OK\"]\nsce.richard\n#&gt; class: SingleCellExperiment \n#&gt; dim: 46603 528 \n#&gt; metadata(0):\n#&gt; assays(1): counts\n#&gt; rownames(46603): ENSMUSG00000102693 ENSMUSG00000064842 ...\n#&gt;   ENSMUSG00000096730 ENSMUSG00000095742\n#&gt; rowData names(0):\n#&gt; colnames(528): SLX-12611.N701_S502. SLX-12611.N702_S502. ...\n#&gt;   SLX-12612.i712_i522. SLX-12612.i714_i522.\n#&gt; colData names(13): age individual ... stimulus time\n#&gt; reducedDimNames(0):\n#&gt; mainExpName: endogenous\n#&gt; altExpNames(1): ERCC\n\n\n使用computeSpikeFactors()估计每个细胞的spike-in size factors，这是通过使用与librarySizeFactors()相同的方法 将每个细胞的总spike-in 计数转换为缩放因子来定义的。随后缩放将消除细胞间 spike-in 覆盖率的任何差异。\n\nCodesce.richard &lt;- computeSpikeFactors(sce.richard, \"ERCC\")\nsummary(sizeFactors(sce.richard))\n#&gt;    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#&gt;  0.1247  0.4282  0.6274  1.0000  1.0699 23.3161\nsce.richard$sizeFactor[1:4]\n#&gt; SLX-12611.N701_S502. SLX-12611.N702_S502. SLX-12611.N703_S502. \n#&gt;            0.3772302            0.4580093            1.1991373 \n#&gt; SLX-12611.N704_S502. \n#&gt;            0.5944709\n\n\n可以观察到每个处理条件下的 spike-in 缩放因子和反卷积缩放因子之间存在正相关关系（Figure 7.3）， 表明它们在测序深度和捕获效率方面捕获了类似的技术偏差。\n还观察到，增加对 T 细胞受体的刺激 - 就亲和力或时间增加而言 - 导致相对于文库缩放因子的 spike-in 因子降低。 这与刺激过程中生物合成活性和总RNA含量的增加一致，这降低了每个文库中的相对 spike-in 覆盖率（从而降低了 spike-in 缩放因子），但增加了内源性基因的覆盖率（从而增加了文库缩放因子）。\n\nCodedata.frame(\n    DeconvFactor=calculateSumFactors(sce.richard),\n    SpikeFactor=sizeFactors(sce.richard),\n    Stimulus=sce.richard$stimulus, \n    Time=sce.richard$time\n) |&gt; \nggplot(aes(x=DeconvFactor, y=SpikeFactor, color=Time)) +\n    geom_point() + facet_wrap(~Stimulus) + scale_x_log10() + \n    scale_y_log10() + geom_abline(intercept=0, slope=1, color=\"red\")\n\n\n\n\n\n\nFigure 7.3: Spike-in normalization的spike-in缩放因子与 反卷积缩放因子作图。 每个图代表不同的配体处理，每个点都是一个细胞，根据刺激时间着色。\n\n\n\n\n这两组缩放因子之间的差异对下游分析有实际影响。 如果将 spike-in 缩放因子应用于计数，则未刺激细胞中的表达值将放大，而刺激细胞中的表达将缩小。 但是，如果使用反卷积缩放因子，则会出现相反的情况。 当我们在标准化策略之间切换时，这可能表现为不同条件之间 DE 的大小和方向的变化，如 ?fig-fig-switch-between-normalization-strategies 所示\n\nCodesce.richard.deconv &lt;- logNormCounts(sce.richard, size_factors=calculateSumFactors(sce.richard))\nsce.richard.spike &lt;- logNormCounts(sce.richard, size_factors=sizeFactors(sce.richard))\n\ngridExtra::grid.arrange(\n    plotExpression(sce.richard.deconv, x=\"stimulus\", \n        colour_by=\"time\", features=\"ENSMUSG00000092341\") + \n        theme(axis.text.x = element_text(angle = 90)) + \n        ggtitle(\"After deconvolution\"),\n    plotExpression(sce.richard.spike, x=\"stimulus\", \n        colour_by=\"time\", features=\"ENSMUSG00000092341\") + \n        theme(axis.text.x = element_text(angle = 90)) +\n        ggtitle(\"After spike-in normalization\"),\n    ncol=2\n)\n\n\n\n\n\n\nFigure 7.4: 使用反卷积缩放因子（左）或 spike-in 缩放因子（右）进行标准化后 Malat1 的对数标准化表达值分布。细胞按配体亲和力分层，并按刺激时间着色\n\n\n\n\n标准化策略的选择取决于生物学假设。 在大多数情况下，总RNA含量的变化并不有趣，使用文库大小或反卷积因子标准化。 然而，如果总RNA的差异与感兴趣的生物学过程有关，例如细胞周期活性或T细胞活化，使用 spike-in 标准化将保留这些差异，以便生物组之间表达的任何变化都具有正确的符号。\nspike-in transcripts 应该使用 spike-in size factors 标准化。 从内源性基因计数计算的缩放因子不应该spike-in transcripts ，因为前者捕获了后者没有的总 RNA 含量差异。 尝试使用基于内源性基因计数的缩放因子对spike-in计数进行标准化将导致过度标准化和不正确的定量。 因此，如果需要标准化spike-in数据，必须为spike-in transcripts计算一组单独的缩放因子，可以使用 modelGeneVarWithSpikes()等函数自动执行。",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>标准化</span>"
    ]
  },
  {
    "objectID": "normalization.html#对数变换",
    "href": "normalization.html#对数变换",
    "title": "\n7  标准化\n",
    "section": "\n7.2 对数变换",
    "text": "7.2 对数变换\nThe log-transformation is useful as differences in the log-values represent log-fold changes in expression. 这在基于欧几里得距离的下游分析中非常重要，其中包括多种形式的聚类和降维。 通过对数转换数据进行操作，我们确保这些程序是基于表达值的对数倍数变化测量细胞之间的距离。 对数转换可以促进具有强相对差异的基因的显现。\n\nCodeset.seed(100)\nclust.zeisel &lt;- quickCluster(sce.zeisel) \nsce.zeisel &lt;- computeSumFactors(sce.zeisel, cluster=clust.zeisel, min.mean=0.1)\nsce.zeisel$sizeFactor\n#&gt;    [1] 1.5330163 1.5197806 2.3177092 2.3098243 1.6356501 1.9140228 2.3920849\n#&gt;    [8] 1.7148351 1.7773327 1.8405697 1.3853361 2.2721463 2.7341116 1.6572794\n#&gt;   [15] 2.4350214 3.0837875 1.9656279 2.7387063 2.3199978 1.3466584 1.6689281\n#&gt;   [22] 1.1982640 1.7097079 1.3138173 3.3489395 2.9695867 2.6083104 1.2732532\n#&gt;   [29] 1.8972124 2.6611017 3.4041656 1.4966486 2.0050764 1.1145625 2.0697233\n#&gt;   [36] 1.7275731 1.2382277 1.5595997 2.1447774 1.7162959 2.6613901 1.4908977\n#&gt;   [43] 1.6998759 1.2296894 1.6712818 0.9957191 1.0247037 1.9330533 1.3202147\n#&gt;   [50] 1.3918146 1.0947499 1.0076070 0.6306301 0.9391774 1.9744421 1.2986612\n#&gt;   [57] 1.7282730 1.9812199 2.1939957 1.9050923 1.0309859 1.1311469 3.2196183\n#&gt;   [64] 1.9897407 1.1698584 1.5423988 2.9012917 2.5727057 1.2543136 1.3457439\n#&gt;   [71] 1.9773897 1.0141278 1.9634541 3.6047891 3.1247672 1.5545336 1.5671957\n#&gt;   [78] 2.8025919 1.6536579 1.3483879 1.9103567 1.8254057 1.0507183 0.8113664\n#&gt;   [85] 1.1435887 1.4907576 1.3537895 1.6386828 2.3633390 1.5528725 1.4175381\n#&gt;   [92] 2.5290150 1.7092174 1.6712773 2.8047605 1.0838338 1.4363547 0.8692671\n#&gt;   [99] 1.9670167 1.1005335 2.0246962 1.4532231 2.1814908 1.9616708 0.6272988\n#&gt;  [106] 0.9979319 0.8318206 1.4367589 1.5291424 3.6741494 1.3961974 1.9855423\n#&gt;  [113] 2.5478784 1.6363302 0.9079047 1.2297099 1.1598110 1.6656445 1.7102919\n#&gt;  [120] 1.4206852 1.2662669 1.0905115 2.8185136 2.0030667 1.5196415 1.7781672\n#&gt;  [127] 0.9389815 0.5948236 2.1368286 0.9609240 1.2678778 1.0648258 2.3283010\n#&gt;  [134] 1.6137400 1.9572214 0.8928580 1.2245865 2.7440866 0.5725257 0.7294713\n#&gt;  [141] 1.1612172 1.2721188 0.9157980 0.8769774 1.0877930 1.3818578 1.1892912\n#&gt;  [148] 1.0817491 1.5241187 1.3729887 1.7102339 2.0667730 1.6640898 1.0507156\n#&gt;  [155] 0.8454547 0.7700251 0.9450501 0.6773467 1.9136837 1.2645070 2.1509118\n#&gt;  [162] 2.5697851 2.5916841 3.4903858 3.6919619 2.6515232 1.7293947 2.3633059\n#&gt;  [169] 2.5037744 3.4963656 2.9408237 2.4558110 2.3297240 4.4017711 2.5844353\n#&gt;  [176] 1.5871295 2.3565178 1.8459824 2.1193997 2.5073216 2.7601100 1.2987744\n#&gt;  [183] 1.5790883 1.4113102 1.4701675 2.2827587 0.8028364 1.3787878 0.9492620\n#&gt;  [190] 0.6926455 0.9525613 1.2930658 1.1770449 1.1229564 1.2475542 2.0578707\n#&gt;  [197] 1.1228340 1.6684490 0.9548474 0.5305375 0.5274671 1.0488002 0.7933984\n#&gt;  [204] 0.4678283 0.6281701 0.6226001 0.6086995 0.6071521 0.6226950 0.5723453\n#&gt;  [211] 0.9014781 1.1552337 0.9689474 0.5268485 0.6740200 0.6737290 0.7710886\n#&gt;  [218] 1.6180252 0.4341768 0.9857983 0.7404861 0.7431644 0.8859762 0.7174846\n#&gt;  [225] 0.7162020 0.8701763 1.3756729 0.8647946 0.5700038 0.9360704 1.2895164\n#&gt;  [232] 1.1594801 1.2345250 1.0132500 0.4631851 0.8109412 0.6033283 0.8206932\n#&gt;  [239] 0.4647301 1.5702412 0.9299049 0.9758857 0.5832573 0.5338430 0.9201596\n#&gt;  [246] 0.8577819 0.9964547 0.9661969 0.9101791 0.5715371 0.6823990 1.0669941\n#&gt;  [253] 0.6334253 0.5316475 0.6584934 0.5974557 0.7185425 0.7614784 0.7835897\n#&gt;  [260] 0.5733475 0.6263241 0.6335817 0.9447329 0.7627304 0.8052265 0.7706259\n#&gt;  [267] 0.6856238 0.7504869 0.8773453 0.6885880 1.0568634 0.3917429 1.2251737\n#&gt;  [274] 0.8755311 0.7575448 0.8852126 0.5189990 0.8602191 0.4583515 0.3879638\n#&gt;  [281] 0.5590731 1.0668200 0.7599856 0.6914372 0.7196741 0.8505898 1.3812232\n#&gt;  [288] 1.3452989 0.9135613 0.9739585 1.3797249 2.1949168 2.4857605 1.8457511\n#&gt;  [295] 2.2092759 4.1435115 1.1970007 2.9576143 1.7029819 1.6420352 2.5633888\n#&gt;  [302] 1.4767779 2.8259132 1.6126512 2.9945293 1.6550794 2.4548934 2.4099312\n#&gt;  [309] 1.3088486 1.9174640 3.3446696 1.9224331 1.4779425 0.9128779 2.0359754\n#&gt;  [316] 2.7439796 1.4771812 2.3308218 1.7799427 2.0224509 2.1880150 3.1773360\n#&gt;  [323] 0.8851925 0.9705332 1.6363540 2.9748171 3.1269373 3.4669377 1.6871591\n#&gt;  [330] 2.2038589 2.7014019 1.7712089 1.9450240 1.2485032 1.3309646 2.2832857\n#&gt;  [337] 1.6385040 1.2032255 1.9054603 1.3935487 1.3946249 2.2364203 1.1955069\n#&gt;  [344] 1.2179445 1.2536955 1.0475863 1.6322312 2.1828373 1.7626096 1.0061896\n#&gt;  [351] 1.2014554 1.5357725 0.9645444 1.1211442 1.0411483 1.6050370 2.7218458\n#&gt;  [358] 0.6733965 0.4378360 0.4778743 0.6531542 0.6047653 1.4623700 0.6399014\n#&gt;  [365] 1.4547163 1.2943950 0.8514705 0.5948366 0.6089371 1.1639215 1.0441309\n#&gt;  [372] 1.2805472 0.4735388 0.9731095 1.0979021 1.0263722 1.0167818 0.8918727\n#&gt;  [379] 0.7122539 1.3679107 1.5235087 0.6724249 1.0396070 2.4112723 1.2105126\n#&gt;  [386] 1.5279857 1.6581576 0.6227837 0.5514674 0.7359139 1.2469293 1.0666827\n#&gt;  [393] 0.5960312 1.5694254 0.7540834 1.0843334 0.7409505 1.1010909 0.5235231\n#&gt;  [400] 0.5745306 0.7914525 0.7269037 1.0703832 1.0107087 0.6049607 0.9403788\n#&gt;  [407] 1.0009131 0.6029252 0.6477509 0.6852968 0.5251828 0.4245346 0.4811482\n#&gt;  [414] 0.8965592 0.4367785 1.0253395 1.6025913 0.4936238 0.6762127 1.3510103\n#&gt;  [421] 1.1891784 1.0914293 0.7625631 0.8242901 1.3658258 0.7058226 0.7627094\n#&gt;  [428] 1.3389957 1.2862766 0.6126421 0.6804102 0.8797511 2.3813272 0.7926611\n#&gt;  [435] 1.4881881 1.0434350 0.6708035 1.1462024 1.5559427 1.5545401 1.0108777\n#&gt;  [442] 0.7462698 0.6915743 0.9494440 0.6031972 0.6205379 0.4214221 1.1441965\n#&gt;  [449] 0.8655398 0.8245929 1.9044939 0.8485801 0.6800323 0.7026683 0.5584465\n#&gt;  [456] 0.5241432 0.5558936 0.6278175 1.1520379 0.5178296 1.1385848 1.0301602\n#&gt;  [463] 0.7226877 0.5993044 0.4825436 0.5105344 0.8439236 0.5713371 2.1033578\n#&gt;  [470] 2.3544387 3.1264613 0.8047828 1.5195378 1.3844148 1.7689273 1.4838110\n#&gt;  [477] 0.6729402 0.5992327 0.6082110 2.0363420 1.0209233 1.1498635 1.1159846\n#&gt;  [484] 1.8158598 0.7200269 1.0027084 1.1123197 0.7024021 0.9903908 0.9615554\n#&gt;  [491] 0.9552009 1.1400174 1.5704352 0.8183878 3.0926387 2.4587651 1.4494763\n#&gt;  [498] 1.2180325 1.4050475 1.3066058 1.5013131 1.9750311 1.3644021 1.4794974\n#&gt;  [505] 2.4389298 2.2321682 1.3294620 1.3314245 1.9051281 2.0659105 1.2104720\n#&gt;  [512] 0.8488917 1.0616241 1.5850674 1.8542774 0.9198832 0.8946121 1.7254407\n#&gt;  [519] 1.0262563 1.4969745 0.8977452 0.5658717 0.7388280 0.7533931 0.6357109\n#&gt;  [526] 0.4622575 0.6985520 0.5137994 0.6643873 0.5203546 0.5076352 0.5745068\n#&gt;  [533] 0.7616415 0.5778672 0.8456912 0.3845223 0.8717655 0.8179566 0.8039451\n#&gt;  [540] 0.4916569 0.9079307 1.4395769 0.6960558 0.9476552 0.7276457 0.6732644\n#&gt;  [547] 1.0030072 1.0555326 1.4482241 1.0004559 2.6524889 3.8792994 1.1539016\n#&gt;  [554] 2.1443062 1.9009690 3.3359895 1.3305623 3.2197262 1.0381801 1.4507614\n#&gt;  [561] 1.5314977 2.0117943 2.1441972 2.1642644 1.1750233 1.0353364 1.4198693\n#&gt;  [568] 1.1483711 1.3082480 1.1247142 1.2016734 0.9527688 1.9955224 2.2454369\n#&gt;  [575] 1.3577371 1.6749821 1.0162314 1.4163645 1.2772393 1.0463877 1.3278312\n#&gt;  [582] 0.7232718 1.3511497 1.2452307 1.2228272 0.9017718 1.1765293 0.8017050\n#&gt;  [589] 0.9674600 1.1103725 1.1297938 0.8197256 1.0812791 1.7132373 1.1624210\n#&gt;  [596] 1.2599556 1.5965877 1.7034614 1.4556641 1.5215966 0.8029330 0.9818501\n#&gt;  [603] 2.2113942 1.4926664 0.9129868 1.2174291 1.6690306 1.8563100 1.8350925\n#&gt;  [610] 1.4507951 1.8625066 1.7690421 0.9408636 1.4890231 0.7807303 1.0058283\n#&gt;  [617] 1.1456073 1.5261179 1.5337394 1.4095891 0.8807919 1.8467518 1.0900318\n#&gt;  [624] 0.9382351 1.0239823 1.5149546 1.4785130 1.5460960 0.9973684 0.9437285\n#&gt;  [631] 0.5157146 0.8394680 0.5774733 0.4155600 1.1255522 0.8434126 0.9453405\n#&gt;  [638] 0.5838220 0.6210658 1.1887829 0.6697891 0.5514818 0.5185334 0.6319382\n#&gt;  [645] 0.8435973 0.6972803 1.3800695 1.5070860 0.8376889 0.7105544 0.8573945\n#&gt;  [652] 0.7892364 0.8424190 1.5890703 0.8539142 0.5513256 1.0566437 1.0149963\n#&gt;  [659] 0.6607940 0.7299950 0.8847720 0.9846624 1.2287996 0.7822108 1.2266836\n#&gt;  [666] 1.0043474 0.8559562 1.0474038 1.0576028 0.9657859 1.3898346 1.1996680\n#&gt;  [673] 1.0027953 0.9992063 1.0407104 1.0348848 1.3487158 1.6378601 0.7942841\n#&gt;  [680] 0.7575124 0.8026522 1.0267446 0.9759880 0.5694754 0.7027845 0.6695126\n#&gt;  [687] 1.0445579 1.0633528 0.9298840 1.0294389 1.0493784 0.8723287 0.7823291\n#&gt;  [694] 2.3210899 1.1942687 1.1968942 1.0754281 1.0422050 1.1907227 1.1468923\n#&gt;  [701] 1.1734709 1.0226293 1.2255000 1.1717891 1.0787814 1.5237716 1.5788753\n#&gt;  [708] 0.7962111 1.5523182 1.0585643 1.4442415 0.9556174 1.3881071 0.9899135\n#&gt;  [715] 0.9889097 1.1242205 0.8104387 0.5839989 1.0431384 0.8511014 1.5409678\n#&gt;  [722] 1.6713461 1.2551406 1.2510039 1.2093598 1.7061547 1.5620917 1.6651808\n#&gt;  [729] 1.7860971 2.1686661 1.6459519 0.8053885 0.8701435 1.6302618 1.3422038\n#&gt;  [736] 0.6201912 1.0758632 1.1441367 0.8380599 1.4354914 0.7293117 0.7404872\n#&gt;  [743] 1.7393011 1.5295749 0.6981503 0.7292310 1.2564434 0.8550340 1.1620488\n#&gt;  [750] 1.2124820 1.3547105 0.6593134 0.8386717 1.3671924 1.2586046 0.9701293\n#&gt;  [757] 0.9528374 0.7070263 1.0284216 1.6291636 0.7920776 1.1654820 0.8966922\n#&gt;  [764] 0.9221471 1.3771352 1.3263169 1.1936213 0.6694114 0.8713434 0.9518539\n#&gt;  [771] 1.3297144 1.0403798 1.3462559 0.9682087 1.0994306 1.4287400 1.3811720\n#&gt;  [778] 1.1399155 1.1199272 1.0832702 1.0985103 0.9374391 0.7230505 1.1482673\n#&gt;  [785] 1.4771534 0.7189566 1.0164999 0.8629676 1.4229433 1.3677170 1.0127181\n#&gt;  [792] 0.6661480 0.9475485 0.9425252 1.2743182 0.7807289 1.0054663 0.7852705\n#&gt;  [799] 0.9985101 1.3305539 0.9559742 1.1314823 1.1261450 0.9770246 0.9459067\n#&gt;  [806] 1.1271177 0.7447718 0.7239790 0.7808820 0.7274916 1.0044975 1.0596408\n#&gt;  [813] 0.9363497 0.7733938 0.9083720 0.8579631 0.8437680 1.1237174 1.3005203\n#&gt;  [820] 1.0608592 1.0021539 1.2456155 0.8797666 1.4963513 1.5860060 1.3230046\n#&gt;  [827] 1.1579637 1.1533193 1.1947518 1.1743405 1.4525032 0.8126317 1.0986917\n#&gt;  [834] 1.0821845 1.1924374 0.8200512 1.0330796 0.9007668 1.3579798 1.1909936\n#&gt;  [841] 0.9201088 1.2390036 1.1293947 0.8910967 1.0036202 1.2665897 1.1390892\n#&gt;  [848] 0.9673425 1.1233957 1.0166612 1.1272967 1.1189713 1.1538260 1.2501878\n#&gt;  [855] 1.2035419 1.1251572 1.1482353 1.0644329 1.3598861 1.2948352 1.8255984\n#&gt;  [862] 1.0006174 1.5066844 0.6320842 1.3167285 1.3086036 1.1852624 1.0056703\n#&gt;  [869] 1.4381378 0.7621736 1.6096472 1.3681211 1.0180159 3.0828898 1.3140623\n#&gt;  [876] 1.7723159 1.7215711 1.2280052 3.2127049 2.5077800 3.5577716 1.2235574\n#&gt;  [883] 2.1849213 2.5220094 1.5699280 2.1268483 2.7018646 1.6756284 1.7460522\n#&gt;  [890] 1.7935177 1.9671034 2.1113685 1.2702823 1.6658309 1.4280144 2.4198907\n#&gt;  [897] 1.7332639 1.6771589 2.4493191 1.2543158 1.5489605 1.7336579 2.4592755\n#&gt;  [904] 1.1786342 1.8970813 1.4057113 1.4463945 1.9848746 2.1637914 2.5838883\n#&gt;  [911] 1.0373312 1.2016134 0.9611963 1.6614755 1.7238247 1.3537720 1.3859257\n#&gt;  [918] 1.5020704 1.9440916 1.6314686 1.2867411 1.7304632 1.7774690 1.6166150\n#&gt;  [925] 1.8561194 1.3871096 1.1751649 1.7187642 1.9890042 2.0502580 1.7706663\n#&gt;  [932] 1.5377562 1.5646640 1.8313302 1.5357102 1.9617975 1.8034478 2.3438346\n#&gt;  [939] 2.8405541 1.6991792 2.5526685 2.3186579 1.6935992 2.3809601 2.0072786\n#&gt;  [946] 2.9175344 4.1102784 2.3533319 2.9766518 2.1551046 3.1029336 2.2454765\n#&gt;  [953] 2.9265314 2.5379153 1.6282346 3.2499909 2.8586721 2.9112074 3.6959168\n#&gt;  [960] 3.2119981 2.6819271 3.0035974 3.2731946 2.7098342 2.9195059 2.4357352\n#&gt;  [967] 3.1775101 2.3211472 2.3538824 3.4150464 3.5889787 3.5430131 2.4498071\n#&gt;  [974] 2.6148833 3.3281905 3.1581968 2.1787535 4.5090433 3.5852797 3.0986577\n#&gt;  [981] 1.9262503 3.2464307 3.1528499 2.7068641 2.2096617 2.9149225 3.6896458\n#&gt;  [988] 2.1173741 3.0262407 1.7937082 2.8074005 1.8419479 2.0261148 2.3905322\n#&gt;  [995] 2.8897796 2.3389254 1.5989613 2.0730476 2.2693057 2.5061578 1.5668474\n#&gt; [1002] 1.4114079 1.6035168 2.0031393 1.6725540 2.3660038 2.4311998 1.6220150\n#&gt; [1009] 2.2494320 2.0051703 2.1243174 2.3137332 1.6589288 3.4467558 1.5691870\n#&gt; [1016] 1.8953360 2.4556899 2.2539985 2.2632931 3.8048127 2.1062875 2.5598993\n#&gt; [1023] 2.2192511 2.6421708 1.7400770 1.5124711 1.5207794 2.5995934 2.3307619\n#&gt; [1030] 2.0934847 3.2544795 1.8926345 1.4927814 2.3655044 1.7459297 2.4425658\n#&gt; [1037] 1.5820139 2.2224054 1.3151016 1.4251559 3.1611684 2.2578275 2.0721744\n#&gt; [1044] 2.0793022 2.2152828 2.0429794 1.5929985 2.1745701 2.7086131 2.9550539\n#&gt; [1051] 1.7090408 2.1739534 2.4086475 1.9787019 2.1685043 1.4015268 1.6503744\n#&gt; [1058] 1.4254391 1.2530923 2.0696749 2.0167585 2.5186366 1.9865318 1.6596806\n#&gt; [1065] 1.6218729 3.6172797 2.3664484 1.8099254 1.1828798 1.5272390 2.0688849\n#&gt; [1072] 1.6155424 1.1114811 1.5785772 1.1878217 1.9366092 1.9448304 1.8256335\n#&gt; [1079] 1.6432771 1.7733448 1.3524660 1.3009940 1.5583433 1.5990498 1.1956981\n#&gt; [1086] 1.1246629 1.5628896 1.8918944 0.9587698 1.1277985 1.3429743 1.5713238\n#&gt; [1093] 1.4618784 1.1898080 0.9984213 1.0926962 1.0010741 1.0115749 0.9073197\n#&gt; [1100] 0.9599761 1.1998169 1.1254676 1.2467643 1.2205754 0.9219351 1.6349318\n#&gt; [1107] 1.1646507 1.4710606 1.3988183 1.4667866 0.9976346 1.0894299 1.1219767\n#&gt; [1114] 0.8450422 1.6812932 1.3645943 1.0716160 1.3410215 1.5903091 1.3101790\n#&gt; [1121] 1.1041573 1.1339439 2.0214663 0.9439803 1.1267065 1.2143603 1.3196209\n#&gt; [1128] 1.7350399 1.0944809 1.2603603 1.6680055 1.2302154 1.1709295 1.1705211\n#&gt; [1135] 1.4053441 1.0205349 1.0776672 1.1106556 1.7998767 1.1041277 1.4733491\n#&gt; [1142] 0.8847309 1.1548478 1.1672925 1.3634149 1.2986403 0.9983065 1.2258095\n#&gt; [1149] 1.2805782 1.5274471 0.7835923 1.2384986 1.2630262 0.9830290 1.1584144\n#&gt; [1156] 0.7730562 1.4204987 1.1875031 1.1608277 1.0293036 1.1550926 1.2404073\n#&gt; [1163] 1.1350604 1.1697781 1.0396657 1.5029071 1.1045276 1.0470572 0.9916286\n#&gt; [1170] 1.1516204 1.0732875 0.9635962 0.9855650 0.9665151 1.2677482 1.4508596\n#&gt; [1177] 0.9103599 1.1965157 0.9681111 0.9153152 1.0101716 1.1456105 1.1097732\n#&gt; [1184] 1.0952213 1.1588938 1.5651955 1.0969937 1.2885726 1.2306014 1.1777239\n#&gt; [1191] 1.1280920 1.4509668 1.2481868 1.5404296 1.1049026 0.9944161 1.1210815\n#&gt; [1198] 1.2180880 1.9729227 1.3250372 1.2836482 1.9568878 1.4861531 1.6709074\n#&gt; [1205] 1.5925817 1.5295277 1.4978853 1.4373888 1.6601385 2.0293235 1.5452102\n#&gt; [1212] 1.6272004 1.9352393 1.5222468 1.6257843 1.7911349 2.3830577 1.5763894\n#&gt; [1219] 2.6126999 2.1933588 2.0929171 2.2011629 1.9352697 2.2955444 2.8861865\n#&gt; [1226] 2.9552345 2.2613133 2.6639325 2.1523901 2.8057533 2.1340534 2.6258171\n#&gt; [1233] 2.2999139 2.0940000 1.7328389 2.3555786 2.1806384 3.1185515 1.9701430\n#&gt; [1240] 1.4621855 2.3269978 2.1435613 2.0391143 2.4242183 1.6568129 1.6558294\n#&gt; [1247] 1.9366905 2.3090787 1.5365381 1.4884115 1.4678630 1.5559647 1.8403051\n#&gt; [1254] 1.8473467 1.8153408 1.3129040 2.2613158 1.9670988 1.4154392 1.2908701\n#&gt; [1261] 1.2258223 1.2372617 1.3849682 1.3818803 1.2538744 1.1849972 1.7617029\n#&gt; [1268] 1.7325100 1.2804203 1.2099329 1.5433375 1.5288363 1.1548616 1.3522775\n#&gt; [1275] 1.1011602 1.0240457 1.1777433 1.5095902 1.2662287 1.3481304 1.1775619\n#&gt; [1282] 2.1898014 2.4356150 1.1462779 1.3011903 1.9175148 1.3330944 1.0293250\n#&gt; [1289] 2.6867689 1.6482486 1.4650174 1.2926335 1.4375425 1.2441105 1.2041385\n#&gt; [1296] 1.5829333 1.0643759 1.6027268 1.2599680 1.3493846 1.4224224 1.8318894\n#&gt; [1303] 1.8551248 1.3857349 1.5089324 1.7910394 1.4537953 1.3186464 1.2702681\n#&gt; [1310] 1.6567580 2.2368272 1.3609936 1.2797122 1.7588604 2.4624490 1.0951129\n#&gt; [1317] 1.1250763 2.1508337 1.3056081 1.4719237 1.6373696 1.1926972 1.6467304\n#&gt; [1324] 1.1967850 1.5288154 1.6994916 1.3078353 1.7071282 1.6307058 2.0945353\n#&gt; [1331] 1.5813155 1.5353813 1.8369776 1.7642609 1.7056686 1.9938155 2.0873159\n#&gt; [1338] 1.6829740 1.9125649 1.7720332 1.7746976 2.1561757 0.9653558 0.8088880\n#&gt; [1345] 0.7360886 0.7395960 0.8940323 0.8418392 0.7201133 0.8511230 0.6913129\n#&gt; [1352] 1.0219706 0.8689029 0.5181278 0.5277838 0.7245848 0.7611660 0.5324247\n#&gt; [1359] 0.5993920 0.6236139 0.8848116 0.4192274 0.6806630 0.4080807 0.4779475\n#&gt; [1366] 0.5140040 0.5022263 0.6443545 0.4157305 0.8687701 0.6591495 0.6843288\n#&gt; [1373] 0.8852431 0.8858092 0.6953236 0.7255371 1.1914329 0.8731844 0.7849798\n#&gt; [1380] 0.9953081 0.8090009 0.5402882 0.7815379 0.8058473 0.6582348 0.4962809\n#&gt; [1387] 0.4988824 0.4257798 0.4619465 0.4085881 0.6462098 0.4914837 0.7554860\n#&gt; [1394] 0.7472177 0.6999301 0.5638754 0.7454765 0.6815110 0.8310953 1.0195647\n#&gt; [1401] 0.8101851 0.8538987 0.8873966 0.6731303 0.4953527 0.5952867 0.9476776\n#&gt; [1408] 0.4686318 0.3857080 0.7851322 0.5354460 0.5764285 0.8763402 0.8132314\n#&gt; [1415] 0.5523675 0.3511134 0.5050648 0.6796039 0.5155442 0.5050880 0.7463906\n#&gt; [1422] 0.7251611 1.3526618 1.1272332 0.8016495 0.6826865 0.7056803 1.1026667\n#&gt; [1429] 0.9247235 0.8851372 0.6534319 0.5801436 0.3893488 0.6114579 0.6167070\n#&gt; [1436] 0.6754668 0.8245834 0.8139450 0.7979698 1.4157208 0.5218744 0.7386448\n#&gt; [1443] 0.6870876 0.6051782 0.5921110 0.5777571 1.0435589 1.0533465 1.0530631\n#&gt; [1450] 0.7953334 1.4565100 0.9747399 0.7527319 0.6604109 0.3542887 1.0911197\n#&gt; [1457] 0.7901656 0.7943126 0.8144576 0.5169447 0.8539651 0.6932919 0.4599519\n#&gt; [1464] 0.6951089 0.8977796 1.0130326 0.6157421 0.5384808 0.6876578 0.5375342\n#&gt; [1471] 0.7455276 0.8498052 0.7537698 1.1119474 0.6651347 0.6489344 0.6998483\n#&gt; [1478] 0.6939484 1.0282467 1.2867972 0.9544156 2.0118871 0.5616915 0.4157957\n#&gt; [1485] 0.5825153 0.7750856 0.8931690 0.6664378 0.4879787 0.7262067 0.8454136\n#&gt; [1492] 0.6892062 0.7478006 0.8640789 0.4766958 0.6664301 0.6480702 0.7858980\n#&gt; [1499] 0.8760208 0.9575838 0.9994447 0.9722927 1.0810623 0.7575799 0.6467193\n#&gt; [1506] 0.9780209 0.9740309 1.1716945 1.0786408 0.9943956 0.5061224 0.4524044\n#&gt; [1513] 0.5057673 0.4740530 1.0331030 0.5196038 0.7348322 1.1206846 0.6920994\n#&gt; [1520] 1.1621855 0.7272086 0.8346632 0.9121902 0.8432456 1.1183990 0.7884524\n#&gt; [1527] 1.3201840 1.5013425 1.0728153 1.1875924 0.9295014 0.7498272 0.7591448\n#&gt; [1534] 0.5599025 0.5372163 0.9804927 0.7498926 0.5820417 0.4903905 0.7116135\n#&gt; [1541] 1.0077901 1.1531920 0.8787868 0.8846637 0.9911535 0.9352925 0.5836973\n#&gt; [1548] 0.7704072 0.9842912 0.5173397 0.7483261 0.6875950 0.7003904 0.6603721\n#&gt; [1555] 0.9271906 0.8890525 0.8237133 1.0163698 0.7594113 0.8121115 1.8198729\n#&gt; [1562] 1.5357705 1.4372282 1.1031280 1.4122130 1.4315779 0.5258931 0.7706262\n#&gt; [1569] 1.1256164 0.7207678 0.6988243 0.9473092 1.0896225 0.8260061 1.0386023\n#&gt; [1576] 1.0883189 0.8270599 1.2671909 1.2386844 0.8748349 0.7354412 0.8954159\n#&gt; [1583] 1.0184482 0.9516339 0.5583479 0.7213641 0.5284113 0.7222739 0.9048404\n#&gt; [1590] 1.1282593 0.7072499 1.1016535 0.8228369 0.8260160 1.0442151 1.0603454\n#&gt; [1597] 1.4668654 0.5109011 0.7216269 0.9712953 0.7816815 0.7073726 0.7631673\n#&gt; [1604] 0.8179849 1.0443102 1.1122032 0.9762749 0.9876565 1.0763955 1.1560530\n#&gt; [1611] 1.3384748 1.0235572 1.8922754 0.7630282 1.0254020 0.9757036 1.0700090\n#&gt; [1618] 0.9273128 0.8395983 1.6392733 1.1058986 1.0561444 1.6337118 1.1186396\n#&gt; [1625] 1.1033191 1.0773524 1.8263244 1.0720210 0.2911117 1.4373436 2.4195393\n#&gt; [1632] 1.1868709 1.1548829 1.1193327 0.9695513 0.8022943 1.4923693 0.6637413\n#&gt; [1639] 0.8657324 0.7816868 0.9331310 1.0757870 0.3087072 0.5545849 0.7911884\n#&gt; [1646] 0.2912017 0.4413287 0.4047777 0.6865842 0.5965641 0.7073914 0.7083717\n#&gt; [1653] 0.3257121 1.2267367 0.6991645 0.5003331 0.8299406 0.3446821 0.5119481\n#&gt; [1660] 0.5460494 0.2527538 0.4980215 0.4793745 0.2390909 0.3063718 0.4780652\n#&gt; [1667] 0.3468704 0.5647756 0.5799160 0.5893349 0.6044347 1.3318968 0.9223936\n#&gt; [1674] 1.2632257 0.7151569 2.6353804 0.7606637 1.8600487 1.1594456 0.6990555\n#&gt; [1681] 1.6322244 1.3488994 0.9838737 0.8176246 1.3078982 0.6608375 0.7223215\n#&gt; [1688] 0.3654063 0.4976277 1.4405905 0.4484513 0.3619810 0.4646215 0.4863196\n#&gt; [1695] 1.2628293 0.5747780 0.4311496 0.2570045 0.4763998 0.3423045 0.4986576\n#&gt; [1702] 0.1546115 0.2697218 0.5260067 0.6210552 0.7320022 0.4053707 0.8925925\n#&gt; [1709] 0.3613431 0.4455241 0.5134008 0.5013095 0.7802967 0.5268212 0.4259175\n#&gt; [1716] 0.5576820 0.5975482 0.6011044 0.4973374 0.6116289 0.5054736 0.6192072\n#&gt; [1723] 0.5090478 0.5040769 0.9446011 0.8500495 0.7489095 1.0614800 0.9406836\n#&gt; [1730] 0.5362001 1.2385027 0.6798513 0.9918448 0.7279280 1.2816965 0.5902391\n#&gt; [1737] 0.6925330 1.3994519 1.4933212 0.5377329 0.5222376 0.9718772 1.0824840\n#&gt; [1744] 0.7592822 0.7301152 0.9433451 1.2412503 0.7270139 1.3509821 0.6900271\n#&gt; [1751] 0.7968342 0.6603002 0.6260857 0.7887641 0.4948665 0.2780412 0.4749624\n#&gt; [1758] 0.2508551 0.2982464 0.5804526 0.5625477 0.4066206 0.3046059 1.2253597\n#&gt; [1765] 0.5559651 1.0457118 0.7994551 1.3440013 0.9961839 1.0020388 0.5385029\n#&gt; [1772] 0.4674314 0.2616294 1.2105138 0.4524819 0.4542351 0.7310676 0.3612578\n#&gt; [1779] 0.5081622 1.3882393 0.6318721 1.1520620 0.4122325 0.4936302 0.5325540\n#&gt; [1786] 0.7512715 0.8029994 0.2939272 0.4044326 0.3023137 0.6919864 0.5412266\n#&gt; [1793] 0.4034261 0.4581508 0.4952783 0.4792820 0.4240549 0.8795449 0.5198946\n#&gt; [1800] 0.4498185 0.5944958 0.4160601 0.3616347 0.3784102 0.3879226 0.3668270\n#&gt; [1807] 1.0689319 1.3530525 0.6672569 0.5111265 0.5264421 0.4894098 0.5567643\n#&gt; [1814] 0.2635722 0.3272222 0.3113549 0.5795473 0.4884843 0.4827135 0.3070431\n#&gt; [1821] 0.9622414 0.5902189 0.6219537 0.6331766 0.8796945 1.2701423 0.4621150\n#&gt; [1828] 0.9693789 0.6863603 0.6258230 0.8449143 0.5873824 0.4005487 0.6199068\n#&gt; [1835] 0.4487902 0.6253062 1.0200908 0.6048290 0.6988500 0.4610389 0.5833347\n#&gt; [1842] 0.4438454 0.5928337 0.6236207 0.3883815 0.4677255 0.7084155 0.6521611\n#&gt; [1849] 0.9264167 0.4070021 0.6480348 0.4951042 0.5818162 0.7867157 0.8303511\n#&gt; [1856] 1.6285373 0.9733055 0.4491801 0.6612826 0.7431446 0.8665191 1.0213992\n#&gt; [1863] 0.6069557 0.3885037 0.4760245 1.0309520 0.8372552 0.4635037 0.9721007\n#&gt; [1870] 0.6847242 0.6361946 0.8837353 1.0921986 0.6098380 0.7902345 0.5383318\n#&gt; [1877] 0.6446980 0.6979953 0.4196233 0.4186904 0.5651838 0.6617430 0.9302860\n#&gt; [1884] 1.3169632 0.3282824 0.7170733 0.3670739 1.1899200 0.8499313 0.4306886\n#&gt; [1891] 1.0785692 0.3151203 0.9345436 0.3390976 0.4965932 0.7961058 0.5706065\n#&gt; [1898] 0.9187941 0.6891014 0.6175564 0.4079581 0.5464646 0.5065788 0.4263459\n#&gt; [1905] 0.7463988 0.8718825 0.6509877 0.3511409 0.6414118 0.4304407 0.6245323\n#&gt; [1912] 1.1339294 0.5335999 0.5186633 0.4438136 0.8019067 0.7675673 0.8483450\n#&gt; [1919] 0.4729379 0.6527594 1.4672563 0.4399404 0.7208876 0.5294233 0.4094581\n#&gt; [1926] 0.4735922 0.4548688 0.4020252 0.7721232 1.2558609 0.9267072 0.3825402\n#&gt; [1933] 0.3652230 0.6269795 0.5641959 0.3452133 0.3928226 0.5161994 0.5512446\n#&gt; [1940] 1.2338821 0.4638423 0.6066752 0.4170909 0.4008721 0.3863312 0.4013191\n#&gt; [1947] 0.4314811 0.5463247 0.2633923 0.5228119 0.3740951 0.5126126 0.2331486\n#&gt; [1954] 0.3341242 0.5404200 0.5565543 0.4295936 0.3216725 0.3776489 0.3458137\n#&gt; [1961] 0.4720188 0.9240084 0.4047615 0.3622011 0.3279143 0.3480292 0.3304065\n#&gt; [1968] 0.2750190 0.3014467 0.2532567 0.3186137 0.3720056 0.2676346 0.3386728\n#&gt; [1975] 0.8753460 0.4061477 0.2842846 0.2254836 0.2466870 0.3155173 0.2961903\n#&gt; [1982] 0.2077289 0.3759241 0.5354238 0.2358507 0.1619807 0.2463813 0.2550037\n#&gt; [1989] 0.3074768 0.2060943 1.2579911 0.5932873 0.2796345 0.6500187 0.3506551\n#&gt; [1996] 0.2246158 0.1818966 0.2958629 0.2100690 0.3157083 0.3969760 0.2999422\n#&gt; [2003] 0.2524608 0.2492081 0.4075342 0.2901719 0.3393726 0.2919893 0.4092746\n#&gt; [2010] 0.3311639 0.9415432 0.5072848 0.4190125 0.8574011 0.8270439 0.6843318\n#&gt; [2017] 0.3047039 0.5351327 0.4691358 1.4074926 0.6081978 0.9656880 0.5153933\n#&gt; [2024] 0.2886532 0.4834876 0.4066724 0.5219218 0.3703168 0.6791694 0.3931903\n#&gt; [2031] 0.4994441 0.4253156 0.3679932 0.4097774 0.4179452 0.2894216 0.5097507\n#&gt; [2038] 0.5931507 0.5676834 0.7037546 0.2954604 0.2847767 0.3139241 0.3591782\n#&gt; [2045] 0.3700514 0.9419805 0.7679279 0.2259706 0.4971050 0.3131396 0.3293400\n#&gt; [2052] 0.3808412 0.2294010 0.1977593 0.8789923 0.2780995 0.3868216 0.3911774\n#&gt; [2059] 0.2481172 0.2466739 0.9591529 0.3056657 0.3637453 0.4350124 0.2336056\n#&gt; [2066] 0.3284589 0.3031779 0.3497253 0.4812900 0.3005270 0.8063567 0.3654640\n#&gt; [2073] 0.5679070 0.3869461 0.3959355 0.3226061 0.4479985 0.2083477 0.4123446\n#&gt; [2080] 0.5967332 0.4176557 0.5093769 0.3934224 0.2115775 0.3988500 0.8746273\n#&gt; [2087] 0.5769037 0.4123359 0.4613252 0.2722316 0.6972135 0.4670983 0.4429698\n#&gt; [2094] 0.4172959 0.2290493 0.4804406 1.2509093 0.2829198 0.6633743 0.2747363\n#&gt; [2101] 0.3945378 0.6453250 2.2959056 0.2933780 0.3144920 0.2634070 0.3239291\n#&gt; [2108] 0.4957374 0.3576186 0.3340109 0.4471038 0.2717489 0.4690844 0.3923683\n#&gt; [2115] 0.3090569 0.3193750 0.2333399 0.2937070 0.2948800 0.2677876 0.2313617\n#&gt; [2122] 0.6364412 0.5024070 0.1866584 0.5150607 0.2498373 0.3155827 0.4471219\n#&gt; [2129] 0.1719359 0.1943005 0.2017262 0.2724710 0.3285416 0.2203443 0.4159256\n#&gt; [2136] 0.4196351 0.2301003 0.8317642 0.1338864 0.1784346 0.3839533 0.1397454\n#&gt; [2143] 0.2540023 0.7262252 0.3108532 0.1605738 0.2991070 0.2730480 0.3271999\n#&gt; [2150] 0.2298224 0.5798367 0.3024647 0.3824327 0.2500173 0.4085065 0.8480274\n#&gt; [2157] 0.3818955 0.3110832 0.2026175 0.3847243 0.5596895 0.1854043 0.5090915\n#&gt; [2164] 0.4966700 0.8310243 0.5501934 0.3872394 0.9628184 0.2816797 0.5340677\n#&gt; [2171] 0.4059914 0.2793635 0.6304969 0.2974488 0.2511299 0.4299391 0.3209973\n#&gt; [2178] 0.2715077 0.1515817 0.3384499 0.2957582 0.3293122 0.4347742 0.6477881\n#&gt; [2185] 0.6636268 0.4349038 0.5353818 0.1986231 1.0138863 0.2782783 0.5025696\n#&gt; [2192] 0.3104328 0.2549752 0.3385694 0.2775399 0.8166846 0.4498288 0.3661325\n#&gt; [2199] 0.6063422 0.3580387 1.0382955 0.2486334 0.4660297 0.1481857 0.3151760\n#&gt; [2206] 0.3767768 0.4134927 0.2009403 0.4981774 0.3357615 0.3598718 0.5601545\n#&gt; [2213] 0.3867702 0.3060634 0.5329099 0.1845309 0.3754400 0.3582437 0.2772678\n#&gt; [2220] 0.4136815 0.2030331 0.2827223 0.3595073 0.4857523 0.3467909 0.2293891\n#&gt; [2227] 0.4945056 0.7539187 0.2400091 0.3723597 0.2805319 0.3196303 0.2151282\n#&gt; [2234] 0.6126489 0.6455950 0.3773039 0.3692933 0.3902774 0.4636191 0.7661175\n#&gt; [2241] 0.3994208 0.2919770 0.3183749 0.4447788 0.7668559 0.2314136 0.4925914\n#&gt; [2248] 0.8124874 0.5521009 0.7189629 0.6602622 0.3649289 0.3033085 0.4429471\n#&gt; [2255] 2.9277190 0.7993884 0.3379693 0.4835457 0.5822415 0.6902686 0.4580242\n#&gt; [2262] 0.6096529 0.2828681 0.1937415 0.5634228 0.3315439 0.5217990 0.4119918\n#&gt; [2269] 0.3020709 0.5700104 0.4266720 0.3314343 1.1201103 0.2701472 0.5245469\n#&gt; [2276] 0.5538259 0.7162064 0.5766364 0.9441206 0.9247033 0.4112339 0.4201593\n#&gt; [2283] 0.9371560 0.4992336 0.5466830 0.4592743 0.5227295 0.3018594 0.3394750\n#&gt; [2290] 1.3477624 0.2928928 0.4578168 0.8878936 1.1410114 0.2542868 0.3372272\n#&gt; [2297] 0.4563875 0.4314396 0.9105045 0.3313652 0.4494479 0.3000139 0.3000866\n#&gt; [2304] 0.6235051 0.4122679 0.6833321 0.4980124 0.3459037 0.3981625 0.3952567\n#&gt; [2311] 0.5233365 0.5129183 0.4572469 0.7279957 0.4945273 0.6624391 0.4022587\n#&gt; [2318] 0.5395278 0.4356956 0.3579911 0.6630037 0.5816756 0.4685089 0.6823472\n#&gt; [2325] 0.5819805 0.9311662 1.0488614 0.9318283 1.6292467 0.6981743 0.6648595\n#&gt; [2332] 0.6775941 0.4268293 0.7494903 0.4835852 0.5718912 0.5373147 1.1607007\n#&gt; [2339] 0.8066709 0.4653635 0.7013220 0.6249051 0.6914545 0.4605551 0.4919683\n#&gt; [2346] 0.7217936 0.6287437 0.6008857 0.8595073 0.5698717 0.3781724 0.5098608\n#&gt; [2353] 0.5411919 0.5091915 0.3423090 1.0074896 1.0925127 1.1869311 0.4208647\n#&gt; [2360] 0.4163492 0.8215561 1.0279051 0.7166196 0.7263878 0.8528227 0.4053844\n#&gt; [2367] 1.2948969 1.0070887 0.5895896 0.9230134 0.4969995 0.4520987 1.4509265\n#&gt; [2374] 0.5578303 0.6051646 0.5151992 0.5648480 0.5538298 0.4801829 0.8573574\n#&gt; [2381] 0.8398927 0.7227336 0.7580617 0.5260110 0.5380821 0.7589127 0.5825038\n#&gt; [2388] 0.5006498 0.4111484 0.4824041 0.6079369 0.7113848 0.6180898 0.5761356\n#&gt; [2395] 0.5884400 0.6096206 0.4108353 0.3304339 1.0062956 0.2076443 0.7126168\n#&gt; [2402] 0.2868410 0.4117384 0.5164422 0.1999613 0.2800385 0.3983793 0.2423988\n#&gt; [2409] 0.2047528 0.3138491 0.1856415 0.2019871 0.2160289 0.5216748 0.2650189\n#&gt; [2416] 0.1815483 0.3252232 0.4613807 0.3179969 0.3499368 0.3387076 0.5509831\n#&gt; [2423] 0.5447549 0.5403906 0.2255327 0.4068846 0.5249015 0.7672507 0.5872768\n#&gt; [2430] 0.4700469 0.3788719 0.5980767 0.3393054 0.3179006 0.3939546 0.2473771\n#&gt; [2437] 0.4752199 0.9412012 0.6952965 0.9912573 0.2714045 0.5694427 0.5864496\n#&gt; [2444] 0.3094394 0.4944054 0.3155485 0.3455518 0.3554037 0.5485801 0.5637233\n#&gt; [2451] 0.4860388 0.2941673 0.4500015 0.5535388 0.4134069 0.5583496 0.3925462\n#&gt; [2458] 0.6925893 0.2146080 0.2919583 0.3828987 0.6884410 0.2043576 0.1740035\n#&gt; [2465] 0.8680209 0.5759633 0.5072931 0.3471606 0.2658161 0.1824395 0.2273628\n#&gt; [2472] 0.1988667 0.4574221 0.1870769 0.3260304 0.1892063 0.6966907 0.4882125\n#&gt; [2479] 0.3836444 0.3655271 0.8164587 0.1830506 0.4550484 0.3004721 0.1185658\n#&gt; [2486] 0.2324333 0.2761192 0.3982234 0.2981836 0.2894114 0.3013962 1.2012092\n#&gt; [2493] 2.4725929 0.2901326 1.3766797 0.8620510 0.7236363 0.3114939 0.2307754\n#&gt; [2500] 0.2964688 0.4624136 0.2566711 0.3369860 0.3344777 0.3385442 0.3110918\n#&gt; [2507] 0.2121480 0.3003881 0.3082711 0.1843243 0.2401711 0.2688840 0.6385495\n#&gt; [2514] 0.4021759 0.2307940 0.2002314 0.7760884 1.3485700 0.3981584 0.5813856\n#&gt; [2521] 0.6078029 0.4205376 0.3958241 0.5679613 0.8133076 0.3369549 0.5572460\n#&gt; [2528] 0.6409976 0.3086102 0.2310904 0.2240608 0.3373634 0.3666926 0.1860829\n#&gt; [2535] 0.4811159 0.6227676 0.5039504 1.1841169 0.4018291 0.3482626 0.2413254\n#&gt; [2542] 0.1886398 0.4188107 0.6475609 0.4388209 0.2319748 0.1757912 0.5143676\n#&gt; [2549] 0.3538551 0.5567272 0.2479046 0.4571197 0.2070337 0.6267536 1.5893273\n#&gt; [2556] 0.4874952 0.5411368 0.5180651 0.6037162 0.2355265 0.3266229 0.2505072\n#&gt; [2563] 0.6339140 0.5596668 0.2068564 0.5287665 0.1938271 0.3635211 0.8005122\n#&gt; [2570] 0.3309513 0.2659026 0.5608869 0.4150862 0.3516087 0.5060428 0.3293715\n#&gt; [2577] 0.6637494 0.2331143 0.1826957 0.1968636 0.1637478 0.2548292 0.6935695\n#&gt; [2584] 0.1953248 0.6001239 0.3155270 0.2194079 0.1509978 0.2424578 0.2317265\n#&gt; [2591] 0.3243732 0.3288374 0.3622562 0.4452402 0.3183281 0.4216950 0.1768032\n#&gt; [2598] 0.3157800 0.2748601 0.5669095 0.9538581 0.5007944 0.4112026 0.5419732\n#&gt; [2605] 0.6708303 0.6817836 0.4972728 0.6271715 0.6885709 0.9341907 0.4167574\n#&gt; [2612] 0.4030011 0.2834534 0.5366840 0.9934301 0.3218117 0.3638974 0.4195645\n#&gt; [2619] 0.3931779 0.3283593 0.2515434 0.6684912 0.6318029 0.4022234 0.3903859\n#&gt; [2626] 0.5421202 0.6625022 0.4305596 0.4180285 0.9524911 0.2082381 0.5283789\n#&gt; [2633] 0.2513484 0.2997781 0.3134889 0.1816127 0.2429556 0.1890579 0.3247658\n#&gt; [2640] 0.3495208 0.3928180 0.3489503 0.3210952 0.3394099 0.8585630 0.2678618\n#&gt; [2647] 0.3162043 0.3524275 0.2394644 0.2584395 0.1701799 0.1727409 0.1746249\n#&gt; [2654] 0.5730624 0.2941838 0.1690575 0.1961935 0.1811626 0.2282455 0.9045508\n#&gt; [2661] 0.2262194 0.2580276 0.3782178 0.3156207 0.2507244 0.5832143 0.4912288\n#&gt; [2668] 0.6757900 0.4318327 0.3006227 0.5691340 0.2621215 1.1200184 0.5515888\n#&gt; [2675] 0.2766747 0.2434754 0.2698712 0.2126860 0.4631313 0.4056000 0.3867958\n#&gt; [2682] 0.2933197 0.2022617 0.1403880 0.1864157 0.2643433 0.3698243 0.2434626\n#&gt; [2689] 0.2570670 0.3292387 0.3079758 0.4487707 0.3206108 0.1554492 0.5621817\n#&gt; [2696] 0.1436284 0.1983419 0.5880159 0.1528923 0.3530707 0.1982939 0.1982902\n#&gt; [2703] 0.2355622 0.1704211 0.1321239 0.7986746 0.3184677 0.3170377 0.3721524\n#&gt; [2710] 0.5657967 0.3462929 0.2806170 0.4475955 0.4365709 0.4158947 0.4067549\n#&gt; [2717] 0.8617303 0.7601747 0.4912575 0.4485458 0.5991391 0.3486318 0.4730358\n#&gt; [2724] 0.4817742 0.9689694 0.4695508 0.3312377 0.2784567 0.4334092 0.1992452\n#&gt; [2731] 0.2712010 0.3559502 0.4257551 0.1648501 0.4851980 0.1513140 0.2839699\n#&gt; [2738] 0.3914359 0.1545951 0.3119780 0.2559816 0.2391704 0.1906621 0.8227662\n#&gt; [2745] 0.7486176 0.2896909 0.2195900 0.5043748 1.4110073 0.2810749 2.7340267\n#&gt; [2752] 1.0720169 0.3855015 0.7354700 0.3715817 0.5594359 0.7873926 0.2737729\n#&gt; [2759] 0.5171470 0.3687170 0.3427423 0.9178332 1.3096429 0.2934791 0.2381196\n#&gt; [2766] 0.1809482 0.2742789 0.5026276 0.5193515 0.3637623 0.1679808 0.2061580\n#&gt; [2773] 0.2759568 0.2351670 0.1623629 0.2997975 0.3583705 0.2096810 0.2258624\n#&gt; [2780] 0.2863432 0.5146719 0.3257726 0.2219938 0.4469241 0.4304666 0.2596782\n#&gt; [2787] 0.3801490 0.2746723 0.4018288 0.2800701 0.8713919 0.1779662 0.3158951\n#&gt; [2794] 0.4396445 0.6759492 0.2994991 0.2292734 0.2183087 0.2350233 0.4970463\n#&gt; [2801] 0.3038212 0.4411677 0.2437759 0.1977158 0.5185834 0.3921943 0.4381089\n#&gt; [2808] 0.2139585 0.2736933 0.4645330 0.4127345 0.4987151 0.3383534 0.3614454\n#&gt; [2815] 0.3042653 0.1925791\n\nsce.zeisel &lt;- logNormCounts(sce.zeisel)\nassayNames(sce.zeisel)\n#&gt; [1] \"counts\"    \"logcounts\"",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>标准化</span>"
    ]
  },
  {
    "objectID": "feature_selection.html",
    "href": "feature_selection.html",
    "title": "\n8  特征选择\n",
    "section": "",
    "text": "8.1 量化每个基因的变异\n量化每个基因变异的最简单方法是计算所有细胞中每个基因的对数标准化表达值（即\"logcounts\"）的方差。 在聚类和降维等过程中，对数值方差最大的基因对细胞之间的欧几里得距离贡献最大。\n计算每个基因的方差很简单，但特征选择需要对均值-方差关系进行建模。在大多数情况下，对数转换不是一 种方差稳定的转换，这意味着基因的总方差更多地由其丰度贡献，而不是由其潜在的生物异质性贡献。 为了解释这种影响，可以使用modelGeneVar()拟合所有基因丰度的方差趋势（ Figure 8.1 ）。\nCodelibrary(scran)\ndec.pbmc &lt;- modelGeneVar(sce.pbmc)\n\n# 根据生物学成分方差降序排序\ndec.pbmc[order(dec.pbmc$bio, decreasing=TRUE),] \n#&gt; DataFrame with 33694 rows and 6 columns\n#&gt;              mean     total      tech       bio      p.value          FDR\n#&gt;         &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt;    &lt;numeric&gt;    &lt;numeric&gt;\n#&gt; LYZ       1.95605   5.05854  0.835343   4.22320 1.10536e-270 2.17414e-266\n#&gt; S100A9    1.93416   4.53551  0.835439   3.70007 2.71041e-208 7.61585e-205\n#&gt; S100A8    1.69961   4.41084  0.824342   3.58650 4.31577e-201 9.43188e-198\n#&gt; HLA-DRA   2.09785   3.75174  0.831239   2.92050 5.93946e-132 4.86764e-129\n#&gt; CD74      2.90176   3.36879  0.793188   2.57560 4.83934e-113 2.50487e-110\n#&gt; ...           ...       ...       ...       ...          ...          ...\n#&gt; TMSB4X    6.08142  0.441718  0.679215 -0.237497     0.992447            1\n#&gt; PTMA      3.82978  0.486454  0.731275 -0.244821     0.990002            1\n#&gt; HLA-B     4.50032  0.486130  0.739577 -0.253447     0.991376            1\n#&gt; EIF1      3.23488  0.482869  0.768946 -0.286078     0.995135            1\n#&gt; B2M       5.95196  0.314948  0.654228 -0.339280     0.999843            1\n假设在任何给定的丰度下，大多数基因的表达变异是由采样噪声等无趣过程造成的。根据这一假设，在任何给定基因丰度下，方差趋势的拟合值代表了对其无趣变异的估计，称之为技术成分。然后将每个基因的生物学成分定义为其总方差与技术成分之间的差值。这种生物学成分代表了每个基因的“有趣”变异，可以用作HVGs选择的指标。\nCodefit.pbmc &lt;- metadata(dec.pbmc)\nplot(fit.pbmc$mean, fit.pbmc$var, xlab=\"Mean of log-expression\",\n    ylab=\"Variance of log-expression\")\ncurve(fit.pbmc$trend(x), col=\"dodgerblue\", add=TRUE, lwd=2)\n\n\n\n\n\n\nFigure 8.1: 每个点代表一个基因，而蓝线代表拟合所有基因的方差趋势\n但此假设在极少数情况下可能是有问题的，因为许多特定丰度的基因受到生物过程的影响。 例如，高丰度cell type-specific genes的强烈上调可能导致 HVGs 的富集，这将夸大该丰度区间的拟合趋势，并损害相关基因的检测。",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>特征选择</span>"
    ]
  },
  {
    "objectID": "feature_selection.html#量化技术噪声",
    "href": "feature_selection.html#量化技术噪声",
    "title": "\n8  特征选择\n",
    "section": "\n8.2 量化技术噪声",
    "text": "8.2 量化技术噪声\n通过拟合 mean-dependent 和 spike-in transcripts的方差趋势 Figure 8.2 以避免上述问题。\n\nCodedec.spike.416b &lt;- modelGeneVarWithSpikes(sce.416b, \"ERCC\")\ndec.spike.416b[order(dec.spike.416b$bio, decreasing=TRUE),]\n#&gt; DataFrame with 46604 rows and 6 columns\n#&gt;               mean     total      tech       bio      p.value          FDR\n#&gt;          &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt;    &lt;numeric&gt;    &lt;numeric&gt;\n#&gt; Lyz2       6.61097   13.8497   1.57131   12.2784 1.48993e-186 1.54156e-183\n#&gt; Ccl9       6.67846   13.1869   1.50035   11.6866 2.21855e-185 2.19979e-182\n#&gt; Top2a      5.81024   14.1787   2.54776   11.6310  3.80015e-65  1.13040e-62\n#&gt; Cd200r3    4.83180   15.5613   4.22984   11.3314  9.46221e-24  6.08574e-22\n#&gt; Ccnb2      5.97776   13.1393   2.30177   10.8375  3.68706e-69  1.20193e-66\n#&gt; ...            ...       ...       ...       ...          ...          ...\n#&gt; Rpl5-ps2   3.60625  0.612623   6.32853  -5.71590     0.999616     0.999726\n#&gt; Gm11942    3.38768  0.798570   6.51473  -5.71616     0.999459     0.999726\n#&gt; Gm12816    2.91276  0.838670   6.57364  -5.73497     0.999422     0.999726\n#&gt; Gm13623    2.72844  0.708071   6.45448  -5.74641     0.999544     0.999726\n#&gt; Rps12l1    3.15420  0.746615   6.59332  -5.84670     0.999522     0.999726\n\n\n\nCodefit.spike.416b &lt;- metadata(dec.spike.416b)\nplot(dec.spike.416b$mean, dec.spike.416b$total, xlab=\"Mean of log-expression\",\n    ylab=\"Variance of log-expression\")\npoints(fit.spike.416b$mean, fit.spike.416b$var, col=\"red\", pch=16)\ncurve(fit.spike.416b$trend(x), col=\"dodgerblue\", add=TRUE, lwd=2)\n\n\n\n\n\n\nFigure 8.2: 每个点代表一个基因（黑色）或spike-in transcripts（红色），蓝线代表拟合到所有spike-in transcripts的方差趋势\n\n\n\n\n在没有 spike-in 数据的情况下，可以尝试通过对噪声进行一些分布假设来拟合趋势。 例如，如果只考虑文库制备和测序产生的技术噪声，UMI 计数通常表现出近泊松变化。 可使用modelGeneVarByPoisson()在logcounts中构建均值-方差趋势（Figure 8.3 ）。 请注意高丰度基因残差的增加，这可以解释为 Figure 8.1 基于基因的趋势时假定为“无趣”的生物变异量。\n\nCodeset.seed(0010101)\ndec.pois.pbmc &lt;- modelGeneVarByPoisson(sce.pbmc)\ndec.pois.pbmc &lt;- dec.pois.pbmc[order(dec.pois.pbmc$bio, decreasing=TRUE),]\nhead(dec.pois.pbmc)\n#&gt; DataFrame with 6 rows and 6 columns\n#&gt;              mean     total      tech       bio   p.value       FDR\n#&gt;         &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt;\n#&gt; LYZ       1.95605   5.05854  0.631190   4.42735         0         0\n#&gt; S100A9    1.93416   4.53551  0.635102   3.90040         0         0\n#&gt; S100A8    1.69961   4.41084  0.671491   3.73935         0         0\n#&gt; HLA-DRA   2.09785   3.75174  0.604448   3.14730         0         0\n#&gt; CD74      2.90176   3.36879  0.444928   2.92386         0         0\n#&gt; CST3      1.47546   2.95646  0.691386   2.26507         0         0\n\n\n\nCodeplot(dec.pois.pbmc$mean, dec.pois.pbmc$total, pch=16, xlab=\"Mean of log-expression\",\n    ylab=\"Variance of log-expression\")\ncurve(metadata(dec.pois.pbmc)$trend(x), col=\"dodgerblue\", add=TRUE)\n\n\n\n\n\n\nFigure 8.3: 每个基因的logcounts的方差与均值作图。蓝线表示对应于泊松噪声的均值-方差关系",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>特征选择</span>"
    ]
  },
  {
    "objectID": "feature_selection.html#批次效应",
    "href": "feature_selection.html#批次效应",
    "title": "\n8  特征选择\n",
    "section": "\n8.3 批次效应",
    "text": "8.3 批次效应\nbatch effects\n拟合批次之间均值-方差趋势的差异\n\nCodedec.block.416b &lt;- modelGeneVarWithSpikes(sce.416b, \"ERCC\", block=sce.416b$block)\nhead(dec.block.416b[order(dec.block.416b$bio, decreasing=TRUE),1:6])\n#&gt; DataFrame with 6 rows and 6 columns\n#&gt;              mean     total      tech       bio      p.value          FDR\n#&gt;         &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt;    &lt;numeric&gt;    &lt;numeric&gt;\n#&gt; Lyz2      6.61235   13.8619   1.58416   12.2777  0.00000e+00  0.00000e+00\n#&gt; Ccl9      6.67841   13.2599   1.44553   11.8143  0.00000e+00  0.00000e+00\n#&gt; Top2a     5.81275   14.0192   2.74571   11.2734 3.89855e-137 8.43398e-135\n#&gt; Cd200r3   4.83305   15.5909   4.31892   11.2719  1.17783e-54  7.00721e-53\n#&gt; Ccnb2     5.97999   13.0256   2.46647   10.5591 1.20380e-151 2.98405e-149\n#&gt; Hbb-bt    4.91683   14.6539   4.12156   10.5323  2.52639e-49  1.34197e-47\n\n\n\nCodepar(mfrow=c(1,2))\nblocked.stats &lt;- dec.block.416b$per.block\nfor (i in colnames(blocked.stats)) {\n    current &lt;- blocked.stats[[i]]\n    plot(current$mean, current$total, main=i, pch=16, cex=0.5,\n        xlab=\"Mean of log-expression\", ylab=\"Variance of log-expression\")\n    curfit &lt;- metadata(current)\n    points(curfit$mean, curfit$var, col=\"red\", pch=16)\n    curve(curfit$trend(x), col='dodgerblue', add=TRUE, lwd=2) \n}",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>特征选择</span>"
    ]
  },
  {
    "objectID": "feature_selection.html#高度可变基因",
    "href": "feature_selection.html#高度可变基因",
    "title": "\n8  特征选择\n",
    "section": "\n8.4 高度可变基因",
    "text": "8.4 高度可变基因\nhighly variable genes\n对于modelGeneVar() 和modelGeneVarWithSpikes() 选择具有最大生物学成分的基因作为HVGs。\n\nCode# Taking the top 1000 genes here:\nhvg.pbmc.var &lt;- getTopHVGs(dec.pbmc, n=1000)\nstr(hvg.pbmc.var)\n#&gt;  chr [1:1000] \"LYZ\" \"S100A9\" \"S100A8\" \"HLA-DRA\" \"CD74\" \"CST3\" \"TYROBP\" ...\n\n\n\nCode# select the top 10% of genes with the highest biological components\ndec.pbmc &lt;- modelGeneVar(sce.pbmc)\nchosen &lt;- getTopHVGs(dec.pbmc, prop=0.1)\nstr(chosen)\n#&gt;  chr [1:1274] \"LYZ\" \"S100A9\" \"S100A8\" \"HLA-DRA\" \"CD74\" \"CST3\" \"TYROBP\" ...\n\n\n\n8.4.1 HVGs子集\n\nCodesce.pbmc.hvg &lt;- sce.pbmc[chosen,]\ndim(sce.pbmc.hvg)\n#&gt; [1] 1274 3985\n\n\n\nCode# Performing PCA only on the chosen HVGs.\nlibrary(scater)\nsce.pbmc &lt;- runPCA(sce.pbmc, subset_row=chosen)\nreducedDimNames(sce.pbmc)\n#&gt; [1] \"PCA\"\n\n\n\n8.4.2 保留原始对象\n\nCoderowSubset(sce.pbmc) &lt;- chosen # stored in the default 'subset'\nrowSubset(sce.pbmc, \"HVGs.more\") &lt;- getTopHVGs(dec.pbmc, prop=0.2)\nrowSubset(sce.pbmc, \"HVGs.less\") &lt;- getTopHVGs(dec.pbmc, prop=0.3)\nrowData(sce.pbmc)\n#&gt; DataFrame with 33694 rows and 5 columns\n#&gt;                           ID       Symbol    subset HVGs.more HVGs.less\n#&gt;                  &lt;character&gt;  &lt;character&gt; &lt;logical&gt; &lt;logical&gt; &lt;logical&gt;\n#&gt; RP11-34P13.3 ENSG00000243485 RP11-34P13.3     FALSE     FALSE     FALSE\n#&gt; FAM138A      ENSG00000237613      FAM138A     FALSE     FALSE     FALSE\n#&gt; OR4F5        ENSG00000186092        OR4F5     FALSE     FALSE     FALSE\n#&gt; RP11-34P13.7 ENSG00000238009 RP11-34P13.7     FALSE     FALSE     FALSE\n#&gt; RP11-34P13.8 ENSG00000239945 RP11-34P13.8     FALSE     FALSE     FALSE\n#&gt; ...                      ...          ...       ...       ...       ...\n#&gt; AC233755.2   ENSG00000277856   AC233755.2     FALSE     FALSE     FALSE\n#&gt; AC233755.1   ENSG00000275063   AC233755.1     FALSE     FALSE     FALSE\n#&gt; AC240274.1   ENSG00000271254   AC240274.1     FALSE     FALSE     FALSE\n#&gt; AC213203.1   ENSG00000277475   AC213203.1     FALSE     FALSE     FALSE\n#&gt; FAM231B      ENSG00000268674      FAM231B     FALSE     FALSE     FALSE\n\n\n\n8.4.3 替代实验\n\nCodesce.pbmc\n#&gt; class: SingleCellExperiment \n#&gt; dim: 33694 3985 \n#&gt; metadata(1): Samples\n#&gt; assays(2): counts logcounts\n#&gt; rownames(33694): RP11-34P13.3 FAM138A ... AC213203.1 FAM231B\n#&gt; rowData names(5): ID Symbol subset HVGs.more HVGs.less\n#&gt; colnames(3985): AAACCTGAGAAGGCCT-1 AAACCTGAGACAGACC-1 ...\n#&gt;   TTTGTCAGTTAAGACA-1 TTTGTCATCCCAAGAT-1\n#&gt; colData names(3): Sample Barcode sizeFactor\n#&gt; reducedDimNames(1): PCA\n#&gt; mainExpName: NULL\n#&gt; altExpNames(0):\n# Recycling the class above.\naltExp(sce.pbmc.hvg, \"original\") &lt;- sce.pbmc\naltExpNames(sce.pbmc.hvg)\n#&gt; [1] \"original\"\nsce.pbmc.hvg\n#&gt; class: SingleCellExperiment \n#&gt; dim: 1274 3985 \n#&gt; metadata(1): Samples\n#&gt; assays(2): counts logcounts\n#&gt; rownames(1274): LYZ S100A9 ... TNNT1 TMEM55A\n#&gt; rowData names(2): ID Symbol\n#&gt; colnames(3985): AAACCTGAGAAGGCCT-1 AAACCTGAGACAGACC-1 ...\n#&gt;   TTTGTCAGTTAAGACA-1 TTTGTCATCCCAAGAT-1\n#&gt; colData names(3): Sample Barcode sizeFactor\n#&gt; reducedDimNames(0):\n#&gt; mainExpName: NULL\n#&gt; altExpNames(1): original\n\n\n\nCode# No need for explicit subset_row= specification in downstream operations.\nsce.pbmc.hvg &lt;- runPCA(sce.pbmc.hvg)\n\n# 恢复原始数据\nsce.pbmc.original &lt;- altExp(sce.pbmc.hvg, \"original\", withColData=TRUE)\nsce.pbmc.original\n#&gt; class: SingleCellExperiment \n#&gt; dim: 33694 3985 \n#&gt; metadata(1): Samples\n#&gt; assays(2): counts logcounts\n#&gt; rownames(33694): RP11-34P13.3 FAM138A ... AC213203.1 FAM231B\n#&gt; rowData names(5): ID Symbol subset HVGs.more HVGs.less\n#&gt; colnames(3985): AAACCTGAGAAGGCCT-1 AAACCTGAGACAGACC-1 ...\n#&gt;   TTTGTCAGTTAAGACA-1 TTTGTCATCCCAAGAT-1\n#&gt; colData names(6): Sample Barcode ... Barcode sizeFactor\n#&gt; reducedDimNames(1): PCA\n#&gt; mainExpName: NULL\n#&gt; altExpNames(0):",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>特征选择</span>"
    ]
  },
  {
    "objectID": "DimensionalityReduction.html",
    "href": "DimensionalityReduction.html",
    "title": "\n9  降维\n",
    "section": "",
    "text": "9.1 主成分分析\nPrincipal components analysis (PCA) 是一种线性降维技术，即每个 PC 只捕获高维空间中沿线的变化。 通过将每个轴想象成一条线来最好地理解这一点。 假设我们在任何地方画一条线，然后将数据集中的每个细胞移动到线上最近的位置（？垂线段交点）。 此轴捕获的方差定义为沿该线的细胞位置的方差（？垂线段交点坐标值绝对值的方差，）。\n在 PCA 中，选择第一个轴（或”主成分”，PC）以使其最大化这种差异。 选择下一个 PC 时，它与第一个 PC 正交，并捕获最大的剩余变化量，依此类推。 早期的PC可能集中了生物信号，技术噪声应该主要集中在后来的PC中。 虽然PCA对随机噪声具有鲁棒性robust（稳健性），但过量的PCA可能会导致早期的PC捕获噪声而不是生物差异。\nCodelibrary(scran)\ntop.zeisel &lt;- getTopHVGs(dec.zeisel, n=2000)\n\nset.seed(100) # See below.\nsce.zeisel &lt;- fixedPCA(sce.zeisel, subset.row=top.zeisel)  # 默认情况下，将计算前 50 个 PC\nreducedDimNames(sce.zeisel)\n#&gt; [1] \"PCA\"\nCodedim(reducedDim(sce.zeisel, \"PCA\"))\n#&gt; [1] 2816   50\n对于大型数据集，使用仅计算top PCs 的近似 SVD 算法可以获得更高的效率。这些近似算法中有许多是基于随机化的，因此需要set.seed()获得可重复的结果。\nCodelibrary(BiocSingular)\nset.seed(1000)\nsce.zeisel &lt;- fixedPCA(sce.zeisel, subset.row=top.zeisel, \n    BSPARAM=RandomParam(), name=\"randomized\")\nreducedDimNames(sce.zeisel)\n#&gt; [1] \"PCA\"        \"randomized\"\nCodedim(reducedDim(sce.zeisel, \"randomized\"))\n#&gt; [1] 2816   50",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>降维</span>"
    ]
  },
  {
    "objectID": "DimensionalityReduction.html#主成分分析",
    "href": "DimensionalityReduction.html#主成分分析",
    "title": "\n9  降维\n",
    "section": "",
    "text": "9.1.1 选择主成分数量\n\nCode\npercent.var &lt;- attr(reducedDim(sce.zeisel), \"percentVar\")\nplot(percent.var, log=\"y\", xlab=\"PC\", ylab=\"Variance explained (%)\")\n\n\n\n\n\n\n\n\n9.1.2 可视化主成分\n\nCodelibrary(scater)\nplotReducedDim(sce.zeisel, dimred=\"PCA\", colour_by=\"level1class\")\n\n\n\n\n\n\n\n\nCodeplotReducedDim(sce.zeisel, dimred=\"PCA\", ncomponents=4,\n    colour_by=\"level1class\")",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>降维</span>"
    ]
  },
  {
    "objectID": "DimensionalityReduction.html#t-分布随机邻域嵌入",
    "href": "DimensionalityReduction.html#t-分布随机邻域嵌入",
    "title": "\n9  降维\n",
    "section": "\n9.2 t-分布随机邻域嵌入",
    "text": "9.2 t-分布随机邻域嵌入\nscRNA-seq数据可视化的事实标准是t-SNE。\nt-stochastic neighbor embedding （t-SNE） 是一种非线性降维方法。它试图寻找数据的低维表示，其保留了每个点与其相邻点在高维空间中的距离。t-SNE 在低维空间中排列细胞的方式具有更大的自由度，使其能够在复杂的群体中分离许多不同的簇。\nt-SNE的主要缺点之一是计算比其他可视化方法的更密集，可以通过在runTSNE()中设置dimred=\"PCA\"使得t-SNE在 top PCs 中计算。这利用了PCA的数据压缩和噪声去除，以获得更快、更整洁的结果。\nt-SNE 超参数\n\n困惑度perplexity（5 - 50）\n学习率epsilon\n迭代次数 step\n\n它涉及随机初始化，因此需要设置伪随机以确保结果是可重复的。\n\nCodeset.seed(00101001101)\n\n# runTSNE() stores the t-SNE coordinates in the reducedDims\n# for re-use across multiple plotReducedDim() calls.\nsce.zeisel &lt;- runTSNE(sce.zeisel, dimred=\"PCA\")\nreducedDimNames(sce.zeisel)\n#&gt; [1] \"PCA\"        \"randomized\" \"TSNE\"\nplotReducedDim(sce.zeisel, dimred=\"TSNE\", colour_by=\"level1class\")\n\n\n\n\n\n\nFigure 9.1\n\n\n\n\nclusters的相对大小和相对位置没有意义。\n\nCodeset.seed(100)\nsce.zeisel &lt;- runTSNE(sce.zeisel, dimred=\"PCA\", perplexity=5)\nout5 &lt;- plotReducedDim(sce.zeisel, dimred=\"TSNE\",\n    colour_by=\"level1class\") + ggtitle(\"perplexity = 5\")\n\nset.seed(100)\nsce.zeisel &lt;- runTSNE(sce.zeisel, dimred=\"PCA\", perplexity=20)\nout20 &lt;- plotReducedDim(sce.zeisel, dimred=\"TSNE\",\n    colour_by=\"level1class\") + ggtitle(\"perplexity = 20\")\n\nset.seed(100)\nsce.zeisel &lt;- runTSNE(sce.zeisel, dimred=\"PCA\", perplexity=80)\nout80 &lt;- plotReducedDim(sce.zeisel, dimred=\"TSNE\", \n    colour_by=\"level1class\") + ggtitle(\"perplexity = 80\")\n\ngridExtra::grid.arrange(out5, out20, out80, ncol=3)",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>降维</span>"
    ]
  },
  {
    "objectID": "DimensionalityReduction.html#均匀流形近似和投影",
    "href": "DimensionalityReduction.html#均匀流形近似和投影",
    "title": "\n9  降维\n",
    "section": "\n9.3 均匀流形近似和投影",
    "text": "9.3 均匀流形近似和投影\nUniform manifold approximation and projection（UMAP） 也是一种非线性降维方法。UMAP 是可视化大型scRNA-seq数据集的首选方法。\numap 超参数\n\nn_neighbors 局部结构-全局结构权衡\nmin_dist 紧密程度\nn_components 降维空间的维数\nmetric 距离的计算方式\n\n\nCodeset.seed(1100101001)\nsce.zeisel &lt;- runUMAP(sce.zeisel, dimred=\"PCA\")\nplotReducedDim(sce.zeisel, dimred=\"UMAP\", colour_by=\"level1class\")\n\n\n\n\n\n\nFigure 9.2\n\n\n\n\n相比 t-SNE Figure 9.1 ，UMAP Figure 9.2 往往具有更紧凑的视觉clusters，它们之间有更多的空白空间。 它保留更多的全局结构，但这必然会降低每个视觉集群内的分辨率。",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>降维</span>"
    ]
  },
  {
    "objectID": "Clustering.html",
    "href": "Clustering.html",
    "title": "\n10  聚类\n",
    "section": "",
    "text": "10.1 Graph-based clustering\n基于图的聚类因其在 Seurat 中的使用而广为普及，是一种灵活且可扩展的技术，用于聚类大型 scRNA-seq 数据集。首先构建一个图，其中每个节点都是一个连接到高维空间中 nearest neighbors 的细胞。根据所涉及的细胞之间的相似性对边缘进行加权，对关系更密切的细胞赋予更高的权重。然后应用算法来识别在同一群落中的细胞比在非同一群落的细胞更紧密的“簇”。\n基于图的聚类的主要优势在于其可伸缩性。 它只需要一个 k-nearest neighbor 搜索，避免了对簇的形状或每个簇内细胞的分布做出强有力的假设，例如k-means（有利于球面簇）或高斯混合模型（需要正态性）。\n主要缺点是在图构造之后，不会保留超出邻近细胞关系的信息。在细胞密度差异的数据产生一些实际后果。\nCodelibrary(scran)\nnn.clusters &lt;- clusterCells(sce.pbmc, use.dimred=\"PCA\")\ntable(nn.clusters)\n#&gt; nn.clusters\n#&gt;   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16 \n#&gt; 205 508 541  56 374 125  46 432 302 867  47 155 166  61  84  16\nCodelibrary(scater)\ncolLabels(sce.pbmc) &lt;- nn.clusters\nplotReducedDim(sce.pbmc, \"TSNE\", colour_by=\"label\")\n默认情况下，使用每个细胞的 10 个最近邻来构造共享的最近邻图。如果两个细胞的任何最近邻共享，则通过一条边连接， 边权重由共享最近邻的最高平均秩定义。walktrap\n显式指定参数,改变参数切换不同的聚类算法\nCodelibrary(bluster)\nnn.clusters2 &lt;- clusterCells(sce.pbmc, use.dimred=\"PCA\", \n    BLUSPARAM=SNNGraphParam(k=10, type=\"rank\", cluster.fun=\"walktrap\"))\ntable(nn.clusters2)\n#&gt; nn.clusters2\n#&gt;   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16 \n#&gt; 205 508 541  56 374 125  46 432 302 867  47 155 166  61  84  16\n通过在clusterCells()中指定full=TRUE来获取图本身，这样做将返回聚类分析期间使用的所有中间结构，包括 igraph 包中的图形对象。 该图可以使用力导向布局(force-directed layout)进行可视化\nCodenn.clust.info &lt;- clusterCells(sce.pbmc, use.dimred=\"PCA\", full=TRUE)\nnn.clust.info$objects$graph\n#&gt; IGRAPH 589f6c4 U-W- 3985 133130 -- \n#&gt; + attr: weight (e/n)\n#&gt; + edges from 589f6c4:\n#&gt;  [1]  4--12  8--13 11--15 12--17  4--17 12--18 17--18  8--20  1--21  8--23\n#&gt; [11]  2--25 17--27 18--27 11--30 15--30 10--31 25--33  2--33 19--37  9--38\n#&gt; [21] 23--41  4--43 12--43 17--43 21--45  2--47 33--47 22--48 18--49 22--51\n#&gt; [31] 48--51 16--52 11--54 15--54 30--54 26--57 21--58 47--58 52--59 13--59\n#&gt; [41] 23--60  9--60 41--60 52--60 22--61 51--61 48--61 55--63 22--64 61--64\n#&gt; [51] 48--64 51--64  1--65 42--67 16--68 55--69 50--70 59--70 40--71 55--72\n#&gt; [61] 63--73 39--75 69--75 30--76 11--76 15--76  8--78 41--78 20--79  8--79\n#&gt; [71]  6--82 76--82 15--82 11--85 30--85 76--85 15--85 54--85 14--87 66--87\n#&gt; + ... omitted several edges\nCodeset.seed(11000)\nreducedDim(sce.pbmc, \"force\") &lt;- igraph::layout_with_fr(nn.clust.info$objects$graph)\nplotReducedDim(sce.pbmc, colour_by=\"label\", dimred=\"force\")\n\n\n\n\n\n\nFigure 10.1\n此外，该图还可用于生成有关基于图的聚类行为的详细诊断。",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>聚类</span>"
    ]
  },
  {
    "objectID": "Clustering.html#graph-based-clustering",
    "href": "Clustering.html#graph-based-clustering",
    "title": "\n10  聚类\n",
    "section": "",
    "text": "10.1.1 参数\n\n10.1.1.1 k最近邻数目\n用于构造图的最近邻的数量，这控制了聚类的分辨率，其中更高的分辨率（k越小）是更互联的图和更多的聚类。 最近邻越多，聚类越少。\n\nCode# More resolved.\nclust.5 &lt;- clusterCells(sce.pbmc, use.dimred=\"PCA\", BLUSPARAM=NNGraphParam(k=5))\ntable(clust.5)\n#&gt; clust.5\n#&gt;   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20 \n#&gt; 523 302 125  45 172 573 249 439 293  95 772 142  38  18  62  38  30  16  15   9 \n#&gt;  21  22 \n#&gt;  16  13\n\n\n\nCode# Less resolved.\nclust.50 &lt;- clusterCells(sce.pbmc, use.dimred=\"PCA\", BLUSPARAM=NNGraphParam(k=50))\ntable(clust.50)\n#&gt; clust.50\n#&gt;   1   2   3   4   5   6   7   8   9  10 \n#&gt; 869 514 194 478 539 944 138 175  89  45\n\n\n\n10.1.1.2 type 边缘加权方法\ntype=\"number\"将根据两个细胞之间共享的最近邻的数量对边进行加权。\n\nCodeclust.num &lt;- clusterCells(sce.pbmc, use.dimred=\"PCA\", \n    BLUSPARAM=NNGraphParam(type=\"number\"))\ntable(clust.num)\n#&gt; clust.num\n#&gt;   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19 \n#&gt; 199 541 354 294 458 123  47  45 170 397 838 150  40  80 136  50  31  16  16\n\n\ntype=\"jaccard\"将根据两组最近邻的 Jaccard 指数对边缘进行加权。\n\nCodeclust.jaccard &lt;- clusterCells(sce.pbmc, use.dimred=\"PCA\", \n    BLUSPARAM=NNGraphParam(type=\"jaccard\"))\ntable(clust.jaccard)\n#&gt; clust.jaccard\n#&gt;   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17 \n#&gt; 201 541 740 233 352  47 124 841  45 361  40 154  80  61 133  16  16\n\n\n不对边缘加权\n\nCodeclust.none &lt;- clusterCells(sce.pbmc, use.dimred=\"PCA\", \n    BLUSPARAM=KNNGraphParam())\ntable(clust.none)\n#&gt; clust.none\n#&gt;   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16 \n#&gt; 541 446  54 170 699  45 126 172 128 907 286  47 158 137  54  15\n\n\n\n10.1.1.3 cluster.fun 簇识别方法\nigraph\n\nCodelibrary(igraph)\nclust.walktrap &lt;- clusterCells(sce.pbmc, use.dimred=\"PCA\", \n    BLUSPARAM=NNGraphParam(cluster.fun=\"walktrap\"))\n\nclust.louvain &lt;- clusterCells(sce.pbmc, use.dimred=\"PCA\", \n    BLUSPARAM=NNGraphParam(cluster.fun=\"louvain\"))\n\nclust.infomap &lt;- clusterCells(sce.pbmc, use.dimred=\"PCA\", \n    BLUSPARAM=NNGraphParam(cluster.fun=\"infomap\"))\n\nclust.fast &lt;- clusterCells(sce.pbmc, use.dimred=\"PCA\", \n    BLUSPARAM=NNGraphParam(cluster.fun=\"fast_greedy\"))\n\nclust.labprop &lt;- clusterCells(sce.pbmc, use.dimred=\"PCA\", \n    BLUSPARAM=NNGraphParam(cluster.fun=\"label_prop\"))\n\nclust.eigen &lt;- clusterCells(sce.pbmc, use.dimred=\"PCA\", \n    BLUSPARAM=NNGraphParam(cluster.fun=\"leading_eigen\"))\n\n\n\nCodelibrary(pheatmap)\n# Using a large pseudo-count for a smoother color transition\n# between 0 and 1 cell in each 'tab'.\ntab &lt;- table(paste(\"Infomap\", clust.infomap), \n    paste(\"Walktrap\", clust.walktrap))\nivw &lt;- pheatmap(log10(tab+10), main=\"Infomap vs Walktrap\",\n    color=viridis::viridis(100), silent=TRUE)\ngridExtra::grid.arrange(ivw[[4]])\n\n\n\n\n\n\nFigure 10.2\n\n\n\n\n\nCodetab &lt;- table(paste(\"Fast\", clust.fast), \n    paste(\"Walktrap\", clust.walktrap))\nfvw &lt;- pheatmap(log10(tab+10), main=\"Fast-greedy vs Walktrap\",\n    color=viridis::viridis(100), silent=TRUE)\n\ngridExtra::grid.arrange(fvw[[4]])\n\n\n\n\n\n\nFigure 10.3\n\n\n\n\n涉及scran的管道默认为基于秩（rank）的权重，后跟 Walktrap 聚类。 相比之下，Seurat 使用基于 Jaccard 的权重，然后是 Louvain 聚类。",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>聚类</span>"
    ]
  },
  {
    "objectID": "Clustering.html#k-means-聚类",
    "href": "Clustering.html#k-means-聚类",
    "title": "\n10  聚类\n",
    "section": "\n10.2 K-means 聚类",
    "text": "10.2 K-means 聚类\nk-means 聚类是一种经典的向量量化技术，可将细胞分成 k 个簇。通过随机初始配置 k 个质心，最小化簇内的平方和以实现每个细胞都被分配给最接近质心的簇， 。 我们通常设置 k以较大的值（例如细胞数的平方根）来获得细粒度（ fine-grained）的簇。\n\nCodeset.seed(100)\nclust.kmeans &lt;- clusterCells(sce.pbmc, use.dimred=\"PCA\", \n    BLUSPARAM=KmeansParam(centers=10))\ntable(clust.kmeans)\n#&gt; clust.kmeans\n#&gt;   1   2   3   4   5   6   7   8   9  10 \n#&gt; 548  46 408 270 539 199 148 783 163 881\n\n\n\nCodecolLabels(sce.pbmc) &lt;- clust.kmeans\nplotReducedDim(sce.pbmc, \"TSNE\", colour_by=\"label\")\n\n\n\n\n\n\n\n\nCodeset.seed(100)\nclust.kmeans2 &lt;- clusterCells(sce.pbmc, use.dimred=\"PCA\", \n    BLUSPARAM=KmeansParam(centers=20))\ntable(clust.kmeans2)\n#&gt; clust.kmeans2\n#&gt;   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20 \n#&gt; 243  28 202 361 282 166 388 150 114 537 170  96  46 131 162 118 201 257 288  45\ncolLabels(sce.pbmc) &lt;- clust.kmeans2\nplotTSNE(sce.pbmc, colour_by=\"label\", text_by=\"label\")\n\n\n\n\n\n\n\nmini-batch k-means mbkmeans\n\nCodeset.seed(100)\nclust.mbkmeans &lt;- clusterCells(sce.pbmc, use.dimred=\"PCA\",\n    BLUSPARAM=MbkmeansParam(centers=10))\ntable(clust.mbkmeans)\n#&gt; clust.mbkmeans\n#&gt;    1    2    3    4    5    6    7    8    9   10 \n#&gt;  304  339  490   46  304  560   16  176  727 1023\n\n\n就其本身而言， k-means 存在几个缺点：\n\n它隐式偏向于半径相等的球形簇，这可能会导致在包含大小和形状不规则的分组的数据集上出现不直观的分区。\n簇个数（质心数，centers） k 必须事先指定，并表示聚类分辨率的上限。k小于细胞类型数量时将始终导致两 种细胞类型的共聚类。相比之下，其他方法（如基于图的聚类）将遵循强分离，即使相关分辨率参数设置为低值。\n它取决于随机选择的初始质心。 这需要多次运行来验证簇是否稳定。\n\n\n10.2.1 “two-step” mode：Kmeans-nnGraph\nk-means 首先用于获得经过基于图的聚类的代表性质心。 然后，将每个细胞放置在相同的基于图的簇中，这也是k-means聚类分配的簇。\n\nCode# Setting the seed due to the randomness of k-means.\nset.seed(0101010)\nkgraph.clusters &lt;- clusterCells(sce.pbmc, use.dimred=\"PCA\",\n    BLUSPARAM=TwoStepParam(\n        first=KmeansParam(centers=1000),\n        second=NNGraphParam(k=5)\n    )\n)\ntable(kgraph.clusters)\n#&gt; kgraph.clusters\n#&gt;   1   2   3   4   5   6   7   8   9  10  11  12 \n#&gt; 191 854 506 541 541 892  46 120  29 132  47  86\n\nplotTSNE(sce.pbmc, colour_by=I(kgraph.clusters))\n\n\n\n\n\n\nFigure 10.4",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>聚类</span>"
    ]
  },
  {
    "objectID": "Clustering.html#hierarchical-clustering",
    "href": "Clustering.html#hierarchical-clustering",
    "title": "\n10  聚类\n",
    "section": "\n10.3 Hierarchical clustering",
    "text": "10.3 Hierarchical clustering\n分层聚类是一种古老的技术，它根据样本彼此之间的相对相似性将样本排列到层次结构中。 大多数实现通过将最相似的示例加入到新集群中，然后将相似的集群加入到更大的集群中，依此类推，直到所有样本都属于单个集群。 此过程将获得一个树状图，该树状图定义了粒度逐渐增加的聚类。 分层聚类方法的变体主要区别在于它们选择如何执行集聚。 例如，完全连接旨在合并具有最小最大距离的簇，而 Ward 方法旨在最小化簇内方差的增加。\n分层聚类的主要优势在于树状图的产生，可以定量捕获不同分辨率下的亚群之间的关系 Figure 10.5 。 以高分辨率切割树状图也保证产生嵌套在以低分辨率切割获得的聚类中的聚类，这可能有助于解释 Figure 10.6 。 树状图也是细胞从相对较新的共同祖先传代而来的数据的自然表示。\n缺点是计算成本高，速度太慢。\n\nCode#--- loading ---#\nlibrary(scRNAseq)\nsce.416b &lt;- LunSpikeInData(which=\"416b\") \nsce.416b$block &lt;- factor(sce.416b$block)\n\n#--- gene-annotation ---#\nlibrary(AnnotationHub)\nens.mm.v97 &lt;- AnnotationHub()[[\"AH73905\"]]\nrowData(sce.416b)$ENSEMBL &lt;- rownames(sce.416b)\nrowData(sce.416b)$SYMBOL &lt;- mapIds(ens.mm.v97, keys=rownames(sce.416b),\n    keytype=\"GENEID\", column=\"SYMBOL\")\nrowData(sce.416b)$SEQNAME &lt;- mapIds(ens.mm.v97, keys=rownames(sce.416b),\n    keytype=\"GENEID\", column=\"SEQNAME\")\n\nlibrary(scater)\nrownames(sce.416b) &lt;- uniquifyFeatureNames(rowData(sce.416b)$ENSEMBL, \n    rowData(sce.416b)$SYMBOL)\n\n#--- quality-control ---#\nmito &lt;- which(rowData(sce.416b)$SEQNAME==\"MT\")\nstats &lt;- perCellQCMetrics(sce.416b, subsets=list(Mt=mito))\nqc &lt;- quickPerCellQC(stats, percent_subsets=c(\"subsets_Mt_percent\",\n    \"altexps_ERCC_percent\"), batch=sce.416b$block)\nsce.416b &lt;- sce.416b[,!qc$discard]\n\n#--- normalization ---#\nlibrary(scran)\nsce.416b &lt;- computeSumFactors(sce.416b)\nsce.416b &lt;- logNormCounts(sce.416b)\n\n#--- variance-modelling ---#\ndec.416b &lt;- modelGeneVarWithSpikes(sce.416b, \"ERCC\", block=sce.416b$block)\nchosen.hvgs &lt;- getTopHVGs(dec.416b, prop=0.1)\n\n#--- batch-correction ---#\nlibrary(limma)\nassay(sce.416b, \"corrected\") &lt;- removeBatchEffect(logcounts(sce.416b), \n    design=model.matrix(~sce.416b$phenotype), batch=sce.416b$block)\n\n#--- dimensionality-reduction ---#\nsce.416b &lt;- runPCA(sce.416b, ncomponents=10, subset_row=chosen.hvgs,\n    exprs_values=\"corrected\", BSPARAM=BiocSingular::ExactParam())\n\nset.seed(1010)\nsce.416b &lt;- runTSNE(sce.416b, dimred=\"PCA\", perplexity=10)\n\n\n\nCodesce.416b\n#&gt; class: SingleCellExperiment \n#&gt; dim: 46604 185 \n#&gt; metadata(0):\n#&gt; assays(3): counts logcounts corrected\n#&gt; rownames(46604): 4933401J01Rik Gm26206 ... CAAA01147332.1\n#&gt;   CBFB-MYH11-mcherry\n#&gt; rowData names(4): Length ENSEMBL SYMBOL SEQNAME\n#&gt; colnames(185): SLX-9555.N701_S502.C89V9ANXX.s_1.r_1\n#&gt;   SLX-9555.N701_S503.C89V9ANXX.s_1.r_1 ...\n#&gt;   SLX-11312.N712_S507.H5H5YBBXX.s_8.r_1\n#&gt;   SLX-11312.N712_S517.H5H5YBBXX.s_8.r_1\n#&gt; colData names(10): Source Name cell line ... block sizeFactor\n#&gt; reducedDimNames(2): PCA TSNE\n#&gt; mainExpName: endogenous\n#&gt; altExpNames(2): ERCC SIRV\n\n\n\nCodehclust.416b &lt;- clusterCells(sce.416b, use.dimred=\"PCA\",\n    BLUSPARAM=HclustParam(method=\"ward.D2\"), full=TRUE)\ntree.416b &lt;- hclust.416b$objects$hclust\n\n# Making a prettier dendrogram.\nlibrary(dendextend)\ntree.416b$labels &lt;- seq_along(tree.416b$labels)\ndend &lt;- as.dendrogram(tree.416b, hang=0.1)\n\ncombined.fac &lt;- paste0(sce.416b$block, \".\", \n    sub(\" .*\", \"\", sce.416b$phenotype))\nlabels_colors(dend) &lt;- c(\n    \"20160113.wild\"=\"blue\",\n    \"20160113.induced\"=\"red\",\n    \"20160325.wild\"=\"dodgerblue\",\n    \"20160325.induced\"=\"salmon\"\n)[combined.fac][order.dendrogram(dend)]\n\nplot(dend)\n\n\n\n\n\n\nFigure 10.5: 根据致癌基因诱导状态（红色为诱导，蓝色为对照）和起始板（浅色或深色）进行着色\n\n\n\n\n为了获得显式聚类 Figure 10.6 ，我们通过删除内部分支来“切割”树，使每个子树代表一个不同的聚类。\ndynamicTreeCut\n\nCodehclust.dyn &lt;- clusterCells(sce.416b, use.dimred=\"PCA\",\n    BLUSPARAM=HclustParam(method=\"ward.D2\", cut.dynamic=TRUE,\n        cut.params=list(minClusterSize=10, deepSplit=1)))\ntable(hclust.dyn)\n#&gt; hclust.dyn\n#&gt;  1  2  3  4 \n#&gt; 78 69 24 14\n\nlabels_colors(dend) &lt;- as.integer(hclust.dyn)[order.dendrogram(dend)]\nplot(dend)\n\n\n\n\n\n\nFigure 10.6: 根据dynamic Cut中分配的聚类标识进行着色\n\n\n\n\n\nCodecolLabels(sce.416b) &lt;- factor(hclust.dyn)\nplotReducedDim(sce.416b, \"TSNE\", colour_by=\"label\")\n\n\n\n\n\n\nFigure 10.7\n\n\n\n\n\n10.3.1 “two-step” mode ：Kmeans-Hierarchical\n\nCode# Setting the seed due to the randomness of k-means.\nset.seed(1111)\nkhclust.info &lt;- clusterCells(sce.pbmc, use.dimred=\"PCA\",\n    BLUSPARAM=TwoStepParam(\n        first=KmeansParam(centers=1000),\n        second=HclustParam(method=\"ward.D2\", cut.dynamic=TRUE,\n            cut.param=list(deepSplit=3)) # for higher resolution.\n    ),\n    full=TRUE\n)\ntable(khclust.info$clusters)\n#&gt; \n#&gt;   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18 \n#&gt; 649 374 347 328 281 243 218 223 161 157 172 133 135 167  93 117  72 115\n\nplotTSNE(sce.pbmc, colour_by=I(khclust.info$clusters), \n    text_by=I(khclust.info$clusters))\n\n\n\n\n\n\nFigure 10.8: 根据k-means/hierarchical聚类组合中分配的集群的身份进行着色\n\n\n\n\n还可以检查在质心上构建的树状图 Figure 10.9 , 这提供了不同亚群之间相对相似性的更定量的可视化。\n\nCodek.stats &lt;- khclust.info$objects$first\ntree.pbmc &lt;- khclust.info$objects$second$hclust\n\nm &lt;- match(as.integer(tree.pbmc$labels), k.stats$cluster)\nfinal.clusters &lt;- khclust.info$clusters[m]\n\n# TODO: expose scater color palette for easier re-use,\n# given that the default colors start getting recycled.\ndend &lt;- as.dendrogram(tree.pbmc, hang=0.1)\nlabels_colors(dend) &lt;- as.integer(final.clusters)[order.dendrogram(dend)]\n\nplot(dend)\n\n\n\n\n\n\nFigure 10.9\n\n\n\n\n\n10.3.2 “two-step” mode ：Kmeans-Affinity\n相同的方法可用于加速任何基于距离矩阵的聚类方法。 例如， 使k-means质心通过亲和性传播（affinity propagation）执行聚类。在这个过程中，每个样本（如质心）选择自己或另一个样本作为其“示例exemplar”， 选择的适用性取决于样本之间的距离、每个样本的其他潜在样本以及具有相同所选样本的其他样本。 这些选择的迭代更新会产生一组聚类，其中每个聚类都是根据分配给同一示例的样本定义的。 与分层聚类不同，它不提供树状图dendrogram，但它也避免了切割树的额外复杂性—— 分辨率主要通过参数q=控制，该参数定义了样本将自己视为示例并因此形成自己的簇的强度。\n\nCode# Setting the seed due to the randomness of k-means.\nlibrary(apcluster)\nset.seed(1111)\nkaclust.info &lt;- clusterCells(sce.pbmc, use.dimred=\"PCA\",\n    BLUSPARAM=TwoStepParam(\n        first=KmeansParam(centers=1000),\n        second=AffinityParam(q=0.1) # larger q =&gt; more clusters\n    ),\n    full=TRUE\n)\ntable(kaclust.info$clusters)\n#&gt; \n#&gt;   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18 \n#&gt; 847 144 392  93 405 264 170 209 379 187  24  20  45 121 536  27  64  58\n\nplotTSNE(sce.pbmc, colour_by=I(kaclust.info$clusters), \n    text_by=I(kaclust.info$clusters))\n\n\n\n\n\n\nFigure 10.10",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>聚类</span>"
    ]
  },
  {
    "objectID": "Clustering.html#subclustering",
    "href": "Clustering.html#subclustering",
    "title": "\n10  聚类\n",
    "section": "\n10.4 Subclustering",
    "text": "10.4 Subclustering\n提高分辨率的另一种简单方法是在单个聚类中重复特征选择和聚类，这旨在选择与内部结构更相关的 HVGs 和 PCs，通过避免不必要的功能产生的噪音来提高分辨率。 Subclustering 在缺乏不同亚群的情况下根据更适度的异质性分离细胞。\n\nCodeclust.full &lt;- clusterCells(sce.pbmc, use.dimred=\"PCA\")\nplotExpression(sce.pbmc, features=c(\"CD3E\", \"CCR7\", \"CD69\", \"CD44\"),\n    x=I(clust.full), colour_by=I(clust.full))\n\n\n\n\n\n\n\n\nCode# Repeating modelling and PCA on the subset.\nmemory &lt;- 10L\nsce.memory &lt;- sce.pbmc[,clust.full==memory]\ndec.memory &lt;- modelGeneVar(sce.memory)\nsce.memory &lt;- denoisePCA(sce.memory, technical=dec.memory,\n    subset.row=getTopHVGs(dec.memory, n=5000))\n\n\n\nCodeg.memory &lt;- buildSNNGraph(sce.memory, use.dimred=\"PCA\")\nclust.memory &lt;- igraph::cluster_walktrap(g.memory)$membership\nplotExpression(sce.memory, features=c(\"CD8A\", \"CD4\"),\n    x=I(factor(clust.memory)))\n\n\n\n\n\n\n\n对于子聚类分析，定义一个自定义函数quickSubCluster()\n\nCodeset.seed(1000010)\nsubcluster.out &lt;- quickSubCluster(sce.pbmc, groups=clust.full,\n    prepFUN=function(x) { # Preparing the subsetted SCE for clustering.\n        dec &lt;- modelGeneVar(x)\n        input &lt;- denoisePCA(x, technical=dec,\n            subset.row=getTopHVGs(dec, prop=0.1),\n            BSPARAM=BiocSingular::IrlbaParam())\n    },\n    clusterFUN=function(x) { # Performing the subclustering in the subset.\n        g &lt;- buildSNNGraph(x, use.dimred=\"PCA\", k=20)\n        igraph::cluster_walktrap(g)$membership\n    }\n)\n\n# One SingleCellExperiment object per parent cluster:\nnames(subcluster.out)\n#&gt;  [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" \"11\" \"12\" \"13\" \"14\" \"15\"\n#&gt; [16] \"16\"\n# Looking at the subclustering for one example:\ntable(subcluster.out[[1]]$subcluster)\n#&gt; \n#&gt; 1.1 1.2 1.3 1.4 1.5 1.6 \n#&gt;  28  22  34  62  11  48",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>聚类</span>"
    ]
  },
  {
    "objectID": "MarkerGeneDetection.html",
    "href": "MarkerGeneDetection.html",
    "title": "\n11  标记基因检测\n",
    "section": "",
    "text": "11.1 通过成对比较对标记基因计分\nscoreMarkers()\nself.average 在X簇中的某基因平均对数表达值\nother.average 所有其他簇的总体平均值\nself.detected 在X簇中检测到某基因表达的细胞比例\nother.detected 所有其他簇的平均检测到的细胞比例\nAUC ，logFC.cohen ，log.C.detected 成对比较中生成的效应值汇总\nAUC 或 Cohen’s d 通常是通用标记检测的最佳选择，因为无论表达值的大小如何，它们都是有效的。 检测到表达值的细胞比例的对数倍数变化对于识别表达的binary changes特别有用。\nCodelibrary(scran)\nmarker.info &lt;- scoreMarkers(sce.pbmc, colLabels(sce.pbmc))\n\nmarker.info\n#&gt; List of length 16\n#&gt; names(16): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n\ncolnames(marker.info[[\"1\"]]) # statistics for cluster 1.\n#&gt;  [1] \"self.average\"          \"other.average\"         \"self.detected\"        \n#&gt;  [4] \"other.detected\"        \"mean.logFC.cohen\"      \"min.logFC.cohen\"      \n#&gt;  [7] \"median.logFC.cohen\"    \"max.logFC.cohen\"       \"rank.logFC.cohen\"     \n#&gt; [10] \"mean.AUC\"              \"min.AUC\"               \"median.AUC\"           \n#&gt; [13] \"max.AUC\"               \"rank.AUC\"              \"mean.logFC.detected\"  \n#&gt; [16] \"min.logFC.detected\"    \"median.logFC.detected\" \"max.logFC.detected\"   \n#&gt; [19] \"rank.logFC.detected\"\n例如，根据簇1的mean.AUC作为排序\nCodechosen &lt;- marker.info[[\"1\"]]\nordered &lt;- chosen[order(chosen$mean.AUC, decreasing=TRUE),]\nhead(ordered[,1:4]) # showing basic stats only, for brevity.\n#&gt; DataFrame with 6 rows and 4 columns\n#&gt;       self.average other.average self.detected other.detected\n#&gt;          &lt;numeric&gt;     &lt;numeric&gt;     &lt;numeric&gt;      &lt;numeric&gt;\n#&gt; NKG7       4.39503     0.7486412      0.985366      0.3768438\n#&gt; GNLY       4.40275     0.3489056      0.956098      0.2010344\n#&gt; CTSW       2.60281     0.4618797      0.960976      0.2898534\n#&gt; HOPX       1.99060     0.1607469      0.907317      0.1160658\n#&gt; PRF1       2.22297     0.1659853      0.887805      0.1263180\n#&gt; KLRF1      1.60598     0.0379703      0.858537      0.0346691\nCodelibrary(scater)\nplotExpression(sce.pbmc, features=head(rownames(ordered)), \n    x=\"label\", colour_by=\"label\")\n\n\n\n\n\n\nFigure 11.1",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>conflicts_prefer(dplyr::filter)</span>"
    ]
  },
  {
    "objectID": "MarkerGeneDetection.html#效应值",
    "href": "MarkerGeneDetection.html#效应值",
    "title": "\n11  标记基因检测\n",
    "section": "\n11.2 效应值",
    "text": "11.2 效应值\nEffect sizes for pairwise comparisons\n\n11.2.1 AUC\nAUC 表示X簇中随机选择的观测值大于从其他簇中随机选择的观测值的概率。 值1对应于上调，其中X簇的所有值都大于其他簇的任何值；值0.5意味着分布的位置没有净差异；值0对应于下调。\nAUC 与 Wilcoxon ranked sum test（又名 Mann-Whitney U 检验）中的U-statistic 密切相关。\n\nCodechosen\n#&gt; DataFrame with 33694 rows and 19 columns\n#&gt;              self.average other.average self.detected other.detected\n#&gt;                 &lt;numeric&gt;     &lt;numeric&gt;     &lt;numeric&gt;      &lt;numeric&gt;\n#&gt; RP11-34P13.3            0   0.000000000             0    0.000000000\n#&gt; FAM138A                 0   0.000000000             0    0.000000000\n#&gt; OR4F5                   0   0.000000000             0    0.000000000\n#&gt; RP11-34P13.7            0   0.002147662             0    0.002845981\n#&gt; RP11-34P13.8            0   0.000383217             0    0.000375072\n#&gt; ...                   ...           ...           ...            ...\n#&gt; AC233755.2       0.000000    0.00000000     0.0000000      0.0000000\n#&gt; AC233755.1       0.000000    0.00000000     0.0000000      0.0000000\n#&gt; AC240274.1       0.012495    0.00779986     0.0146341      0.0086369\n#&gt; AC213203.1       0.000000    0.00000000     0.0000000      0.0000000\n#&gt; FAM231B          0.000000    0.00000000     0.0000000      0.0000000\n#&gt;              mean.logFC.cohen min.logFC.cohen median.logFC.cohen\n#&gt;                     &lt;numeric&gt;       &lt;numeric&gt;          &lt;numeric&gt;\n#&gt; RP11-34P13.3       0.00000000       0.0000000                  0\n#&gt; FAM138A            0.00000000       0.0000000                  0\n#&gt; OR4F5              0.00000000       0.0000000                  0\n#&gt; RP11-34P13.7      -0.04251980      -0.2062842                  0\n#&gt; RP11-34P13.8      -0.00996135      -0.0813788                  0\n#&gt; ...                       ...             ...                ...\n#&gt; AC233755.2          0.0000000          0.0000          0.0000000\n#&gt; AC233755.1          0.0000000          0.0000          0.0000000\n#&gt; AC240274.1          0.0640153         -0.1179          0.0486982\n#&gt; AC213203.1          0.0000000          0.0000          0.0000000\n#&gt; FAM231B             0.0000000          0.0000          0.0000000\n#&gt;              max.logFC.cohen rank.logFC.cohen  mean.AUC   min.AUC median.AUC\n#&gt;                    &lt;numeric&gt;        &lt;integer&gt; &lt;numeric&gt; &lt;numeric&gt;  &lt;numeric&gt;\n#&gt; RP11-34P13.3               0             5838  0.500000  0.500000        0.5\n#&gt; FAM138A                    0             5838  0.500000  0.500000        0.5\n#&gt; OR4F5                      0             5838  0.500000  0.500000        0.5\n#&gt; RP11-34P13.7               0             5838  0.498577  0.489362        0.5\n#&gt; RP11-34P13.8               0             5838  0.499812  0.498344        0.5\n#&gt; ...                      ...              ...       ...       ...        ...\n#&gt; AC233755.2          0.000000             5838  0.500000  0.500000   0.500000\n#&gt; AC233755.1          0.000000             5838  0.500000  0.500000   0.500000\n#&gt; AC240274.1          0.169635             1831  0.502997  0.489547   0.503794\n#&gt; AC213203.1          0.000000             5838  0.500000  0.500000   0.500000\n#&gt; FAM231B             0.000000             5838  0.500000  0.500000   0.500000\n#&gt;                max.AUC  rank.AUC mean.logFC.detected min.logFC.detected\n#&gt;              &lt;numeric&gt; &lt;integer&gt;           &lt;numeric&gt;          &lt;numeric&gt;\n#&gt; RP11-34P13.3       0.5      2978        -4.27124e-17       -3.20343e-16\n#&gt; FAM138A            0.5      2978        -4.27124e-17       -3.20343e-16\n#&gt; OR4F5              0.5      2978        -4.27124e-17       -3.20343e-16\n#&gt; RP11-34P13.7       0.5      2978        -3.45538e-01       -1.60237e+00\n#&gt; RP11-34P13.8       0.5      2978        -8.71800e-02       -7.47437e-01\n#&gt; ...                ...       ...                 ...                ...\n#&gt; AC233755.2    0.500000      2978        -4.27124e-17       -3.20343e-16\n#&gt; AC233755.1    0.500000      2978        -4.27124e-17       -3.20343e-16\n#&gt; AC240274.1    0.507317      1649         4.64243e-01       -8.43430e-01\n#&gt; AC213203.1    0.500000      2978        -4.27124e-17       -3.20343e-16\n#&gt; FAM231B       0.500000      2978        -4.27124e-17       -3.20343e-16\n#&gt;              median.logFC.detected max.logFC.detected rank.logFC.detected\n#&gt;                          &lt;numeric&gt;          &lt;numeric&gt;           &lt;integer&gt;\n#&gt; RP11-34P13.3                     0        3.20343e-16                2645\n#&gt; FAM138A                          0        3.20343e-16                2645\n#&gt; OR4F5                            0        3.20343e-16                2645\n#&gt; RP11-34P13.7                     0        1.60171e-16                2645\n#&gt; RP11-34P13.8                     0        3.20343e-16                2645\n#&gt; ...                            ...                ...                 ...\n#&gt; AC233755.2                0.000000        3.20343e-16                2645\n#&gt; AC233755.1                0.000000        3.20343e-16                2645\n#&gt; AC240274.1                0.613645        9.20433e-01                 835\n#&gt; AC213203.1                0.000000        3.20343e-16                2645\n#&gt; FAM231B                   0.000000        3.20343e-16                2645\nauc.only &lt;- chosen[,grepl(\"AUC\", colnames(chosen))]\nauc.only[order(auc.only$mean.AUC,decreasing=TRUE),]\n#&gt; DataFrame with 33694 rows and 5 columns\n#&gt;         mean.AUC    min.AUC median.AUC   max.AUC  rank.AUC\n#&gt;        &lt;numeric&gt;  &lt;numeric&gt;  &lt;numeric&gt; &lt;numeric&gt; &lt;integer&gt;\n#&gt; NKG7    0.963726   0.805885   0.988947  0.991803         1\n#&gt; GNLY    0.958868   0.877404   0.973347  0.974913         2\n#&gt; CTSW    0.932352   0.709079   0.966638  0.978873         2\n#&gt; HOPX    0.928138   0.780016   0.949129  0.953659         3\n#&gt; PRF1    0.924690   0.837420   0.940300  0.943902         5\n#&gt; ...          ...        ...        ...       ...       ...\n#&gt; RPS13   0.174413 0.00684690  0.0806435  0.695732       426\n#&gt; RPL26   0.170493 0.01334117  0.0724876  0.813720       104\n#&gt; RPL18A  0.169516 0.01090122  0.0760620  0.749735       264\n#&gt; RPL39   0.152346 0.00405525  0.0626341  0.774848       185\n#&gt; FTH1    0.147289 0.00121951  0.0639979  0.645732       766\n\n\n\n11.2.2 LogFC.cohen\nCohen’s d是一种标准化的对数倍数变化(log-fold change),\n正值表示该基因在簇中上调，负值表示下调，接近零的值表示差异不大。Cohen’s d大致类似于双样本t-检验的t-statistic\n\nCodecohen.only &lt;- chosen[,grepl(\"logFC.cohen\", colnames(chosen))]\ncohen.only[order(cohen.only$mean.logFC.cohen,decreasing=TRUE),]\n#&gt; DataFrame with 33694 rows and 5 columns\n#&gt;         mean.logFC.cohen min.logFC.cohen median.logFC.cohen max.logFC.cohen\n#&gt;                &lt;numeric&gt;       &lt;numeric&gt;          &lt;numeric&gt;       &lt;numeric&gt;\n#&gt; NKG7             4.84346        1.025337            5.84606         6.30987\n#&gt; GNLY             3.71574        1.793853            4.04410         4.36929\n#&gt; CTSW             2.96940        0.699433            3.19968         3.96973\n#&gt; GZMA             2.69683        0.399487            3.18392         3.44040\n#&gt; HOPX             2.67330        1.108548            2.92242         3.06690\n#&gt; ...                  ...             ...                ...             ...\n#&gt; FTH1            -2.28562        -5.19176          -2.533685       0.2995322\n#&gt; HLA-DRA         -2.39933        -7.13493          -2.032812       0.0146072\n#&gt; FTL             -2.40544        -5.82525          -1.285601       0.2569453\n#&gt; CST3            -2.56767        -7.92584          -0.950339       0.0336350\n#&gt; LYZ             -2.84045        -9.00815          -0.341198      -0.1797338\n#&gt;         rank.logFC.cohen\n#&gt;                &lt;integer&gt;\n#&gt; NKG7                   1\n#&gt; GNLY                   1\n#&gt; CTSW                   3\n#&gt; GZMA                   2\n#&gt; HOPX                   4\n#&gt; ...                  ...\n#&gt; FTH1                4362\n#&gt; HLA-DRA             6202\n#&gt; FTL                 5319\n#&gt; CST3                5608\n#&gt; LYZ                30966\n\n\n\n11.2.3 logFC.detected\n成对比较检测到表达值的细胞比例的对数倍数变化，这忽略了有关表达量的任何信息，只考虑是否检测到表达值。 正值表示与其他簇相比，X簇中表达基因的细胞比例更大。\n\nCodedetect.only &lt;- chosen[,grepl(\"logFC.detected\", colnames(chosen))]\ndetect.only[order(detect.only$mean.logFC.detected,decreasing=TRUE),]\n#&gt; DataFrame with 33694 rows and 5 columns\n#&gt;        mean.logFC.detected min.logFC.detected median.logFC.detected\n#&gt;                  &lt;numeric&gt;          &lt;numeric&gt;             &lt;numeric&gt;\n#&gt; KLRF1              4.80539           2.532196               5.33959\n#&gt; PRSS23             4.43836           2.354538               4.57967\n#&gt; XCL1               4.42946           1.398559               4.91134\n#&gt; XCL2               4.42099           1.304208               4.87151\n#&gt; SH2D1B             4.17329           0.804099               4.54737\n#&gt; ...                    ...                ...                   ...\n#&gt; MARCKS            -3.14645           -6.96050              -2.00000\n#&gt; RAB31             -3.23328           -6.63557              -2.58496\n#&gt; SLC7A7            -3.28244           -6.95262              -2.64295\n#&gt; RAB32             -3.42074           -6.72160              -3.32193\n#&gt; NCF2              -3.76139           -7.00693              -3.38863\n#&gt;        max.logFC.detected rank.logFC.detected\n#&gt;                 &lt;numeric&gt;           &lt;integer&gt;\n#&gt; KLRF1             6.50482                   1\n#&gt; PRSS23            5.98530                   2\n#&gt; XCL1              6.16993                   1\n#&gt; XCL2              6.21524                   1\n#&gt; SH2D1B            5.85007                   3\n#&gt; ...                   ...                 ...\n#&gt; MARCKS                  0               11805\n#&gt; RAB31                  -1               31423\n#&gt; SLC7A7                  0               11796\n#&gt; RAB32                   0               11805\n#&gt; NCF2                    0               11805",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>conflicts_prefer(dplyr::filter)</span>"
    ]
  },
  {
    "objectID": "MarkerGeneDetection.html#summary",
    "href": "MarkerGeneDetection.html#summary",
    "title": "\n11  标记基因检测\n",
    "section": "\n11.3 summary",
    "text": "11.3 summary\nmean，与其他簇的平均值相比，对于簇X，较大的均值（&gt;0 for the log-fold changes, &gt;0.5 for the AUCs）表示在簇X中该基因上调。\nmedian，与大多数 （&gt;50%） 其他簇相比，较大的值表示该基因在X簇中上调。对于异常值， 中位数比均值提供更大的稳健性robustness，而均值可能是可取的，也可能是不可取的。 一方面，如果只有少数成对比较具有较大的效应，则中位数可以避免夸大效应值; 另一方面，它也会通过忽略少数具有相反效果的成对比较来夸大效应值。\nminimum value，是鉴定上调基因最严格的。因为最小值是个大值表示与所有其他集群相比，该基因在X簇中上调。 相反，如果最小值很小（&lt;0 for the log-fold changes, &lt;0.5 for the AUCs），与至少一个其他簇相比，该基因在X簇中下调。\nmaximum value， 是识别上调基因最不严格的，因为与任何一个其他集群相比，如果在X簇中存在强烈上调，最大值可以是个大值。 相反，如果最大值很小，与所有其他集群相比，该基因在X簇中下调。\nminimum rank，是所有成对比较中每个基因的最小排序。具体来说，根据效应值降序，在每个成对比较中对基因进行排序，然后为每个基因报告所有成对比较中的最小排序。如果一个基因的最小秩很小，在至少一个簇X与另一个簇的成对比较中，它是最上调的基因之一。\n\nCodechosen &lt;- marker.info[[\"4\"]] # using another cluster, for some variety.\nordered &lt;- chosen[order(chosen$median.logFC.cohen,decreasing=TRUE),]\nhead(ordered[,1:4]) # showing basic stats only, for brevity.\n#&gt; DataFrame with 6 rows and 4 columns\n#&gt;        self.average other.average self.detected other.detected\n#&gt;           &lt;numeric&gt;     &lt;numeric&gt;     &lt;numeric&gt;      &lt;numeric&gt;\n#&gt; LYZ         4.97589      2.188256      1.000000       0.657832\n#&gt; S100A9      4.94461      2.059524      1.000000       0.705775\n#&gt; FTL         5.58358      4.140706      1.000000       0.961428\n#&gt; S100A8      4.61729      1.834030      1.000000       0.639031\n#&gt; CTSS        3.28383      1.568992      1.000000       0.630574\n#&gt; CSTA        1.76876      0.685007      0.982143       0.337978\n\n\n\nCodeplotExpression(sce.pbmc, features=head(rownames(ordered)), \n    x=\"label\", colour_by=\"label\")\n\n\n\n\n\n\nFigure 11.2\n\n\n\n\n\nCodeordered &lt;- chosen[order(chosen$rank.logFC.cohen),]\ntop.ranked &lt;- ordered[ordered$rank.logFC.cohen &lt;= 5,]  # 最小排序小于或等于 5\ntop.ranked$rank.logFC.cohen\n#&gt;        S100A8        S100A4         RPS27        MALAT1           LYZ \n#&gt;             1             1             1             1             1 \n#&gt;        TYROBP          CTSS         RPL31        EEF1B2           LTB \n#&gt;             1             2             2             2             2 \n#&gt;         RPS21           FTL        S100A9          RPSA          GPX1 \n#&gt;             2             2             3             3             3 \n#&gt;         RPS29         RPLP1         RPL17          CST3       S100A11 \n#&gt;             3             3             3             3             4 \n#&gt;        RPS27A        RPS15A        MT-ND2        FCER1G         RPS12 \n#&gt;             4             4             4             5             5 \n#&gt;        RPL36A RP11-1143G9.4          IL32        RPL23A \n#&gt;             5             5             5             5\nrownames(top.ranked)\n#&gt;  [1] \"S100A8\"        \"S100A4\"        \"RPS27\"         \"MALAT1\"       \n#&gt;  [5] \"LYZ\"           \"TYROBP\"        \"CTSS\"          \"RPL31\"        \n#&gt;  [9] \"EEF1B2\"        \"LTB\"           \"RPS21\"         \"FTL\"          \n#&gt; [13] \"S100A9\"        \"RPSA\"          \"GPX1\"          \"RPS29\"        \n#&gt; [17] \"RPLP1\"         \"RPL17\"         \"CST3\"          \"S100A11\"      \n#&gt; [21] \"RPS27A\"        \"RPS15A\"        \"MT-ND2\"        \"FCER1G\"       \n#&gt; [25] \"RPS12\"         \"RPL36A\"        \"RP11-1143G9.4\" \"IL32\"         \n#&gt; [29] \"RPL23A\"\nplotGroupedHeatmap(sce.pbmc, features=rownames(top.ranked), group=\"label\", \n    center=TRUE, zlim=c(-3, 3))\n\n\n\n\n\n\nFigure 11.3\n\n\n\n\n\nCode# Omitting the decreasing=TRUE to focus on negative effects.\nordered &lt;- chosen[order(chosen$median.logFC.cohen),1:4]  #检查一些升序靠前的基因，看看与其他簇相比是否有任何一致的下调\nhead(ordered)\n#&gt; DataFrame with 6 rows and 4 columns\n#&gt;       self.average other.average self.detected other.detected\n#&gt;          &lt;numeric&gt;     &lt;numeric&gt;     &lt;numeric&gt;      &lt;numeric&gt;\n#&gt; HLA-B     4.013806      4.438053      1.000000       0.971760\n#&gt; HLA-E     1.789158      2.093695      0.982143       0.871183\n#&gt; RPSA      2.685950      2.563913      1.000000       0.829648\n#&gt; HLA-C     3.116699      3.527693      1.000000       0.934941\n#&gt; BIN2      0.410471      0.667019      0.464286       0.456757\n#&gt; RAC2      0.823508      0.982662      0.714286       0.630389",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>conflicts_prefer(dplyr::filter)</span>"
    ]
  },
  {
    "objectID": "MarkerGeneDetection.html#full-effects",
    "href": "MarkerGeneDetection.html#full-effects",
    "title": "\n11  标记基因检测\n",
    "section": "\n11.4 full effects",
    "text": "11.4 full effects\n设置 full.stats=TRUE 获取涉及特定聚类的所有成对比较的效应值\n\nCode# cluster 4 vs any other cluster\nmarker.info &lt;- scoreMarkers(sce.pbmc, colLabels(sce.pbmc), full.stats=TRUE)\nchosen &lt;- marker.info[[\"4\"]]\nchosen$full.AUC\n#&gt; DataFrame with 33694 rows and 15 columns\n#&gt;                      1         2         3         5         6         7\n#&gt;              &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt;\n#&gt; RP11-34P13.3       0.5  0.500000  0.500000  0.500000       0.5       0.5\n#&gt; FAM138A            0.5  0.500000  0.500000  0.500000       0.5       0.5\n#&gt; OR4F5              0.5  0.500000  0.500000  0.500000       0.5       0.5\n#&gt; RP11-34P13.7       0.5  0.499016  0.499076  0.497326       0.5       0.5\n#&gt; RP11-34P13.8       0.5  0.500000  0.500000  0.500000       0.5       0.5\n#&gt; ...                ...       ...       ...       ...       ...       ...\n#&gt; AC233755.2    0.500000  0.500000  0.500000  0.500000     0.500       0.5\n#&gt; AC233755.1    0.500000  0.500000  0.500000  0.500000     0.500       0.5\n#&gt; AC240274.1    0.492683  0.496063  0.494455  0.495989     0.496       0.5\n#&gt; AC213203.1    0.500000  0.500000  0.500000  0.500000     0.500       0.5\n#&gt; FAM231B       0.500000  0.500000  0.500000  0.500000     0.500       0.5\n#&gt;                      8         9        10        11        12        13\n#&gt;              &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt;\n#&gt; RP11-34P13.3  0.500000  0.500000       0.5  0.500000       0.5       0.5\n#&gt; FAM138A       0.500000  0.500000       0.5  0.500000       0.5       0.5\n#&gt; OR4F5         0.500000  0.500000       0.5  0.500000       0.5       0.5\n#&gt; RP11-34P13.7  0.498843  0.495033       0.5  0.489362       0.5       0.5\n#&gt; RP11-34P13.8  0.498843  0.498344       0.5  0.500000       0.5       0.5\n#&gt; ...                ...       ...       ...       ...       ...       ...\n#&gt; AC233755.2    0.500000  0.500000  0.500000  0.500000  0.500000  0.500000\n#&gt; AC233755.1    0.500000  0.500000  0.500000  0.500000  0.500000  0.500000\n#&gt; AC240274.1    0.496528  0.496689  0.494233  0.489362  0.496774  0.496988\n#&gt; AC213203.1    0.500000  0.500000  0.500000  0.500000  0.500000  0.500000\n#&gt; FAM231B       0.500000  0.500000  0.500000  0.500000  0.500000  0.500000\n#&gt;                     14        15        16\n#&gt;              &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt;\n#&gt; RP11-34P13.3       0.5       0.5       0.5\n#&gt; FAM138A            0.5       0.5       0.5\n#&gt; OR4F5              0.5       0.5       0.5\n#&gt; RP11-34P13.7       0.5       0.5       0.5\n#&gt; RP11-34P13.8       0.5       0.5       0.5\n#&gt; ...                ...       ...       ...\n#&gt; AC233755.2         0.5  0.500000       0.5\n#&gt; AC233755.1         0.5  0.500000       0.5\n#&gt; AC240274.1         0.5  0.482143       0.5\n#&gt; AC213203.1         0.5  0.500000       0.5\n#&gt; FAM231B            0.5  0.500000       0.5\n\n\n假设我们想确定将簇 4 与其他具有高 LYZ 表达的簇区分开来的基因。 对相关比较进行取子集，并对汇总统计量进行排序，以获得该子集中标记基因的排名。 这使我们能够轻松地表征密切相关的集群之间的细微差异。 为了说明这一点，与其他 高LYZ 簇相比，我们使用最小的排名computeMinRank()来识别簇 4 中排名靠前的 DE 基因。\n\nCodelyz.high &lt;- c(\"4\", \"6\", \"8\", \"9\", \"14\") # based on inspection of the previous Figure.\nsubset &lt;- chosen$full.AUC[,colnames(chosen$full.AUC) %in% lyz.high]\nto.show &lt;- subset[computeMinRank(subset) &lt;= 10,]\nto.show\n#&gt; DataFrame with 27 rows and 4 columns\n#&gt;                 6         8         9        14\n#&gt;         &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt;\n#&gt; CTSS     0.942286  0.195230  0.203288  0.208138\n#&gt; S100A12  0.885571  0.204034  0.605428  0.287178\n#&gt; S100A8   0.898143  0.156457  0.639368  0.112705\n#&gt; RPS27    0.906286  0.943576  0.905866  0.949063\n#&gt; RPS27A   0.810000  0.862021  0.832663  0.932084\n#&gt; ...           ...       ...       ...       ...\n#&gt; FTL      0.941857  0.115369  0.118023 0.0954333\n#&gt; RPL13A   0.637143  0.858466  0.813683 0.9396956\n#&gt; RPL3     0.383143  0.819651  0.764250 0.8934426\n#&gt; MT-ND2   0.922143  0.576100  0.536128 0.7391686\n#&gt; MT-ND3   0.906857  0.432746  0.514487 0.5386417\n\n\n\nCodeplotGroupedHeatmap(sce.pbmc[,colLabels(sce.pbmc) %in% lyz.high],\n    features=rownames(to.show), group=\"label\", center=TRUE, zlim=c(-3, 3))\n\n\n\n\n\n\nFigure 11.4\n\n\n\n\n自定义汇总统计量例如，对于相对于其他集群的某个百分比（例如80%）上调的标记物感兴趣。\n\nCodestat &lt;- MatrixGenerics::rowQuantiles(as.matrix(chosen$full.AUC), p=0.2)\nchosen[order(stat, decreasing=TRUE), 1:4] \n#&gt; DataFrame with 33694 rows and 4 columns\n#&gt;         self.average other.average self.detected other.detected\n#&gt;            &lt;numeric&gt;     &lt;numeric&gt;     &lt;numeric&gt;      &lt;numeric&gt;\n#&gt; S100A12      1.94300      0.609079      0.928571       0.263675\n#&gt; JUND         1.42774      0.619368      0.910714       0.442422\n#&gt; S100A9       4.94461      2.059524      1.000000       0.705775\n#&gt; VCAN         1.63794      0.436597      0.875000       0.222359\n#&gt; S100A8       4.61729      1.834030      1.000000       0.639031\n#&gt; ...              ...           ...           ...            ...\n#&gt; RPL23A       3.96991       3.74428             1       0.905175\n#&gt; RPSA         2.68595       2.56391             1       0.829648\n#&gt; HLA-C        3.11670       3.52769             1       0.934941\n#&gt; RPS29        4.57983       4.27407             1       0.919797\n#&gt; HLA-B        4.01381       4.43805             1       0.971760",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>conflicts_prefer(dplyr::filter)</span>"
    ]
  },
  {
    "objectID": "MarkerGeneDetection.html#log-fold-change-threshold",
    "href": "MarkerGeneDetection.html#log-fold-change-threshold",
    "title": "\n11  标记基因检测\n",
    "section": "\n11.5 log-fold change threshold",
    "text": "11.5 log-fold change threshold\n设置 lfc= 来计算相对于对数倍数变化阈值的效应值\n\nCodemarker.info.lfc &lt;- scoreMarkers(sce.pbmc, colLabels(sce.pbmc), lfc=2)\nchosen2 &lt;- marker.info.lfc[[\"5\"]] \nchosen2 &lt;- chosen2[order(chosen2$mean.AUC, decreasing=TRUE),]\nchosen2[,c(\"self.average\", \"other.average\", \"mean.AUC\")]\n#&gt; DataFrame with 33694 rows and 3 columns\n#&gt;            self.average other.average  mean.AUC\n#&gt;               &lt;numeric&gt;     &lt;numeric&gt; &lt;numeric&gt;\n#&gt; CCL5            3.81358      1.047986  0.747609\n#&gt; NKG7            3.17038      0.830285  0.654736\n#&gt; IL32            3.29770      1.076383  0.633969\n#&gt; GZMA            1.92877      0.426848  0.454187\n#&gt; TRAC            2.25881      0.848025  0.434530\n#&gt; ...                 ...           ...       ...\n#&gt; AC233755.2   0.00000000    0.00000000         0\n#&gt; AC233755.1   0.00000000    0.00000000         0\n#&gt; AC240274.1   0.00942441    0.00800457         0\n#&gt; AC213203.1   0.00000000    0.00000000         0\n#&gt; FAM231B      0.00000000    0.00000000         0\n\n\n\nCodeplotDots(sce.pbmc, rownames(chosen2)[1:10], group=\"label\")",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>conflicts_prefer(dplyr::filter)</span>"
    ]
  },
  {
    "objectID": "MarkerGeneDetection.html#blocking-factors",
    "href": "MarkerGeneDetection.html#blocking-factors",
    "title": "\n11  标记基因检测\n",
    "section": "\n11.6 blocking factors",
    "text": "11.6 blocking factors\n变异因素（例如，批次效应、性别差异）\nblock=\n\nCode#--- loading ---#\nlibrary(scRNAseq)\nsce.416b &lt;- LunSpikeInData(which=\"416b\") \nsce.416b$block &lt;- factor(sce.416b$block)\n\n#--- gene-annotation ---#\nlibrary(AnnotationHub)\nens.mm.v97 &lt;- AnnotationHub()[[\"AH73905\"]]\nrowData(sce.416b)$ENSEMBL &lt;- rownames(sce.416b)\nrowData(sce.416b)$SYMBOL &lt;- mapIds(ens.mm.v97, keys=rownames(sce.416b),\n    keytype=\"GENEID\", column=\"SYMBOL\")\nrowData(sce.416b)$SEQNAME &lt;- mapIds(ens.mm.v97, keys=rownames(sce.416b),\n    keytype=\"GENEID\", column=\"SEQNAME\")\n\nlibrary(scater)\nrownames(sce.416b) &lt;- uniquifyFeatureNames(rowData(sce.416b)$ENSEMBL, \n    rowData(sce.416b)$SYMBOL)\n\n#--- quality-control ---#\nmito &lt;- which(rowData(sce.416b)$SEQNAME==\"MT\")\nstats &lt;- perCellQCMetrics(sce.416b, subsets=list(Mt=mito))\nqc &lt;- quickPerCellQC(stats, percent_subsets=c(\"subsets_Mt_percent\",\n    \"altexps_ERCC_percent\"), batch=sce.416b$block)\nsce.416b &lt;- sce.416b[,!qc$discard]\n\n#--- normalization ---#\nlibrary(scran)\nsce.416b &lt;- computeSumFactors(sce.416b)\nsce.416b &lt;- logNormCounts(sce.416b)\n\n#--- variance-modelling ---#\ndec.416b &lt;- modelGeneVarWithSpikes(sce.416b, \"ERCC\", block=sce.416b$block)\nchosen.hvgs &lt;- getTopHVGs(dec.416b, prop=0.1)\n\n#--- batch-correction ---#\nlibrary(limma)\nassay(sce.416b, \"corrected\") &lt;- removeBatchEffect(logcounts(sce.416b), \n    design=model.matrix(~sce.416b$phenotype), batch=sce.416b$block)\n\n#--- dimensionality-reduction ---#\nsce.416b &lt;- runPCA(sce.416b, ncomponents=10, subset_row=chosen.hvgs,\n    exprs_values=\"corrected\", BSPARAM=BiocSingular::ExactParam())\n\nset.seed(1010)\nsce.416b &lt;- runTSNE(sce.416b, dimred=\"PCA\", perplexity=10)\n\n#--- clustering ---#\nmy.dist &lt;- dist(reducedDim(sce.416b, \"PCA\"))\nmy.tree &lt;- hclust(my.dist, method=\"ward.D2\")\n\nlibrary(dynamicTreeCut)\nmy.clusters &lt;- unname(cutreeDynamic(my.tree, distM=as.matrix(my.dist),\n    minClusterSize=10, verbose=0))\ncolLabels(sce.416b) &lt;- factor(my.clusters)\n\n\n\nCodem.out &lt;- scoreMarkers(sce.416b, colLabels(sce.416b), block=sce.416b$block)\n\n\n在每个批次内进行成对比较，抵消了任何批次效应。然后使用加权平均数对各批次的效应值进行平均以获得每个成对比较的单个值，该加权平均数考虑了每个批次中参与成对比较的细胞数。对每个簇内外的平均对数表达和检测到的细胞比例进行了类似的校正。\n\nCodedemo &lt;- m.out[[\"1\"]] \nordered &lt;- demo[order(demo$median.logFC.cohen, decreasing=TRUE),]\nordered[,1:4]\n#&gt; DataFrame with 46604 rows and 4 columns\n#&gt;         self.average other.average self.detected other.detected\n#&gt;            &lt;numeric&gt;     &lt;numeric&gt;     &lt;numeric&gt;      &lt;numeric&gt;\n#&gt; Myh11        4.03436      0.861019      0.988132       0.303097\n#&gt; Cd200r3      7.97667      3.524762      0.977675       0.624507\n#&gt; Pi16         6.27654      2.644421      0.957126       0.530395\n#&gt; Actb        15.48533     14.808584      1.000000       1.000000\n#&gt; Ctsd        11.61247      9.130141      1.000000       1.000000\n#&gt; ...              ...           ...           ...            ...\n#&gt; Spc24      0.4772577       5.03548      0.222281       0.862153\n#&gt; Ska1       0.0787421       4.43426      0.118743       0.773950\n#&gt; Pimreg     0.5263611       5.35494      0.258150       0.910706\n#&gt; Birc5      1.5580536       7.07230      0.698746       0.976929\n#&gt; Ccna2      0.9664521       6.55243      0.554104       0.948520\n\n\n\nCodeplotExpression(sce.416b, features=rownames(ordered)[1:6],\n    x=\"label\", colour_by=\"block\")\n\n\n\n\n\n\nFigure 11.5\n\n\n\n\n该参数block=适用于上面显示的所有效应值，并且对批次之间对数倍数变化或方差的差异具有鲁棒性。 但是，它假定每对簇至少存在于一个批次中。如果来自两个簇的细胞从未在同一批次中同时出现，则无法进行关联的成对比较，并且在计算汇总统计量时会忽略该比较。",
    "crumbs": [
      "Single-Cell Analysis with Bioconductor",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>conflicts_prefer(dplyr::filter)</span>"
    ]
  }
]