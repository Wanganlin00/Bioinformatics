```{r}
#| echo: false
conflicts_prefer(GenomicRanges::setdiff)
conflicts_prefer(dplyr::filter)
```

# Normalization

在单细胞RNA测序数据中经常观察到文库之间测序覆盖率的系统差异, 它们通常源于跨细胞cDNA捕获或PCR扩增效率的技术差异，这归因于难以用最少的起始材料实现一致的文库制备。 归一化旨在消除这些差异，使它们不会干扰细胞之间表达谱的比较。 这确保了细胞群中观察到的任何异质性或差异表达都是由生物学驱动的，而不是技术偏差。

我们将主要关注缩放归一化，这是最简单和最常用的一类归一化策略。 这涉及将每个细胞的所有计数除以细胞特定的比例因子，通常称为"大小因子(size factor)"。

假设任何细胞特异性偏差（如捕获或扩增效率）都会通过缩放该细胞的预期平均计数来平等地影响所有基因。 每个细胞的大小因子表示该细胞中相对偏差的估计值，因此将其计数除以大小因子应消除该偏差。 然后，生成的"归一化表达式值"可用于下游分析，如聚类和降维。

```{r}
#| label: dataset-工作流第2章
#| cache: true

#--- loading ---#
library(scRNAseq)
sce.zeisel <- ZeiselBrainData()

library(scater)
sce.zeisel <- aggregateAcrossFeatures(sce.zeisel, 
    id=sub("_loc[0-9]+$", "", rownames(sce.zeisel)))

#--- gene-annotation ---#
library(org.Mm.eg.db)
rowData(sce.zeisel)$Ensembl <- mapIds(org.Mm.eg.db, 
    keys=rownames(sce.zeisel), keytype="SYMBOL", column="ENSEMBL")

#--- quality-control ---#
stats <- perCellQCMetrics(sce.zeisel, subsets=list(
    Mt=rowData(sce.zeisel)$featureType=="mito"))
qc <- quickPerCellQC(stats, percent_subsets=c("altexps_ERCC_percent", 
    "subsets_Mt_percent"))
sce.zeisel <- sce.zeisel[,!qc$discard]
```

```{r sce.zeisel}
sce.zeisel 
```

## 库大小归一化

库大小归一化是执行缩放归一化的最简单策略。我们将文库大小定义为每个细胞所有基因的计数总和，假设其期望值随任何细胞特异性偏差而缩放。然后，每个细胞的"文库大小因子"与其文库大小成正比，其中定义了比例常数，使得所有单元的平均大小因子等于 1。 此定义可确保归一化表达式值与原始计数的比例相同，这对于解释很有用， 尤其是在处理转换后的数据。

```{r}
library(scater)
lib.sf.zeisel <- librarySizeFactors(sce.zeisel)
summary(lib.sf.zeisel)
```

在Zeisel大脑数据中，细胞库大小因子在细胞之间相差多达 10 倍 @fig-sizefactor-histogram 。

```{r}
#| label: fig-sizefactor-histogram
#| fig-cap: "Zeisel 大脑数据集中从文库大小得出的缩放因子分布"
hist(log10(lib.sf.zeisel), xlab="Log10[Size factor]", col='grey80')
```

## 反卷积归一化 Normalization by deconvolution

当样本之间存在任何不平衡的差异表达（ differential expression）时，就会出现成分偏差。消除成分偏差是批量RNA测序数据分析中一个经过充分研究的问题。可以使用 [*DESeq2*](https://bioconductor.org/packages/3.18/DESeq2) 包中的函数`estimateSizeFactorsFromMatrix()`或 [*edgeR*](https://bioconductor.org/packages/3.18/edgeR) 包中的函数`calcNormFactors()`执行归一化。假设细胞之间大多数基因并非差异表达，假设两个细胞之间非DE多数基因的计数大小的任何系统性差异代表用于计算其去除的适当大小因子的偏差。

然而，由于低计数和零计数占主导地位，单细胞数据对于这些批量归一化方法来说可能是个问题。Pool-based size factors are then "deconvolved" into cell-based factors for normalization of each cell's expression profile.基于类的大小因子"去卷积"为基于细胞的大小因子，以标准化每个细胞的表达谱。这是使用 [*scran*](https://bioconductor.org/packages/3.18/scran) 中的函数`calculateSumFactors()`执行的，如下所示。

```{r}
library(scran)
set.seed(100)
clust.zeisel <- quickCluster(sce.zeisel) 
table(clust.zeisel)
```

我们使用预聚类步骤`quickCluster()`，其中每个聚类中的细胞被单独归一化，并且大小因子被重新缩放以在聚类之间具有可比性。

```{r}
#| cache: true
deconv.sf.zeisel <- calculateSumFactors(sce.zeisel, cluster=clust.zeisel)
summary(deconv.sf.zeisel)
```

我们看到 @fig-deconv-sf-library 反卷积大小因子表现出与库大小因子细胞特定类型的偏差。

```{r}
#| label: fig-deconv-sf-library
#| fig-cap: "Zeisel 大脑数据集中每个细胞的反卷积大小因子，与从文库大小得出的等效大小因子进行比较。红线对应于两个大小因子之间的同一性。"
tibble(x=lib.sf.zeisel, y=deconv.sf.zeisel) |> 
  ggplot(aes(x,y))+
  scale_x_log10()+
  scale_y_log10()+
  geom_point(color=as.integer(factor(sce.zeisel$level1class)))+
  geom_abline(slope = 1,intercept = 0,color="red",linewidth=1.5)+
  xlab("Library size factor")+
  ylab("Deconvolution size factor")

```

## Normalization by spike-ins

加标归一化基于向每个细胞中添加相同数量的加标 RNA 的假设. 加标转录本覆盖率的系统性差异只能归因于细胞特异性偏差，如捕获效率或测序深度。 为了消除这些偏差，我们通过缩放"spike-in大小因子"均衡细胞之间的spike-in覆盖率。

与之前的方法相比，加标归一化不需要对系统的生物学特性进行假设（即，缺乏许多DE基因）。 相反，它假设spike-in转录本 （i） 以恒定水平添加到每个细胞中，并且 （ii） 以与内源性基因相同的相对方式对偏差做出反应。

实际上，如果对单个细胞的总RNA含量的差异感兴趣，并且必须在下游分析中保留，则应使用加标归一化。 对于给定的细胞，其内源性RNA总量的增加不会增加其spike-in大小因子。 这确保了总RNA含量对整个群体表达的影响不会在放大时被消除。 相比之下，上述其他归一化方法将简单地将总RNA含量的任何变化解释为偏倚的一部分并将其消除。

```{r}
#| cache: true
#| label: dataset-数据集涉及用不同亲和力的 T 细胞受体配体刺激后 T 细胞活化
library(scRNAseq)
library(ensembldb)
sce.richard <- RichardTCellData()
sce.richard <- sce.richard[,sce.richard$`single cell quality`=="OK"]
sce.richard
```

```{r}
sce.richard <- computeSpikeFactors(sce.richard, "ERCC")
summary(sizeFactors(sce.richard))
```

```{r}
#| label: fig-spike-in-sf
#| fig-cap: "来自加标归一化的大小因子，与 T 细胞数据集中所有细胞的文库大小因子作图。每个图代表不同的配体处理，每个点都是一个细胞，根据刺激的时间着色。"
data.frame(
    DeconvFactor=calculateSumFactors(sce.richard),
    SpikeFactor=sizeFactors(sce.richard),
    Stimulus=sce.richard$stimulus, 
    Time=sce.richard$time
) |> 
ggplot(aes(x=DeconvFactor, y=SpikeFactor, color=Time)) +
    geom_point() + facet_wrap(~Stimulus) + scale_x_log10() + 
    scale_y_log10() + geom_abline(intercept=0, slope=1, color="red")
```

我们观察到每个处理条件下的加标大小因子和反卷积大小因子之间存在正相关关系（@fig-spike-in-sf），表明它们在测序深度和捕获效率方面捕获了类似的技术偏差。 然而，我们还观察到，增加对 T 细胞受体的刺激 - 就亲和力或时间增加而言 - 导致相对于文库大小因子的加标因子降低。 这与刺激过程中生物合成活性和总RNA含量的增加一致，这降低了每个文库中的相对峰值覆盖率（从而降低了加标大小因子），但增加了内源性基因的覆盖率（从而增加了文库大小因子）。

这两组大小因子之间的差异对下游解释有实际影响。 如果将加标大小因子应用于计数，则未刺激细胞中的表达值将放大，而刺激细胞中的表达将缩小。 但是，如果使用反卷积大小因子，则会出现相反的情况。 当我们在归一化策略之间切换时，这可能表现为不同条件之间 DE 的大小和方向的变化，如 @fig-Malat1 所示

```{r}
#| cache: true
#| label: fig-Malat1
#| fig-cap: "使用反卷积大小因子（左）或峰值大小因子（右）进行归一化后 Malat1 的对数归一化表达值分布。细胞按配体亲和力分层，并按刺激后的时间着色"
sce.richard.deconv <- logNormCounts(sce.richard, size_factors=calculateSumFactors(sce.richard))
sce.richard.spike <- logNormCounts(sce.richard, size_factors=sizeFactors(sce.richard))

gridExtra::grid.arrange(
    plotExpression(sce.richard.deconv, x="stimulus", 
        colour_by="time", features="ENSMUSG00000092341") + 
        theme(axis.text.x = element_text(angle = 90)) + 
        ggtitle("After deconvolution"),
    plotExpression(sce.richard.spike, x="stimulus", 
        colour_by="time", features="ENSMUSG00000092341") + 
        theme(axis.text.x = element_text(angle = 90)) +
        ggtitle("After spike-in normalization"),
    ncol=2
)
```

总RNA含量是否相关，因此，归一化策略的选择取决于生物学假设。 在大多数情况下，总RNA含量的变化并不有趣，可以通过应用文库大小或反卷积因子来归一化。 然而，如果总RNA的差异与感兴趣的生物学过程有关，例如细胞周期活性或T细胞活化，这可能并不总是合适的。 峰值归一化将保留这些差异，以便生物组之间表达的任何变化都具有正确的符号。

**然而！**无论我们是否关心总RNA含量，使用加标大小因子对加标转录本进行归一化至关重要。 从内源性基因计数计算的大小因子不应应用于刺突转录本，正是因为前者捕获了后者没有经历过的总 RNA 含量差异。 尝试使用基于基因的大小因子对加标计数进行归一化将导致过度归一化和不正确的定量。 因此，如果需要归一化的加标数据，我们必须为加标转录本计算一组单独的大小因子;这是由 `modelGeneVarWithSpikes()`等函数自动执行的。

## 缩放和对数变换

The log-transformation is useful as differences in the log-values represent log-fold changes in expression. 这在基于欧几里得距离的下游过程中非常重要，其中包括多种形式的聚类和降维。 通过对数转换数据进行操作，我们确保这些程序根据表达的对数折叠变化测量细胞之间的距离。

```{r}
#| cache: true
set.seed(100)
clust.zeisel <- quickCluster(sce.zeisel) 
sce.zeisel <- computeSumFactors(sce.zeisel, cluster=clust.zeisel, min.mean=0.1)
sce.zeisel <- logNormCounts(sce.zeisel)
assayNames(sce.zeisel)
```
