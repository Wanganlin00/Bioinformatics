# 差异表达基因分析

```{r include=FALSE}
conflicts_prefer(GenomicRanges::setdiff)
```

## Assays

### 对数计数矩阵

```{r}
# 读取计数矩阵 log2(count+1)
raw_logCount <- read_tsv("data/TCGA-CHOL.htseq_counts.tsv")

# 60488 个gene ×  45 个sample
```

### 基因编码文件

```{r}
# 基因编码  BiocManager::install("rtracklayer")
gtf_v22 <- rtracklayer::import('data/gencode.v22.annotation.gtf.gz') |>
 as_tibble()
write_csv(gtf_v22,file = "data/gtf_v22.csv")
```

```{r}
# 提取mRNA相关基因
gtf_mrna_v22 <- dplyr::select(gtf_v22,
                              c("gene_id","gene_type", "gene_name"))|> 
    dplyr::filter(gene_type == "protein_coding") |>  
    distinct()

gtf_mrna_v22 
```

### 比对基因id

```{r}
# 根据注释文件把Ensembl ID转换为gene ID
gene_logCount <- raw_logCount |> 
  inner_join(gtf_mrna_v22, by = c("Ensembl_ID" = "gene_id")) |> 
  dplyr::select(gene_name, starts_with("TCGA") )

gene_logCount
write_csv(gene_logCount,"data/gene_logCount.csv")
```

基因名是有重复的，其中有100个出现了2次，有1个出现了3次

```{r}
gene_logCount |> summarise(n=n(),.by = gene_name) |> 
    dplyr::filter(n==1) 
gene_logCount |> summarise(n=n(),.by = gene_name) |> 
    dplyr::filter(n==2) 
gene_logCount |> summarise(n=n(),.by = gene_name) |> 
    dplyr::filter(n==3) 
```

先去对数（ log2(Count+1））

```{r}
gene_Count <- gene_logCount |> 
 mutate_if(is.numeric,~2^(.)-1)
gene_Count
```

根据基因id分组，重复，则取平均值去重，去掉重复的102行

```{r}
Counts <- gene_Count |> 
 group_by(gene_name) |> 
 summarise_all(mean,na.rm=TRUE)

Counts |> summarise(n=n(),.by = gene_name) |> 
    dplyr::filter(n==1) 
```

提取lncRNA、miRNA等也是类似的操作

::: {#summarise_all .callout-note}
```{r}
tibble(
    x=c(1:5),
    y=c(3:7),
    g=factor(c('A','B','A','C','C'))
)|> 
  group_by(g) |> summarise_all(list("均数"=mean, "中位数"=median))
```
:::

## Sample metadata

### 表型注释文件

```{r}
#首先载入下载好胆管癌的样本信息文件

phenotype_file <- read_tsv('data/TCGA-CHOL.GDC_phenotype.tsv')

phenotype_file[1,]
phenotypeID <- phenotype_file$submitter_id.samples

# 71 个sample × 122 个样本变量
```

```{r}
# 选择样本

table(phenotype_file$neoplasm_histologic_grade)# 组织学分级
table(phenotype_file$tumor_stage.diagnoses) #分期
```

```{r}
## 找到所需列变量的索引，最好用正则表达式
col_index <- grep("(neoplasm_histologic_grade)|(tumor_stage.diagnoses)",colnames(phenotype_file))
col_index

# 或者
col_index_logical <- str_detect(colnames(phenotype_file),"(neoplasm_histologic_grade)|(tumor_stage.diagnoses)")
col_index_logical

col_index <- which(col_index_logical==TRUE)
col_index
```

```{r}
# 取出需要的列的样本信息
hs <- phenotype_file[,col_index[1:2]]
hs <- cbind(phenotypeID,hs)
head(hs)
```

```{r}
# 挑选组织学为G2或G3和分期为i或ii期的样本，数量多

sample <- dplyr::filter(hs,neoplasm_histologic_grade=="G2"|neoplasm_histologic_grade=="G3" ) |> 
 dplyr::filter(tumor_stage.diagnoses=="stage i"|tumor_stage.diagnoses=="stage ii")

head(sample)
```

到这里，就从71个样本中挑出了45个样本，但是，我们只要这45个样本中成对样本的表达数据，即同一个病人既有癌旁~~正常~~细胞的表达蛋白，又有肿瘤细胞的异常表达蛋白。

### 成对样本

```{r}
# 前缀1~12字符

sample <- sample |> mutate(patient_id = str_sub(sample[,1],1,12)) |> 
 group_by(patient_id) |> mutate(n = n()) |> ungroup()

sample <- dplyr::filter(sample,n==2) |> dplyr::select(-n)

sample # 筛选出 15对 成对数据
```

并且要匹配到`Counts` 中出现的45个样本中的成对样本

```{r}
# 表达矩阵  
patient_of_counts <- str_sub(colnames(Counts),1,12)
table(patient_of_counts)==2

paired_patient <- table(patient_of_counts)[table(patient_of_counts)==2]|> 
 names()  # 筛选出9对成对数据
```

取`sample`和`paired_patient`的交集，8对成对数据

```{r}
# 取交集
final_patient <- lubridate::intersect(sample$patient_id,paired_patient)
final_patient

sample <- sample |> 
    dplyr::filter(sample$patient_id %in% final_patient) |> 
    dplyr::select(-patient_id)|>
    arrange(phenotypeID)|> 
    dplyr::rename("grade"="neoplasm_histologic_grade",
                  "stage"="tumor_stage.diagnoses")

sample

exprCounts <-cbind(Counts[,1], Counts[,patient_of_counts %in% final_patient])
exprCounts <-exprCounts[,order(colnames(exprCounts))]
head(exprCounts)


# 去除所有样本都不表达的基因
exprCounts <- exprCounts %>%
    mutate(rowsum = apply(exprCounts[,-1],1,sum)) %>%
    dplyr::filter(rowsum!=0)

exprCounts <- exprCounts |> 
    column_to_rownames(var = "gene_name") |> 
    dplyr::select(-rowsum)

```

```{r}
# 检查计数矩阵和列数据，看看它们在样本顺序方面是否一致。
colnames(exprCounts)
sample$phenotypeID

all(sample$phenotypeID %in% colnames(exprCounts))
all(sample$phenotypeID == colnames(exprCounts))
```

## 构造DEG实例

```{r}
dim(exprCounts)
dim(sample)
exprCounts=ceiling(exprCounts)
```

根据TCGA样本的命名可以区分正常组织和肿瘤样本的测序结果 其中编号01-09表示肿瘤，10-19表示正常

```{r}
# 字符14~15，
sample$condition <- factor(
 ifelse(as.numeric(str_sub(sample$phenotypeID,14,15)) < 10,'tumor','normal'),
 levels = c("normal","tumor")
 ) 

sample <- column_to_rownames(sample,var ="phenotypeID" )
sample
```

```{r}
library(DESeq2)

dds <- DESeqDataSetFromMatrix(countData = exprCounts,
                              colData = sample,
                              design = ~ condition)
dds
counts(dds)[1:3,]
```

### 预过滤

```{r}
smallestGroupSize <- 8

keep <- rowSums(counts(dds) >= 10) >= smallestGroupSize
dds <- dds[keep,]
dds
dds$condition

dds@colData
dds@assays
counts(dds)[1,]
pre_filtered_exprCounts <- counts(dds)  # 14815×16
```

## 差异分析

```{r}
dds <- DESeq(dds)
res <- results(object = dds,
               contrast = c("condition","tumor","normal"),
               filter = rowMeans(counts(dds, normalized=TRUE)),
#theta = 0.99,
)
metadata(res)["alpha"]

res

# 根据padj 升序
resOrdered <- res[order(res$padj),]

res <- as.data.frame(resOrdered)
# 导出到csv
write.csv(res, file="data/resOrdered.csv")
```

## 结果分析

```{r}
mcols(resOrdered)$description
```

pvalue，是统计学检验变量，代表差异显著性，一般认为P \< 0.05 为显著， P \<0.01 为非常显著。其含义为：由抽样误差导致样本间差异的概率小于0.05 或0.01。

padj，是对pvalue进行多重假设检验校正后的结果。转录组测序的差异表达分析是对大量的基因表达值进行的独立统计假设检验，存在假阳性（Family-Wise Error Rate，FWER），Bonferroni矫正

qvalue，False Discovery Rate，FDR，所有假阳性结果占所有拒绝零假设结果的比例，假阳性结果的比例不超过预设的FDR水平（0.05/0.1）,基于pvalue的分布。多重假设检验校正方法：Benjamini-Hochberg，

log2FoldChange：对数倍数变化，1.5倍差异即0.585，2倍差异即1。

![](data/FoldChange.jpg){fig-align="center"}

```{r}
DEG <- read_csv("data/resOrdered.csv")
DESeq2_DEG = na.omit(DEG) 
nrDEG=DESeq2_DEG
```

### 热图

```{r}
pre_filtered_exprCounts[1:4,1:4]
log2exprCounts <- log2(pre_filtered_exprCounts+1)
library(pheatmap)
DESeq2_DEG <- DESeq2_DEG |> column_to_rownames(var = "...1")
pheatmap(log2exprCounts[rownames(head(DESeq2_DEG,n=20)) , ])

```

### 挑选指定第一个基因看它在同一个病人的配对表达情况

```{r}
#| echo: false
conflicts_prefer(GenomicRanges::setdiff)
```

```{r}
library(ggpubr)

df <- data.frame(g=sample$condition,
                 p=colnames(exprCounts),
                 v=as.numeric(exprCounts[rownames(DESeq2_DEG[1,]),])) 

ggpubr::ggpaired(df, x = "g", y = "v",color = "g", 
                 line.color = "gray", line.size = 0.4,palette = "npg")+
    stat_compare_means()
```

### 火山图

```{r}
nrDEG$group <- factor(
    if_else(nrDEG$padj<0.2& abs(nrDEG$log2FoldChange)>=0.585,
            if_else(nrDEG$log2FoldChange>=0.585,"up","down"),
            "normal",),
    levels =c("up","down","normal") )
table(nrDEG$group)

gene_labels <- dplyr::filter(nrDEG,nrDEG$padj<0.2 & 
                                 abs(nrDEG$log2FoldChange)>=0.585)|> 
    slice_head(n=10) |> column_to_rownames(var = "...1")


ggplot(nrDEG,aes( x = log2FoldChange,y = -log10(padj),color=group,shape=group))+
    geom_point(alpha=0.5,size=2)+
    scale_color_manual(values = c("red","green","gray"))+
    #scale_shape_manual(values = c(2,25,4))+
    geom_vline(xintercept = c(-0.585,0,0.585),lty=3,color="grey25",lwd=0.8)+
    geom_hline(yintercept = -log10(0.2),lty=3,color="grey25",lwd=0.8)+
    ggrepel::geom_text_repel(
        data = gene_labels,
        aes(label=row.names(gene_labels)),
        color="black",
        size=2)+
    theme_classic()

```

### LFC收缩和pagj

```{r}
resultsNames(dds)
# BiocManager::install("apeglm")  自适应 t 先验收缩估计器  默认
resLFC <- lfcShrink(dds, coef="condition_tumor_vs_normal", type="apeglm")

# `normal`是原始的 DESeq2 收缩估计器，是先验的自适应正态分布
resNorm <- lfcShrink(dds, coef=2, type="normal")

# BiocManager::install("ashr")
resAsh <- lfcShrink(dds, coef=2, type="ashr")

summary(res)
sum(res$padj < 0.05, na.rm=TRUE)

res05 <- results(dds, alpha=0.05)
summary(res05)


## 先验信息

priorInfo(resLFC)
priorInfo(resNorm)
priorInfo(resAsh)

```

### MA图 Mean-AbsDeviation plot

```{r}
# 1.将DESeq结果转换为dataframe
head(DESeq2_DEG)
# 2. 对gene添加“是否呈现显著差异表达”的标签
DESeq2_DEG$significant <- factor(ifelse(DESeq2_DEG$padj <0.05, "Significant", "NS"),
levels = c("Significant", "NS"))

table(DESeq2_DEG$significant)
# 以baseMean作为x，log2FoldChange作为y   以significant作为分类变量
ggplot(DESeq2_DEG, aes(baseMean, log2FoldChange, colour=significant)) + 
 geom_point(size=1) + 
 scale_y_continuous(limits=c(-3, 3)) + 
 scale_x_log10() + 
 geom_hline(yintercept = 0, colour="black", linewidth=1) + 
 labs(x="mean of normalized counts", y="log2FoldChange") + 
 scale_colour_manual(name="padj", 
                     values=c("Significant"="blue","NS"="grey50")) +
 theme_classic()
```

```{r}
xlim <- c(5,25)
ylim <- c(-3,3)
plotMA(resOrdered,  xlim=xlim, ylim=ylim,main="none")
plotMA(resLFC, xlim=xlim, ylim=ylim, main="apeglm")
plotMA(resNorm, xlim=xlim, ylim=ylim, main="normal")
plotMA(resAsh, xlim=xlim, ylim=ylim, main="ashr")
```

### readCounts

```{r}
#  the counts of reads for a single gene across the groups
plotCounts(dds, gene=which.min(resOrdered$padj), 
  intgroup="condition",returnData=TRUE) |> 
 ggplot(aes(x=condition, y=count)) + 
 geom_point(position=position_jitter(w=0.1,h=0))
```

### 异常观测

```{r}
W <- resOrdered$stat
maxCooks <- apply(assays(dds)[["cooks"]],1,max)
idx <- !is.na(W)
plot(rank(W[idx]), maxCooks[idx], xlab="rank of Wald statistic", 
  ylab="maximum Cook's distance per gene",
  ylim=c(0,5), cex=.4, col=rgb(0,0,0,.3))
m <- ncol(dds)
p <- 3
abline(h=qf(.99, p, m - p))
```

### 多因素设计

```{r}
colData(dds)
```

## 导出到 CSV 文件

```{r}

resSig <- subset(resOrdered, padj < 0.05)
resSig

write_csv(as.data.frame(resSig), 
 file="data/padjust_0.05_resOrdered_tumor_normal.csv")
```
